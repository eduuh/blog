[{"content":" VimCraft + Productivity + vscode\r\r\rWhat is Vim ?   Vim is an advanced text editor.\n  Vim = Vi + IMproved.\n  Vi is short for \u0026ldquo;visual\u0026rdquo;.\n  Vi has been replaced by vim.\n   Vim is powerful text editor! I love vim \u0026hellip; and if you don\u0026rsquo;t already, you soon will too!. Since i Started using Vim I want it every where.\nVim Modes\r\r\r Normal /Command Mode. Insert mode Line Mode. There are other modes, too..  \rVim and Vscode I use vscode with colemak vim. Here i will list out some of my productivity mappings for vscode and vim. The main configuration files in vscode are settings.json and keybindings.json.\n\rkeybindings.json files.\n\r","description":"My vscode Configurations that make me Productive Using Vscode using colemak vim and some custom Vscode Keybindings.","id":3,"section":"posts","tags":null,"title":"Vscode Configurations","uri":"https://eduuh.github.io/blog/posts/vscodeconfig/"},{"content":"I often find myself in a Situation where I hit undo a couple of times to peek back in time, but losing the ability to redo my way back due to inserting some text by accident or intentional. This caused some unpleasan moments until I\u0026rsquo;ve learned about Vim\u0026rsquo;s powerful undo/redo system.\nWorking with Undo branches in nvim Undo tree was introduced in vim 7.0, fro that verson the history is stored in a tree rather than a stack. The root of the tree refers to the original version of the file (no changes), and every time you change something a new node is added to the graph. The latest leaf node represent the last change you have made.\nFor example, the history looks like the following if you add lie after line without using undo:\nThe path from the latest leaf node to the root contains all the changes you\u0026rsquo;ve made to reach the current state of the file.\nWith undo(U) and redo() you can walk upward and downwards this path.\nUsing these commands alone nvim behave like most editors that have the usual undo stack. However, if you change something after an undo action, the tree grows a new branch rather than simply discarding the previous future elements.\nNvim keeps all your changes, but with u and  you can\u0026rsquo;t reach the nodes that are outside the path to the root.\nHowever, nvim has the ability to navigate the changes in the order they were made. With g- you can move to the previous item in time, while g+ moves to the next one.\nThis can be a solution to the proble of the accidentally lost changes while undoing around: hitting g- in this case can take you back to the latest version you need.\nGundo g- and g+ is neat, however discovering the whole history graph with them might be inconvinient. Guondo.vim provides an easy to use way to navigate in the undo branches. It requires Python and a Vim build with python support.\nThe plugin provides a nice graphical layout of the undo branches making the navigation in the changes trivial:\nRemap the u to toggle the view, and I also had to set the g:gundo_prefer_python3 to 1 because I am using python3.\nnnoremap \u0026lt;leader\u0026gt;u :GundoToggle\u0026lt;Esc\u0026gt; let g:gundo_prefer_python3 = 1 Summary Nvim has a powerful Undo/redo system that make sure that you don\u0026rsquo;t lose any changes. Use the g-/g+ if you get stuck with u/. If you need total control over your history don\u0026rsquo;t forget to install Guondo.vim.\nI use vim plug.\nPlug \u0026#39;sjl/gundo.vim\u0026#39; ","description":"How undo branches work in Vim 7.0 and Nvim","id":4,"section":"posts","tags":["linux"],"title":"Never Lose a change again: Undo branches in Vim","uri":"https://eduuh.github.io/blog/posts/vimundo/"},{"content":"Installing dotnet core in ubuntu sever using snap.\napt-get update apt-get install snapd Search for available Dotnet packages. The search will list out the latest dotnet sdks and runtimes.\nsnap find dotnet Here is the command output\nName Version Publisher Notes Summary dotnet-sdk 5.0.100 dotnetcore✓ classic Develop high performance applications in less time, on any platform. dotnet-runtime-21 2.1.23 dotnetcore✓ - Cross-Platform .NET Core Runtime. dotnet-runtime-31 3.1.10 dotnetcore✓ - Cross-Platform .NET Core Runtime. dotnet-runtime-50 5.0.0 dotnetcore✓ - Cross-Platform .NET Runtime. uno-platform-iot-sample-app 1.0 uno-platform - Uno Platform IoT Sample App iot-dotnet-sample 1.0 iotnxt - .NET Core example Snap test-hello 0.1 iotnxt - simple dotnet hello world Install the Dotnet Package. You aliase the dotnet snap to dotnet.\nsnap install dotnet-sdk --classic snap alias dotnet-sdk.dotnet dotnet Verify the List of snap package insalled.\nsnap list Here is the command output.\nverfy the Dotnet installation.\ndotnet --info Heare is the command output.\nCongratulations! You have now installed dotnet installation on your ubuntu linux.\nInstalling the LTS To install the current Lts version 3.1.10 using snap you will need to install snap using the command.\nsudo snap install dotnet-sdk --channel=3.1/stable --classic Testing the dotnet Installation. Create a Dotnet project.\nmkdir test cd test dotnet new console Start the dotnet project.\ndotnet run If you receive the following error message the dotnet installation is not okay.\nBuild your project\ndotnet bin/Debug/netcoreapp3.1/test.dll The dotnet installation is successfully installed .\nWorking with My Server Remotely From Visual Studio Code. Once I installed dotnet successfully in my ubuntu server. I needed to connect remotely from my vscode in order to make quick changes on the server. But ominisharp does not seem to find any sdk installed. The solution was to create a sybolic link as shown below.\nRun The command below to find out where you dotnet installation is located. Since we used snap to install, its located in the /snap folder.\nwhich dotnet /snap/bin/dotnet Add the line to your bashrc or zshrc file.\nexport PATH=$PATH:/snap/bin/dotnet ","description":"Installing dotnet sdk on ubuntu server using snap. The official way did not work for for the server. Here is way I got it working.","id":5,"section":"posts","tags":["cli"],"title":"Installing Dotnet SDK on Ubuntu Server","uri":"https://eduuh.github.io/blog/posts/dotnetinstall/"},{"content":"Some Terms you Need to Understand.  Events. Trigger the workflow. Workflows. A workflow is a group of jobs. Workflow runs in a reqular or\ntriggerd by events Jobs. Jobs are a group of actions which are run in steps. Step. Performs one actions. deployment Action. Run a single shell command. Virtual Environment A worklow runs on a virtual environments. Runners  Github-hosted Runners self-hosted Runners     Github Action is a tool that lets you automate your software development workflows.\n You can write individual tasks called actions and combine them to\ncreate a custom workflows.  Workflow are custom automated process that you can set up in your repository to build , test , package, release, or deploy any code project on Github.\nEvents that can happen on a Github repository\n Push. Pull Requests (opened , merged) Issue {created , closed Sheduled events. External Events.   The events are used to trigger a workflow. The workflow runs on the github server in terms of jobs. The github server can be either a linux, windows, MacOS with tools installed or Docker Container.\nA set of actions part of a workflow can be refered to as a job. A workflow now can have multiples Jobs. The job is run on a Vm instance which couldeither run in pallarel or one by one (dependent).\nYou could write a workflow that builds android and ios. Both of this jobs can run in parallel. Or they could wait for another job to finish first . The two workflows could be waiting for the testing workflow to finish in order to run the two in parralel or separately.\nDraw the image her\nA Runner  Any machine with the github Actions runner application installed. A Runner is responsible for running you jobs whenver an events happens and\ndisplay back the results. A runner can be hosted on github or you could host your own.  Github-hosted Runners.  Linux, Windows or MacOs Virtual environments with commonly-used pre-installed\nsoftware on a gibhub server. Mainted by github. You cannot customize the configurations of this machines.  Self-hosted Runners.  A machine you manage and maintain with runner application installed. You have more control of hardware, operating system, and software\ntools than github-hosted runners provides. Ideal if you need to control **hardware. Add more memory for larger jobs Or Choosing an operating system not offered by **github-hosted runners.**.  In most cases you might not need a self hosted runner but is good to know this option is there\nPre-installed Software. The github-hosted runners comes with some pre installed runners tools which include the following.\n Tools like curl, git, npm, yarn and pip Languagese like python, ruby, nodeJS Android SDK and XCode.  Github actions are usually written in yaml format. Yaml format is a data serilization data format. Yaml stores values in key value pairs.\n Always indent with 2 or 4 spaces. not tab.  I prefer using 4 since it becomes more readable.    Lets Create a github Workflow. Lets create our first workflow for our code.\nmkdir gitactions\ncd gitactions\ngit init\nmkdir .github\ncd .github\nmkdir workflows\ncd workflows\ntouch simple.yml Type this in the simple.yml file you just created.\nname:shellcommandson:[push]jobs:run-shell-command:runs-on:ubuntu-lateststeps:- name:echoastringrun:echo\u0026#34;Helo world\u0026#34;- name:Multilinescriptrun:| node -vnpm-v 👆 is a simple workflow file. The workflow is named shell commands, which is triggered by the push events. The name keyword is used to define the name of the workflow. A workflow usuall contains one or more jobs and for this case we have one job which is an objects named run-shell-command. You must specify the environments to run your job into with the runs-on command. here we are using ubuntu-latest. A Job also contains steps. The steps could then contains actions or bash commands cmd. Here we created two steps. echo a string and Multiline script.  Note: We use the pipe | to define multiline commands. The second step is use to define two commands node -v and npm -v. Lets push our changes to our repository.  Note: ensure you are in your folder\ngit init\nhub create\nhub push Now lets see what is in our repository. Using hub is easy.  hub browse 👆 above command will take you directly to github page.  Open the / click on the action tab You should see the following.  Lets open our job and see what happend. You will need to click ot the\nrun-shell-command located on your left side of the screen.  👆 The first and the last job are set by github. The first step is for setting up the environments and the last step if for cleaning up.\nYou could also to choose to receive a notification, once you jobs are run. This setting is available in your setting in Notification. You could choose either Email, web or Send notification for failed worklows only\nWhen the Job is running you can cancel the Job. Once a job has failed you can also retry the job. from the ui.\n Lets make our job fail. By using the a command that does not exist on linux Lets mispell echo to eccho in the above yml file.  run:eccho\u0026#34;Helo world\u0026#34;Lets commit the change and push the code to github and see what happens.  git add . git commit -m \u0026#34;Making the job fail\u0026#34; hub push hub browse If you followed the command above you will land to to the repo page. Click on action and you will get here 👇.  Note: You can download log archive from the UI. This is usually helpful when you are debugging a failed Job. Take note of this.\nBy Default we get less information, about our running job. But we could enable some setting to see more information. We need to enable some secrets.\nThis is usually enable at a project level settings \u0026gt; secrets. To read more on this read [github documentation](workflow: ACTIONS_RUNNER_DEBUG to true.) We are setting workflow: ACTIONS_RUNNER_DEBUG to true. and workflow: ACTIONS_STEP_DEBUG to true\n You will notice that the output is a little bit noise to much but you could enable the secrets when you are debugging your Job to get more info. After you activate the secrets the logs will contains more information.\nUsing Other Shells (Powershell) Some supported shells.\n bash. Linux shell powershell: =\u0026gt; windows only Python. python shell  Lets Modify our workflow to run some python script using the python\nshell.  name:shellcommandson:[push]jobs:run-shell-command:runs-on:ubuntu-lateststeps:- name:echoastringrun:echo\u0026#34;Helo world\u0026#34;- name:Multilinescriptrun:| node -vnpm-v- name:pythoncommandrun:| import platformprint(platform.processor())shell:python👆 At the step level where we define a new level You could change the\nshell you use using the shell command. View available shells\nLets create windows jobs. To create a shell that run on windows would require a windows virtual machine. To run different virtual machine we require different jobs which could be run in parallel or sequentially. All Jobs should be at the same level of indentation.  name:shellcommandson:[push]jobs:run-shell-command:runs-on:ubuntu-lateststeps:- name:echoastringrun:echo\u0026#34;Helo world\u0026#34;- name:Multilinescriptrun:| node -vnpm-v- name:pythoncommandrun:| import platformprint(platform.processor())shell:pythonrun-windows-commands:runs-on:windows-lateststeps:- name:DirectoryPoweshellrun:Get-Location- name:DirectoryBashrun:pwdshell:bash👆 We have two jobs running in parallel in github. The windows job output are as follows.\ngit add .\ngit commit -m \u0026ldquo;Added windows Job\u0026rdquo;\ngit push\nAdd needs command to make a Jobs run in series. By default github will run the jobs in parallel. But we could have a situation we could need to run the jobs in series. The first jobs run and when it succefully completes , the second job is then run using the output of the first one. Lets see how we could do this. We use needs command which could take an array of jobs. On the secondcommand lets add needs: [\u0026ldquo;run-shell-command\u0026rdquo;]  run-windows-commands:runs-on:windows-latestneeds:[\u0026#39;run-shell-command\u0026#39;]steps:- name:DirectoryPoweshellrun:Get-Location- name:DirectoryBashrun:pwdshell:bashgit add .\ngit commit -m \u0026ldquo;Changed jobs run mode to run in series\u0026rdquo;\ngit push Both applications run as needed.\nActions Deep Dive Actions are code that someone has written , to assist in doing some tasks, you can use them in your workflows as steps. We could have more than one workflow in git repository. Lets create a new workflow in the .github folder. Action can be Public or pre-created.\nLets use Hello world Javascript action. This actions prints \u0026ldquo;Hello world\u0026rdquo; or \u0026ldquo;Hello\u0026rdquo; + the name of persion to greet to the log.   Actions receives: inputs Actions also have outputs   👆 The above action takes an inputs who-to-greet:  and gives out outputs time. Lets create this worlflow and be observent on how we pass in the input and how we get the outputs.\nname:ActionsWorkflowon:[push]jobs:run-github-actions:runs-on:ubuntu-lateststeps:- name:SimpleJsActionid:greetuses:actions/hello-world-javascript-action@v1.1with:who-to-greet:Edwin- name:LogGreetingtimerun:echo\u0026#34;${{ steps.greet.outputs.time }}\u0026#34;git add .\ngit commit -m \u0026ldquo;Created a new workflow\u0026rdquo;\ngit push The two workflow will run in parralel.\nLets focus on the uses line for a minute.\nuses: actions/hello-world-javascript-action@v1.1 uses takes in a references to github or a relative reference. The github\nrefereference is written in the form /@[branch|version|commitid]. But its not advisable to reference a branch since this is the latest code. Code updates could have breaking changes which could make your workflow to fail.\nA safe approach could to be mores specific by referenciing a verison or a commit id. This way the behaviour of the code does not change unless you change it. You notice that I use a version reference.\nThe checkout Action. After we did the ls command from our last workflow, did you notice that no files were actually listed out. This is because By default github does not clone you repository in the runner environments. If our workflow would require our code, we would need to checkout our code in the repository. This is done using a checkout action. Checkout action is written and maitained by github.\nname:ActionsWorkflowon:[push]jobs:run-github-actions:runs-on:ubuntu-lateststeps:- name:ListFilesrun:| pwd ls-la- name:CheckoutActionuses:actions/checkout@v1- name:ListFilesrun:| pwd ls-la- name:SimpleJsActionid:greetuses:actions/hello-world-javascript-action@v1.1with:who-to-greet:Edwin- name:LogGreetingtimerun:echo\u0026#34;${{ steps.greet.outputs.time }}\u0026#34;Lets look at some Environment variables that are set by default when using github actions we will check on this later on. Lets just list them out.To list the out we could use the echo command.\necho $GITHUB_SHA echo $GITHUB_REPOSITORY echo $GITHUB_WORKSPASE echo \u0026#34;${{ github.token }}\u0026#34; Let me give you the updated .yml files.\nname:ActionsWorkflowon:[push]jobs:run-github-actions:runs-on:ubuntu-lateststeps:- name:ListFilesrun:| pwd ls-laecho$GITHUB_SHAecho$GITHUB_REPOSITORYecho$GITHUB_WORKSPASEecho\u0026#34;${{ github.token }}\u0026#34;- name:CheckoutActionuses:actions/checkout@v1- name:ListFilesrun:| pwd ls-la- name:SimpleJsActionid:greetuses:actions/hello-world-javascript-action@v1.1with:who-to-greet:Edwin- name:LogGreetingtimerun:echo\u0026#34;${{ steps.greet.outputs.time }}\u0026#34;To do a git checkout manually we could use a step like follows. I did not test this though.\nrun:| ls -aecho$GITHUB_SHAecho$GITHUB_REPOSITORYecho$GITHUB_WORKSPASEecho\u0026#34;${{ github.token }}\u0026#34;gitclonegit@github:$GITHUB_REPOSITORYgitcheckout$GITHUB_SHAAction market place\n","description":"Github Action Automation.","id":6,"section":"workshops","tags":["cli"],"title":"Github Actions and Workflows Guide","uri":"https://eduuh.github.io/blog/workshops/git/githubactionworkflows/"},{"content":"Welcome, lets get into the task ahead.\nLearning Objectives  Get to Learn what Git is Learn about some Usefull linux tools Learn basic Cli tools. Tip and Tricks when Using Git Learn How to use Git To Understanding Opensource Project Practical Uses of Git as a daily driver apart from projects Automation with github worflow Creating a portfolio static site and deploying it azure with github pages.   Requirements  Command Line that support unix style commands. Choose editor. node \u0026gt; 8.0. We will be using some npm cli tools_ Some npm packages Install them once with the command 👇\nnpm install \u0026ndash;global generate generate-gitignore generate-license git version \u0026gt; 2.0 (check with git \u0026ndash;version) Create a github.com account Create a Azure Devops account github/hub  Step one: Installations. This is your checklist:  [] Access to terminal. [] Install Git. [] Sign up for a github account. [] Choose editor.  Step 1: Work Environments: Access To Terminal.  Mac: use Terminal Windows:  Option 1: Power shell Option 2: Git bash. Option 3: Use WSL (Ubuntu) (must be installed prior to workshop) (for advanced users)   Linux.  Step 2: Installation of Git.  Mac: Git for mac download Windows:  Git for Windows (Git Bash)   Linux:\nInstall Git on Linux  Confirm Git is installed by typing git --version on your terminal\nStep 3: Sign up for a GitHub Account  github.com Save your user ID and password somewhere you can easily find it  Step 4: Choose a Graphical Editor  Try Visual Studio Code  Visual Studio Code   OR one of these other editors  Sublime Text 3 Atom Notepad++ (for Windows)   R users: can use RStudio\u0026rsquo;s editor  What is Git. ? Git is a distributed version control system.\n Command Line Basics. Standard ways to get help. There are a few ways to learn about a command in linux. Whether you are and inexperienced terminal user or experienced, you won\u0026rsquo;t always know the right thing to type into the Linux Terminal. There are quite a few tools build into the terminal to help you along.\nThe formats to get get help are in the form: All this form are usually equivalet they will give you the same man pages.\n1. \u0026lt;command\u0026gt; help \u0026lt;verb\u0026gt;\n2. \u0026lt;command\u0026gt; \u0026lt;verb\u0026gt;\n3. \u0026lt;man\u0026gt; \u0026lt;commad\u0026gt; \u0026lt;verb\u0026gt;\nWe just installed git, Lets see how we could get help for any command in git.\nman git man git init git help init Lets understand a man Page. 👇\nThe man command shows detailed manulas for each command.\nIf you just want to see a general overview of the commands. You could use the shorthand version\ngit init -h Some more examples for the shorthand help command.\ngit add -h\ngit init -h 1. First-Time Git Setup. Git comes with a tool called git config that lets you get and set configuration variables that controls all aspects of how Git looks and operates. These varible can be stored in three different places.\n  /etc/gitconfig file.\nSystem wide configurations. Configures git for all users on the system. To set configuration at this level with the git config tool you pass in option --system\n Because this is a system configuration file, you will need adminstrative or superuser privileges to change it.    ~/.gitconfig or ~/.config/git/config file.\nGit configuration specific personally to you, the user. You can make Git read and write to this file specifically by passing the --global option.\n  config\nFile specific to the git directory (that is .git/config) or whatever repository you\u0026rsquo;re currently using. You can force Git to read and write to this file with the --local option.\n  Each level overrides values in the Previous level, so values in .git/config trump those in /etc/gitconfig.\nTo show all your setting and where they are coming from use.\n$ git config --list --show-origin Lets set Your Identity (on local computer). The first thing you should do when you install Git is to set your user name and email address. This is important information since git commit uses this information. Make sure you replace the values with you informations preferably the same information as github.\ngit config \u0026ndash;global user.name \u0026ldquo;eduuh\u0026rdquo;\ngit config \u0026ndash;global user.email \u0026ldquo;edwin@github.com\u0026rdquo; Many of the GUI tools will help you do this when you first run them. My attempt 👇\nThis information is added to the ~/.gitconfig file. To verify these additions, type:\n git config \u0026ndash;list \ncat ~/.gitconfig As a helpful step, you may want to set Git to use your favourite editor. I believe in windows you will have to enter the fullpath, of the software if you did set it during installation.\ngit config --global core.editor code Lets Create a Directory and Navigate into It To begin, open up a terminal and move where you want to place the project on your local machine using the cd (change directory) command.\n mkdir is a cli tool used to make directories.  mkdir gitbasics   We have created an empty folder. Lets navigate into it\n  cd using to change directory\n  cd gitbasics Lets initialize our git Repository To initialize is to create a git repository using the init command. When creating a new project on your local machine using git, you\u0026rsquo;ll first create a new repository (or often \u0026lsquo;repo\u0026rsquo;, for short)\ngit init For the curius, you should also see the .git subdirectory. This is where all your repository\u0026rsquo;s data and history is kept.\nls -a .git you will see 👇.\nbranches config description HEAD hooks info objects refs Let add a few files If your project is open source it usually a good idea to add a License file. I will use an npm tool to generate the license to our repository.\nLets first install the tool. Assuming you had installed node. If you haven\u0026rsquo;t you should install nodeJs.\nsudo npm i -g generate generate-license Once installed lets use the command gen license. After that run ls command to confirm you file is generated.\ngen license:mit # enter your author name ls 👆 ls command is used to list out files in a directory.\nLets learn how git thinks of files. Files in git are usually in either two states:\n Tracked. Untracked files.  Right now in our local repository we have a single file license. To find out the state of the file we use the git status command.\n👆 LICENSE file is untracked. From this Take note that new files you add to your repository will be untracked by default. Untracked files message means that there\u0026rsquo;s a file in the directory that Git isn\u0026rsquo;t keeping track of. We could request git to track our file using the git add command. After the command make sure you run git status\ngit add LICENSE 👆 git knows that LICENSE is a new file.\n7. Lets save a snapshot of a file to our git repository. git commit -m \u0026ldquo;Added MIT license to our repository\u0026rdquo;\n[master (root-commit) 04a57fe] Added MIT license to our repository\n1 file changed, 21 insertions(+)\ncreate mode 100644 LICENSE 8. Lets Make a change to the file The change could be changing the authors name. Open the file with your editor and manually edit the authors name. After you do that run git status.\n👆 git knows that LICENSE is a Modified\nNote the modifications are not automatically save by git. You will still need to explicity save them.\ngit add LICENSE\ngit commit -m \u0026ldquo;Change the Licenses Author name\u0026rdquo; I have show you how to, now lets jump to the why we are doing this. Lets talk about the areas of git\nThe working Tree The working Tree is the are where you are currently working. It is where your files live. This are is also know as the untracked area of git. If you make changes here you and dont explicity save them to git, you will lose the changes made to your files.\nThis loss of changes occurs because git is not aware of the files or changes in the working directory until you tell it to pay attention to theme.\nThe Stagin Area(Index) The Stagin Area is when git start tracking and saving changes that occurs if files. This changes reflect in the .git directory. You tell git that I want to track these specific files, the git says okay and moves them from your working Tree to the Staging Area.\nHow do you add files to your stagin Area? Running the command git add . If you want to add the whole tree run the command git add .\nThe Local Repository The Local Repositroy is everything in your .git directory. Mainly what you will see in you local Repository are all your checkopoints or commits. It is area that saves everthing so don\u0026rsquo;t delete it.\nThe mail analogy In Git, you first add content to the staging area by using git add. This is like putting the stuff you want to send into a box. You finalize the process and record it into the git index by using git commit. This is like sealing the box - It\u0026rsquo;s now ready to send.\nThis are all the steps we did.\n touch README . Touch command adds a new file to the directory. ls to confirm 2 files. git status to see the status of the repository. git add README to stage the file. git status to see what happens. git commit -m \u0026ldquo;Added readme file to repository\u0026rdquo; to save to the .git folder. echo \u0026ldquo;## our Open source project\u0026rdquo; \u0026gt; README to add the line to the file. git status git add README git commit -m \u0026ldquo;Added a heading line to README file\u0026rdquo;   File movement diagram. Understanding git Snapshot concept I want to show you how you could lose your changes without event knowing about it.\n Create a new file README. A new file is empty.  touch README  Lets add README to the staging are using git add. Git add a Snapshot of README to the staging area. Note the snapshot is empty also run a git status  git add README  Lets add some content to the file using the echo command. If run **git status* you will notice that the file is **modified**.  echo \u0026ldquo;## Understnding concept of snapshot\u0026rdquo; \u0026gt; README  Lets commit our changes. Now what git does. It took the file from the stagin area and commit/stored it to our git directory.  git commit -m \u0026ldquo;Added readme file\u0026rdquo;  Lets see all the files that are in the .git repository using the git ls-files.Makes sure you see the README file.  git ls-files  Before you remove the README file lets confirm the files content with cat command.  cat README  Lets remove the README file that is in my working directory and then restore it from the git repository, and confirm if our content made it to our repository.  rm README  confirm the file files is gone with the ls command.  ls  Check the git index again to see, if removing a file from the working directory has an effect to the git repository.. You find that the README file is intact.  git ls-files  Lets restore our README file from our git repository to our working directory using the restore command.  git restore README  Finaly lets check the content of the file. What you notice is that your file is empty.  cat README The files is empty since you did not add the changes to staging area. The write way to do this could be, to avoid losing your work.\n Lets add a new file CONTRIBUTING.md  touch CONTRIBUTING.md  Run git status. CONTRIBUTING.md is untracked file  git status  Add CONTRIBUTING.md to the staging area.  git add CONTRIBUTING.md  Add content to the CONTRIBUTING.md file.  echo \u0026#34;## Contributing code of conduct\u0026#34; \u0026gt; CONTRIBUTING.md Note the \u0026gt; character is used to replace the content of a file. To append new content at the end of the file you use \u0026raquo;\necho \u0026#34;1. Be good to people\u0026#34; \u0026gt;\u0026gt; CONTRIBUTING.md  Lets see the content of the file  cat CONTRIBUTING.md  Add the changes. Tells git to make a new snapshot with the changes.  git add CONTRIBUTING.md  Lets DELETE all the files . When we use git to restore them.  rm *   is a wildcard with a meaning of all files. Not by default rm commands cannot delete directories. .git folder is safe.\n  confirm all files are gone.\n  ls -la # -a used to list out hidden files. 9. Lets do a review of what we just did. 10. lets remove file from the repository. All we have done is added files to the repository. Now lets remove the a file from repos\nwhen you remove files from the repository. git provides commands to remove files from .git git rm deletes files from repository + filesystem.\nNote: git rm does not remove file from the index until you commit your changes.\n11. git log \u0026ndash;list commits We should now have some commits in the repositories. To see all the commits so far we use git log.\ngit log The log should show all commits listed from most recent first to least recent. You would see various information like.\n The name of the author. The date it was commited. A commit SHA number. The message for the commit.  You should also see you most recent commit., however git log does not show the files involved in each commit. To view more information about a commit, use git show.\ngit show Logs options\n  p stands for patch (small changes/feauture)\ncommits + changes {big}\ngit log -p\n  commits + changes {big} anly 2 changes.\ngit log -p 2\ncommits + changes {big} anly 2 changes.\ngit log -p 2\ncommits + changes {big} anly 2 changes.\ngit log \u0026ndash;stats 2\nonline shows commitid and commitmessage\ngit log \u0026ndash;pretty=online git log \u0026ndash;pretty=online \u0026ndash;graph You could also use since=2.weeks\ngit log \u0026ndash;pretty=online \u0026ndash;graph \u0026ndash;since=2.weeks Since takes can also take in hours, minutes.\nIf you are working with a few more people , you could decide to view logs for a specific person.\nTyping the above command is not ideal. Git has a concept of aliases, a method of shortening long commands to a small command. you could want to do something like git tree to rep git log \u0026ndash;pretty=online \u0026ndash;graph\nTo create aliase for git we use the git config command with the format.\ngit config alias.tre = \u0026ldquo;log \u0026ndash;graph\u0026rdquo;\ngit config alias.tr = \u0026ldquo;command\u0026rdquo; Undoing Things. (I undo stuff all the time, so do you) In this section, we are going to add more changes, and try to recover from mistakes.\nA scenario is that you commit files. Later you realize you did not commit all the files in that commit and you don\u0026rsquo;t want to create a commit for a single file. Don\u0026rsquo;t worry you can change this. Git will not edit the commit, it will create a new commit with your file in there. To create a new commit with all your files using git commit \u0026ndash;amend\ntouch app.js console.log(\u0026#39;Hello world\u0026#39;) git add app.js git commit --amend Lets make some more changes to the app.js.\ntouch consol.log(\u0026#34;more changes\u0026#34;) \u0026gt;\u0026gt; app.js What did we change? A very useful command is git diff. This is very useful to see exactly what changes you have done.\ngit diff You should see something like the following:\nStagin area again Now let\u0026rsquo;s add our modified file, app.js to the staging area. Do you remember how ?\nNext , check the status of app.js. Is it in the staging area now?\nUndoing You notice I mespelled the name console in the our last change. Now my code is broken and it cannot run anymore. One advantage of a staging are is to enable us to back out before we commit - whic is a bit harder to back out of is you commit. Remembering the mail analogy. It\u0026rsquo;s easier to take mail out of the cardboard before you seal it that after.\nHere\u0026rsquo;s how to back out of the stagin area:\ngit reset HEAD app.js Compare the git status now to the git status from the previous section. How does it differ?\nYour stagin are should now be empty. What happened to our change? It\u0026rsquo;s still there. We are now back to the state just before we added this file to staging area . Going back to the mail analogy, we just took our letter out of the box.\nUndoing 2 Sometimes we did not like what we have done and we wish to go back to the last recorded state. In this case, we wish to go back to the state just before we added the latest change.\nTo accomplish this we use git checkout, like so:\ngit checkout app.js You have now un-done your changes. You file is now empty.\nLets first talk about remotes. The we will talk about branching.\nWorking with remotes To be able to collaborate on a git project you will need to manage a remove repository.Remote repository are version of your project that are hosted on the internet or network somewhere.\nWorking with remotes is the ability to upload and download you code from other computers i.e github,azure devops , gitlab\n git term for downloading is cloning git term for uploading is pushing  Note you are not limited to using one remote from your project. You could use multiple git servers\nWhen we communicte through the internet. there are some stuff that are usuall involved.\n Protocals - Http , ssh Url - location on internet.  Most git servers both http and ssh for a moment.\nHttps stands Hypertext Transfer protocal secure. Used for a secure communication protocal using TLS, SSL. We could either have.\n Http over TLS. Http over ssl   github support file uploads and downloads using both Http and ssh. Both protocals have unique urls.  SSH. using ssh protocal, you can connect and authenticate to remote servers using ssh keys. This requires setting up ssh and adding your public key to github.\n Lets start of with http, we will come back to ssh later. Http require sign in with username and passwords or use of tokens.  Lets go to github.  go to site github.com/eduuh. Create a remote repository. Click on a new repository. Have a choice of either public or private. Set a description. Lets connect that remote repositry to our local repository.  When you create a new repository on github you get a quick setup documentation. You have an option to select either https or ssh.\nWhen we want to push an existing repo from cli.\n Tell the local repository the url to point to in the internet.  git remote add origin https:  The second command creates a branch.  git branch -M main  To upload your local repository to git repository.    But we are not limited to this set up we could create multiple remotes. I don\u0026rsquo;t know of a case you would want to do this. But why not? let do try.\n  When we create an agile project.\n By default azure devops has more to offert that github  git server (azure Repos), Azure boards (planning), Pipelines      With github you could also achieve alot without azure devops with github actions.\n  To add a second remote url you could run the command.\n  git remote add devops \u0026#34;url\u0026#34;  To list out the available remotes for a project you could use the command.  git remote -v Fetching and Pulling from Remotes.  By default github uses the main branch. git(locally) uses the origin as the default remote.  git push origin main  To push to the other remote.  git push devops main  To download(clone) code you would use the command.  git pull devops Removing remotes / Renaming.  To view all the remotes (available)  git remote -v  To rename the remote files.  git remote rename devops dev  To remove a remote.  git remote remove devops Review of the Process.  Create a local repository Added files and commited them to the git repo. Create a new project Specify public/ private. Set decription. Take Http url from github. Set remote Create an online branch from cli Push the repository to github.   These are 9 steps to upload some files to a server. This is not ideal. You need to be a little bit efficient. This is where hub comes in.\nHub is a command-line tool that makes git easier to use with github. It wrap git in order to extend it with extra features and commands that make working with github easier. Hub has man page.\nBranching Most large code bases have at least *two branches** - a **live branch** and a **development** branch. The live branch is code which is Ok to be deployed on to a website, or downloaded by customers. The development branch allow developerst to work on features which might not be bug free. Only once everyone is happy with the development branch would it be merged with the live branch.\nCreating a branch in Git is easy. The git branch command, when used by itself, will list the branches you currently have.\ngit branch The * should indicate the current branch you are on, which is master. If you wish to start another branch, use git checkout -b (new-branch-name)\ngit checkout -d @development Try git branch again to check which branch you are currently one:\ngit branch The new branch is now created. Now lets\u0026rsquo; work in that branch. To swicth back to the new master.\ngit checkout @master git checkout @development Let\u0026rsquo;s perform some commits now.\necho console.log(\u0026#34;Am in a new brach\u0026#34;); \u0026gt; test.js git add app.js git commit -m \u0026#34;Added new js line\u0026#34; Now, let\u0026rsquo;s compare them to the master branch. Use git diff.\ngit diff master Basically what the above output says is that test.js is present on the @development brach but is absent on the @master branch.\nNow you see me, now you don\u0026rsquo;t Git is good enough to handle your files when you switch betwwen branches. Switch back to the master branch. Try switching back to the master branch.\nNow, where\u0026rsquo;s our test.js file?\nls As you can see the new file you created is the other branch has disappeared. No worries though, it is safely tucked away, and will re-appear when you switch back to that branch.\nNow , switch back to the @development branch and check that the app.js is now present.\nMerging We now try out merging. Eventually you will want to merge two branches together after the conclusion of work. git merge allow you to do that.\nGit merging works by first switching the branch you want to into , and then running the command to merge the othre branch in.\nWe now want to merge our @development branch into master first, switch to the master branch.\ngit checkout master Next, we merge the development branch into master.\ngit merge development Do you see the following output?\n// TODO add output\nYou have to be in the branch you want merge into and then you always specify the branch you want to merge.\nAt this point , you can also try out gitk to visualize the change and how the two branches have merged.\nMerge Conflicts Git is pretty good at merging automagically, even when the same file is edited.Ther are however some situations where the same line of code is edited there is no way a computer can figure out how to merge.\nThis will trigger a conflict which you will have to fix. We now practise fixing merge conflicts. Recall that conflicts are caused by merges which affect the same block of code.\nHeres\u0026rsquo; is a branch I prepared earlier. The branch is called conflict.\n// TODO Simulating a conflict.\nFixing a conflict You should see a conflict with the app.js file This measn that the same line of text was edited and commited on both the master and @development. The output below telss you the current situation.\n// TODO Merge conflict\nIf you open the app.js file , you will see something similar as below.\n// TODO file with merges conflict markers.\nGit users pretty much standard conflict resoluiton markers. The top part of the block which is is everything between \u0026laquo;\u0026laquo;\u0026laquo; HEAD and ========== is what was in your current branch.\nThe bottom half is the version that is present from the @development branch. To resolve the conflict , you either choose one side or merge them as you see fit.\nFor example, I might decide to choose the version from the @development\nNow try to fix the merge conflict. Pick the text that you think is better.\nOnce I have done that, I can the marke the conflicts as fixed by using *git add and git commit**\nDon\u0026rsquo;t leave the conflict markers in your code.\ngit add app.js git commit -m \u0026#34;fixed conflict\u0026#34; Setting up SSH keys Step 1b: Go to .ssh directory cd .ssh  my example\n Note: If you do not have the .ssh directory, you can create it\n if you are in your home directory:  mkdir .ssh  if you are not in your home directory:  mkdir ~/.ssh Step 1c: Generate id_rsa keypair files if needed  Note: these id_rsa files contain a special password for your computer to be connect to network services (Ex: GitHub, AWS). Check to see if these files exist by typing  ls -alt If you do not have these two files (id_rsa and id_rsa.pub), create them by typing:  ssh-keygen  Hit enter 3 times   my example\n % pwd /Users/reshamashaikh/.ssh % ls % ssh-keygen Generating public/private rsa key pair. Enter file in which to save the key (/Users/reshamashaikh/.ssh/id_rsa): Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in /Users/reshamashaikh/.ssh/id_rsa. Your public key has been saved in /Users/reshamashaikh/.ssh/id_rsa.pub. The key fingerprint is: SHA256:jmDJes1qOzDi8KynXLGQ098JMSRnbIyt0w7vSgEsr2E reshamashaikh@RESHAMAs-MacBook-Pro.local The key\u0026#39;s randomart image is: +---[RSA 2048]----+ | .=+ | |. .== | |.o +o | |..+= oo | |.E.+X. S | |+o=o=*oo. | |++.*o.+o. | |..*.oo | |o= o+o | +----[SHA256]-----+ % ls total 16 -rw------- 1 1675 Dec 17 12:20 id_rsa -rw-r--r-- 1 422 Dec 17 12:20 id_rsa.pub % Step 1d: Copy ssh key to clipboard using pbcopy command  pbcopy \u0026lt; ~/.ssh/id_rsa.pub \nVerify the key has been copied to the clipboard by printing the contents at your terminal:\n pbpaste \nWindows Users Step 1: How to Create SSH Keys with PuTTY on Windows\nSTEP 2 (for both Mac and Windows users): Add ssh key to GitHub  go to your GitHub account (create one if you don\u0026rsquo;t have one, and save your user name and password somewhere easily accessible for you.) click on your avatar/profile picture (upper right of screen) go to Settings on left of screen, select SSH and GPG keys Select  New SSH key  for \u0026ldquo;Title\u0026rdquo;: entitle it \u0026ldquo;GitHub key\u0026rdquo; for \u0026ldquo;Key\u0026rdquo;: paste key from clipboard here click  Add SSH key  save, exit, confirm GitHub password as requested  \u0026gt; Installing hub. Install it from your package manager.\nsudo pacman -S hub  Confirm installation by checking the version of hub. The command should show the version of git and hub  hub version  Tell hub that you prefer https to ssh git clone urls.  git config --global hub.protocal https Stay Productive on the commandLine. Hub makes it easy to clone or create repository, browse project page, share logs or code snippets via gist.\n Clone you own project.  hub clone dotfiles  Open current project\u0026rsquo;s issues pages.  hub browse --issues  To delete our repo from github. By default the token given out to hub tool, does not have delete functionally enabled by default. But you could enable it in the settings\u0026gt; developer settings\u0026gt; activate/check \u0026gt; delete repo  hub delete test confirm delete by typing yes.\nLets remove remotes for our repository. git remote remove dev git remove remove origin Using hub reduces the 9 step to only two step. Lets create repository on github using hub from cli.\nhub create -p -d \u0026#34;Learn the basics of git and tips to using gits.\u0026#34; hub push origin main ","description":"Learn how to use git to be great.","id":7,"section":"workshops","tags":["cli"],"title":"Basic Git WorkShop","uri":"https://eduuh.github.io/blog/workshops/git/basicgit/"},{"content":"Introduction To MongoDb using the shell. Using the The shell is the neural ground to learning mongoDB and then later transitioning to the specific language Driver which is easy to do.\nBefore using the database we need to start It. In order to start mongoDB, there are usually two options. Starting mongoDB as a service(starting on system boot up) or using mongod command to manually start it. Here we will use the manual method and then later we can configure mongoDB to start as a service. I also use mongoDB from a docker container, later I will show you the commands to get mongo working.\nDocument to Practise CRUD with.  To start mongoDB use the command [mongod] For local installation of mongoDB. $ mongod\nDocker $ docker run -p 27017:27017 mongo bash\n\nYou will get such an output below 👇\nConnect to mongoDB server with the command [mongo] Execute the command From a different terminal window. Make sure to leave mongoDB server running.\n$ mongo Docker Users If you have mongo tools installed in your installation. Running mongo command will also work since we are binding local port used by mongodb server to the instance of mongoDB in the container. Also make sure you started your container using docker run\nIncase you forget to start the server, you will get such an error.\nIncase you connect successfully you get a prompt as show below. You could list the databases (show three default database available in mongoDb)\nCRUD Operation and MongoDB Let me say that it depends on the use case of mongoDB. You could be using mongoDB for your applications or Analytics/BiTools (DataScience) or you are Database Administrator. All these roles have different CRUD requirements. lets see this visually.\nIn here we are taking the role of an Administrator. As show we have the ability to create ,read , update and delete.\nYou can start using a database that does not exist and MongoServer will automatically create the db for you. The database will be create when you add at least one Document. Above ☝ We have a bootcamps Document and we want to be able to:\n Create a bootcamp. Create many bootcamps. Update the created bootcamp Update Many bootcamps Delete bootcamp Delete manybootcamps. Find a particular bootcamp.   The shell uses javascript but before we start creating stuff. Lets first review available methods to complete all the tasks above. Within the shell db referst to your current database. Type db to display the current database.\ndb\nThe operation should return test, which is the default database.\nuse bootcamp You do not need to create the database before you switch. MongoDB creates the database\n","description":"Understanding Creating, reading, updading and Deleting documents from mongodb shell","id":8,"section":"posts","tags":null,"title":"MongoDB Crud Operation with the Shell","uri":"https://eduuh.github.io/blog/posts/mongodb/mongoshell/"},{"content":"Mongodb is a Database. The name mongodb comes from the word humongous. The company behind mongo is also called mongodb.\n You can use mongoDb when building any kind of applications. Mongo can be use for building mobile apps or web applications. In order to work with mongo, mongodb provides variouse programming language drivers.\nOf course you can work with mongoDb from any programming language but with the help of a driver. Mongodb provides drivers for most languages.\nHow is MongoDb structured MongoDB server gives you the ability to create multiple databases. A mongoDB database is a group of collections which stores multiple Json Objects. A Json object is referred to as the Document.\nExample of A Json Document 👇 Next Post we will practise Basic crud(Creating, reading, updating , deleting) operation using the above ☝ Document.\n","description":"Running how to work with mongodb","id":9,"section":"posts","tags":null,"title":"Mongo Db","uri":"https://eduuh.github.io/blog/posts/mongodb/mongodbintro/"},{"content":"You would consider Azure Container Registry. When you want to manage a Private Docker Registry\nLearning Objectives.  Deploy an Azure container registry using Cli Build a container image using Azure Container Registry Tasks Deploy the container to Azure container instance Replicate the container image to multiple Azure regions.   Create an Azure container registry.  Sign into the Azure portal with your Azure subscription. Open the Azure cloud Shell from the Azure portal using the Cloud shell Create a new Resource group. Name it azurecontainer-rg Create Azure container registry withe azure acr create.    The container registry name must be unique withe Azure and container between 5 and 50 alphanumeric characters\n  Choose the [location of your choice]. In case I decided to use South Africa North\n  Create a Resource Group. [az group create] az group create --name azurecontainer-rg --location \u0026#34;South Africa North\u0026#34; { \u0026quot;id\u0026quot;: \u0026quot;/subscriptions/946006fb-049f-4e97-bf87-ea3cb7308ebf/resourceGroups/azurecontainer-rg\u0026quot;, \u0026quot;location\u0026quot;: \u0026quot;southafricanorth\u0026quot;, \u0026quot;managedBy\u0026quot;: null, \u0026quot;name\u0026quot;: \u0026quot;azurecontainer-rg\u0026quot;, \u0026quot;properties\u0026quot;: { \u0026quot;provisioningState\u0026quot;: \u0026quot;Succeeded\u0026quot; }, \u0026quot;tags\u0026quot;: null, \u0026quot;type\u0026quot;: \u0026quot;Microsoft.Resources/resourceGroups\u0026quot; } Create Azure container Registry. [az acr create] We\u0026rsquo;ll create an Azure container registry withe the az acr command.\nA premium registry SKU is deployed. The premount SKU is required for geo-replication\nTo begin, we\u0026rsquo;ll define an environment variable in the cloud shell called eddnodecontainers to hold the name we want to give our new container registry.\naz acr create --resource-group azurecontainer-rg --name eddnodecontainers --sku Premium {- Finished .. \u0026quot;adminUserEnabled\u0026quot;: false, \u0026quot;creationDate\u0026quot;: \u0026quot;2020-09-07T10:32:10.280230+00:00\u0026quot;, \u0026quot;dataEndpointEnabled\u0026quot;: false, \u0026quot;dataEndpointHostNames\u0026quot;: [], \u0026quot;encryption\u0026quot;: { \u0026quot;keyVaultProperties\u0026quot;: null, \u0026quot;status\u0026quot;: \u0026quot;disabled\u0026quot; }, You will get a bigger json output than ☝. Unless you want geolocation Always start small. Use \u0026ndash;sku basic. I think basic is okay when starting out, It offers 10GB storage space, two web hooks and _Priced at $0.167 per day at the time of this writing.\nRefer on Azure container Registry Pricing.\n There you will see different sku including Basic, Standard, Premium  What to consider when making your choice.\nStorage size, Geolocation Replicate, Cost of the registry     Build container images with Azure Container Registry Tasks. A standard Dockerfile provides build instructions. Azure Container Registry Tasks allows you to reuse any Dockerfile currently in your environment, including Multi-staged builds.\nI will use my dockerfile for our example From this github repository\nImportant.\nYou need Your Own Azure Subscription to run this exercise and you may incur charges. If you don\u0026rsquo;t already have an Azure subscription, create a free account before you begin. FROMnode:14-slim as baseLABEL org.opencontainers.image.authors=edwin@murayaLABEL org.opencontainers.image.title=\u0026#34;Dekut survellance\u0026#34;LABEL org.opencontainers.image.licenses=MITLABEL com.edwin.nodeversion=$NODE_VERSIONENV NODE_ENV=production EXPOSE8080ENV PORT 8080WORKDIR/appCOPY package*.json ./RUN npm config listRUN npm ci \u0026amp;\u0026amp; npm cache clean --forceENV PATH /app/node_modules/.bin:$PATHCMD [ \u0026#34;node\u0026#34;, \u0026#34;./bin/www\u0026#34;\u0026#34; ]FROMbase as devENV NODE_ENV=development RUN apt-get update -qq \u0026amp;\u0026amp; apt-get install -qy \\  ca-certificates \\  bzip2 \\  curl \\  libfontconfig \\  --no-install-recommendsRUN npm config listRUN npm install --only=development \u0026amp;\u0026amp; npm cache clean --forceUSERnodeCMD [ \u0026#34;nodemon\u0026#34;, \u0026#34;./bin/www\u0026#34; ]FROMdev as testCOPY . .RUN npm auditFROMtest as pre-prodUSERrootRUN rm -rf ./tests \u0026amp;\u0026amp; rm -rf ./node_modulesFROMbase as prodCOPY --from=pre-prod /app /appHEALTHCHECK CMD curl http://127.0.0.1/ || exit 1USERnode👆is a Multistage Dockerfile to build my appication. This configuration add an express application to the node:14-slim images. After that , it configure the container to servet the applicaiton on port 8080 via the expose command.\nCreate a service Principal for Azure authentication. In the Github workflow, you need to suplly Azure Credentials to authenticate to the Azure CLI. The following example creates a service principal with the Contributor role scoped to the resource group of your container registry.\nFirst, get the resource ID for your resource group. Substitute the name of your group in the following az group show command.\nThe resource group id store in a Environment variable groupId.\ngroupId=$(az group show --name azurecontainer-rg --query id --output tsv)  Use az ad sp create-for-rbac to create the service principal:  az ad sp create-for-rbac --scope $groupId --role Contributor --sdk-auth Output of this command 👇. I removed Sensitive information.\n{ \u0026#34;clientId\u0026#34;: \u0026#34;xxxx6ddc-xxxx-xxxx-xxx-6433243598\u0026#34;, \u0026#34;clientSecret\u0026#34;: \u0026#34;xxxx79dc-xxxx-xxxx-xxxx-9jajWTDI9a\u0026#34;, \u0026#34;subscriptionId\u0026#34;: \u0026#34;xxxx251c-xxxx-xxxx-xxxx--ea334bf\u0026#34;, \u0026#34;tenantId\u0026#34;: \u0026#34;xxxx88bf-xxxx-xxxx-xxxx-2d7cd00233e6f\u0026#34;, \u0026#34;activeDirectoryEndpointUrl\u0026#34;: \u0026#34;https://login.microsoftonline.com\u0026#34;, \u0026#34;resourceManagerEndpointUrl\u0026#34;: \u0026#34;https://management.azure.com/\u0026#34;, \u0026#34;activeDirectoryGraphResourceId\u0026#34;: \u0026#34;https://graph.windows.net/\u0026#34;, \u0026#34;sqlManagementEndpointUrl\u0026#34;: \u0026#34;https://management.core.windows.net:8443/\u0026#34;, \u0026#34;galleryEndpointUrl\u0026#34;: \u0026#34;https://gallery.azure.com/\u0026#34;, \u0026#34;managementEndpointUrl\u0026#34;: \u0026#34;https://management.core.windows.net/\u0026#34; } az acr build --registry eddnodecontainers --image expressAtoZ:v1 . ","description":"Nodejs container. Deploy an Azure container registry. Building a container image using Azure container Registry","id":10,"section":"posts","tags":["cli"],"title":"Azure Container Registry With NodeJs Container","uri":"https://eduuh.github.io/blog/posts/containerregistry/"},{"content":"Guide to password-Store Recently I decided to start using a password manager as I\u0026rsquo;ve found myself caring more and more about security lately. Like many other I had the bad habit of using the same few passwords across many sites and with the multitude of security breaches and password.\nSo, I\u0026rsquo;ve taken it upon myself to \u0026ldquo;up my game\u0026rdquo;.\nA quick side note about this guide. I assume in this guide that you\u0026rsquo;re running in a linux, Mac, BSD or some other Unix-like system running bash or comparable shell.\n On windows  You could use a password manager available for windows. or you could install WSL for linux.     What is a Password manager? Wondering what a password manager is? A password manager is a piece of software that will store your passwords in an encrypted form and tie those to specific websites so you don\u0026rsquo;t ave to remember them. The benefit of this is you can then store very complex passwords which are unique to each site making any one security breach mean nothing because they cannot use that info to get access to your other accounts. You could also need to store passwords for your VMs on azure. Or even generate and store complex password without the need to even think about it.\nThere are alot of password managers out there to try, some which cost money and some that don\u0026rsquo;t and unfortunately none of the hosted options seem resonable to use for me. This led me to look for a self hosted solution that was simple to understand and flexible so at least if it got breached it was my own fault and hadn\u0026rsquo;t cost me any money. This is when I stumbled upon pass.\nWhat is a Pass? Password management should be simple and follow Unix philosophy. With pass, each password Lives inside of a gpg encrypted file whose filename is the title of the website or resource that require the password. These encrypted files may be organized into meaningful folder hierarhies, copied from computer to computer, and in general, manipulated using standard command line file management utilities.\npass makes managing these individuals password files extremely easy. All passwords live in ~/.password-store and pass provide some nice commands for adding, editing , generating and retrieving passwords. It is a very short and simple shell script.\nIt\u0026rsquo;s capable of temporarily putting password on your clipboard and tracking password changes using git. You edit the password store using ordinary unix shell commands alongside the pass command. There are no funky file formats or new paradigms to learn. There is bash completion so that you can simply hit tab to fill in names and commands, as well as completion for zsh and fish available in the completion folder. The very active community has produced many impresive clients and Gus for other platforms as well as extensions for pass itself.\nPass itself is little more that a set of scripts wrapping gpg and git but to me that is its strength because those are tools which I\u0026rsquo;m already familiar with.\nStep 1. Setting up gpg  GPG can seem extremely complicated at first an that\u0026rsquo;s because it is, but once it\u0026rsquo;s set up you rarely have to mess with it again. GPG works in much the same way an SSH key or an SSL cert works, you have a public key which encrpts things and a matching private key which decrypts those things. This means it\u0026rsquo;s safe to give out your public key but not your private key. Here is a simplified explanation:\n So first things first we need to generate a gpg key:  gpg2 \u0026ndash;full-gen-key When prompted for a password pick something that you will for sure remember , as this is your master password and will be used to unlock your other passwords once you set them up. If you forget the master password after you\u0026rsquo;ve set all this up you\u0026rsquo;re going to have a bad time\nOn the image 👆look out for the line.\ngpg: key 24F21F94DB8F11E2 marked as ultimately trusted\nStep 2 . Set up Pass Now that we have a public and private key to encrypt and decrypt with we can set up our password store. First run Pass init and use the gpg key. I was using pass but when writing this post I needed to change my ssl key.\nNow let\u0026rsquo;s set up git: This has turned our password store into a git repositroy, if you\u0026rsquo;re unsure about what that means fear not because pass takes care of the hard parts of git for us and we\u0026rsquo;ll leave the bits we need to know until later. Now we can add our first password, let\u0026rsquo;s create a test password.\nThe way generate works is that pass takes first the name of the password (often te domain name such as google.com) and then the lenght of password you want it to generate. There are multiple flags you can give generate to make it conform to whatever password rules you would like, you can view possible options with pass generate \u0026ndash;help.\nYou\u0026rsquo;ll now be able to do a listing of your password store by just running pass with no arguments:\nIf you don\u0026rsquo;t see output like the above try running throught the steps above again to make sure you didn\u0026rsquo;t miss anything. If that still doesn\u0026rsquo;t work drop a comment below and I\u0026rsquo;ll try to help.\nRetrieving a password If you want to see the password simply tell pass which one you want and enter your master password when prompted.\nYou will need to input the pass phrase for you private key in order to see your password. (ensure to use gpg key with a passphrase.)\n\\$ pass test 2\u0026gt;{qj,SnrJ if you would like it copied to your clipboard automatically you can use the -c flag. The password is copied to your clipboard for only 45 seconds. After that its cleared.\npass -c test All pass is doing her is storing the generated file in an encrypted plain text file in a folder located at #HOME/.password-store and in case you were wondering, yes since it\u0026rsquo;s just an encryted plain text file you can store whatever you want in there! Such as notes etc. I am planing to keep encypted IP addresses of servers and what ports they are using.\nSince we no longer need our test . Lets get rid of it:\n[dwm@edwin ~]$ pass rm test Are you sure you would like to delete test? [y/N] y removed '/home/dwm/.local/share/password-store/test.gpg' [master bc7826e] Remove test from store. 1 file changed, 0 insertions(+), 0 deletions(-) delete mode 100644 test.gpg  There you go ! That\u0026rsquo;s all you need to know to effectively use pass for basice use cases. I recommend checking out the main site since they link to the android, desktop, ios apps and browser plugins.\nIf you want to sync to another device you need to copy the $HOME/.password-store and $HOME/.gnupg to the target machine, however there is a much better method that allows you to sync continuously without using dropbox or a flash drive but requires a little more setup work up front which I will go over below.\nStep 3 . Using git for your Password Store. Pass can use git to synchronize passwords securely. If you want to use your password store as the git repository. As you nomarly use git to it all the same.\n1. Lets first enable git signing. $ pass git config --bool --add pass.signcommits true 2. Initialize password store. You could use the same email you use with github or other remote service you are using. I store my passowords in azure devops private repository. But for this i will demonstrate using github account.\n$ pass init edwinsemail@outlook.com list what is your pass Store.\n$ pass 3. Initialize your PassStore git repository. pass git init 4. Connect to a remote repository. $ pass git remote add origin https://github.com/eduuh/password.git 5. Push your password to the Remote repository. The first push to github. Use the command to push all your passwords to github.\npass git push -u --all I think this is a safe way to sync your passwords. The password is not pushed to github. What is pushed is your encrypted password. Your password are safe if you don\u0026rsquo;t disclose your private key which is used to decrypt your passwords.\nFuture updates  Write about storing private keys to Azurekeyvault. Automated way Setting up a computer with from a passstore repository with private gpg key How is use pass with DWM   ","description":"Using Pass","id":11,"section":"posts","tags":["cli"],"title":"Password Management on Linux","uri":"https://eduuh.github.io/blog/posts/pass/"},{"content":"Background I will write how a made a switch to colemak. However, until recently, I was still trying to mimic the vim keybindings from qwerty to a colemak equivalent. This is a post where i discuss the changes I made to ensure that I never have to strech my fingers in odd ways again. The main idea is expressed well by vim-colemak.\nMost of my configuration is based on bunnyfly. A colemak user, who have inspired my Journey.\nColemak layout: | QWERTY layout: `12345 67890-= Move around: | (instead of) `12345 67890-= qwfpg jluy;[]\\ e | k qwert yuiop[]\\ arstd HNEIo' h i | h l asdfg HJKL;' zxcvb km,./ n | j zxcvb nm,./  1. Vimium , A Chrome/Brave extension I use the excellent vimium to make brave be a little less annoying. Luckily the wiki seem to have a reasonable suggestion for colemak. The basic idea is to migrate the underlying keys directly to ensure very few manual changes are require.\nThis configuration is added on vimium options page on the Custom remapping section.\nmapkey n j\nmapkey N J\nmapkey e k\nmapkey E K\nmapkey i l\nmapkey I L\nmapkey k n\nmapkey K N\nmapkey l i\nmapkey L I\nmapkey j e\nmapkey J E 2. Zsh To ensure uniform bindings in zsh shell.\nbindkey -M vicmd \u0026ldquo;h\u0026rdquo; backward-char\nbindkey -M vicmd \u0026ldquo;n\u0026rdquo; down-line-or-history\nbindkey -M vicmd \u0026ldquo;e\u0026rdquo; up-line-or-history\nbindkey -M vicmd \u0026ldquo;i\u0026rdquo; forward-char\nbindkey -M vicmd \u0026ldquo;s\u0026rdquo; vi-insert\nbindkey -M vicmd \u0026ldquo;S\u0026rdquo; vi-insert-bol\nbindkey -M vicmd \u0026ldquo;k\u0026rdquo; vi-repeat-search\nbindkey -M vicmd \u0026ldquo;K\u0026rdquo; vi-rev-repeat-search\nbindkey -M vicmd \u0026ldquo;l\u0026rdquo; beginning-of-line\nbindkey -M vicmd \u0026ldquo;L\u0026rdquo; end-of-line\nbindkey -M vicmd \u0026ldquo;j\u0026rdquo; vi-forward-word-end\nbindkey -M vicmd \u0026ldquo;J\u0026rdquo; vi-forward-blank-word-end\nbindkey -M vicmd \u0026ldquo;u\u0026rdquo; undo\nbindkey -M vicmd \u0026ldquo;U\u0026rdquo; redo\nbindkey -M vicmd \u0026ldquo;^?\u0026rdquo; backward-delete-char\nbindkey -M vicmd \u0026ldquo;^[[3~\u0026rdquo; delete-char\nbindkey -M viins \u0026lsquo;^R\u0026rsquo; history-incremental-pattern-search-forward\nbindkey -M viins \u0026lsquo;^r\u0026rsquo; history-incremental-pattern-search-backward\n 3. Zathura There is no better way to read pdf than zathura and it also works for djvu and friends, as a plus point, it normally has very reasonable vim bindings , and an excellent configuration system, so we will leverage that. The best part is that we can just add to it using include Zathuracolemk or whatever so as to be minimally invasive.\nmap n scroll down\nmap e scroll up\nmap h scroll left\nmap i scroll right\nmap N scroll half-down\nmap E scroll half-up\nmap k search forward\nmap K search backward\nmap [index] n navigate_index down\nmap [index] e navigate_index up\nmap [index] h navigate_index collapse\nmap [index] i navigate_index expand\nmap [index] H navigate_index collapse-all\nmap [index] I navigate_index expand-all 4. i3 I have some bindings set ut in terms of focing the window. This does all the work.\nbindsym $mod+h\tfocus left\nbindsym $mod+n focus down\nbindsym $mod+e\tfocus up\nbindsym $mod+i focus right 5. nvim I have some the following remaps in my init.vim file.\n\u0026ldquo;Colemak Remaps {{{\nnoremap n j\nnoremap i l\nnoremap e k\nnoremap k n\nnoremap K N\n\u0026quot; r inner Text object\nnoremap l i\nnoremap L I\n\u0026quot; set j (same as h , cursor left) to \u0026lsquo;end of word\u0026rsquo;\nnoremap j e\nnoremap J E 6. Tmux (Copy mode) This is the keybindings that i use when using copy mode in tmux.\n# colemak keys\nbind-key -T copy-mode-vi n send -X cursor-down\nbind-key -T copy-mode-vi e send -X cursor-up\nbind-key -T copy-mode-vi i send -X cursor-right\nbind-key -T copy-mode-vi k send -X search-again\nbind-key -T copy-mode-vi K send -X search-reverse\nbind-key -T copy-mode-vi l send -X start-of-line\nbind-key -T copy-mode-vi L send -X end-of-line\nbind-key -T copy-mode-vi j send -X next-word-end\nbind-key -T copy-mode-vi J send -X next-space-end\nbind-key -T copy-mode-vi c-n send -X bottom-line\nbind-key -T copy-mode-vi c-m send -X middle-line\nbind-key -T copy-mode-vi c-e send -X top-line Conclusions That seems to be it for now. If I think of more programs I use reqularly which allow vim bindings. Or keybindings in general. i\u0026rsquo;ll probably just update this post. My full dotfiles are present here\n","description":"Refactoring default qwerty configuration to colemak keyboard layout for common unix programs.","id":12,"section":"posts","tags":["cli"],"title":"Refactoring Dotfiles For Colemak","uri":"https://eduuh.github.io/blog/posts/refactoringtocolemak/"},{"content":"As with any Programming language, platform, or tool, the first step to using it is getting it installed. Many of them typically comes with a speedy way to upgrade when a new version is available.\nBy default, there\u0026rsquo;s not a way to upgrade the version of Node.js you\u0026rsquo;ve got from within Node.js itself. That said, there\u0026rsquo;s a fantastic tool for the community called nvm that allows you to manage the version of Node.js that you\u0026rsquo;ve got installed locally.\nnvm is a version manager for node.js, designed to be installed per-user, and invoked per-shell. nvm works on any POSIX-compliant shell (sh, dash, ksh, zsh, bash) in particular on these platforms: unix, macOs and Windows wsl\nOne awesome aspect of nvm is that it manages the versions of Node.js, it doesn\u0026rsquo;t just upgrade them. This means you can have:\n The latest version of Node.js. The latest version of all the LTS release. And any number of other versions you want to use or test as well.   In this quick post, we\u0026rsquo;ll take a look at how to install nvm, and the how to start using it as your version manager for Node.js. Once we\u0026rsquo;ve completed the tutorial, you\u0026rsquo;ll be ready to take the next step with Node.js.\nThis guide covers installing nvm on linux. Note that nvm is a bash script ,it work on linux installations. Enough is said, so lets gets to it.\nInstalling Nvm Here\u0026rsquo;s the abbreviated guide, highlighting the major steps:\n1. Download the nvim install script via curl: When you look at the link below 👇. You will notice there is a version number (v0.36.0). Please, I don\u0026rsquo;t want you to install outdated version of nvm, in regards to when you are reading this. Check the up to date script form github\ncurl -o- https://raw.githubusercontent.com/creationix/nvm/v0.36.0/install.sh | bash 2. Now add these line to your ~/.bashrc , ~/.profile ,~/.zshrc file to have it automatically sourced upon login:\nexport NVM_DIR=\u0026#34;$HOME/.nvm\u0026#34; [ -s \u0026#34;$NVM_DIR/nvm.sh\u0026#34; ] \u0026amp;\u0026amp; \\. \u0026#34;$NVM_DIR/nvm.sh\u0026#34; # This loads nvm. 3. Ensure that nvm was installed correctly with nvm --version which should return the verison of nvm installed.\nnvm --version 4. Installing the version of Node.js you want.\n Install the latest version with nvm install node Use the latest version with nvm use node Install the latest LTS version with nvm install \u0026ndash;lts Use the latest LTS version with nvim use \u0026ndash;lts   Using nvm to manage Node.js. Congratulations! You\u0026rsquo;ve now got nvm - a tool to easily allow you to manage and swap out the versions of Node.js you\u0026rsquo;ve got installed locally. Now, let\u0026rsquo;s get you started with doing just that.\n1. Install the latest Node.js version To install the latest available version of Node.js, you can use the following command:\nnvm install node Next, to use that version of Node.js in any new shell, you can simply run the use command:\n2. Install the latest Node.js LTS version To install the latest available LTS version of Node.js, you can run the following command:\nnvm install --lts And to use that latatestTS version of Node.js in any new shell, you can simply run the use command:\nnvm use --lts List available verison using ls-remote.\nnvim ls-remote\nnvim ls-remote --lts Fixing nvm slowing terminal initialisation.  When I started using nvm , since then my terminal has been very slow to start up. The root cause of the problem is that the (nvm) initialisation script, the one that gets added to your ~/.bashrc or ~/.zshrc on install takes about 500ms to run. The reason for this slowness is because nvim is written completely in bash.\nSummarized problems you will face when you add the above line in your .bashrc or .zshrc is that:\n nvim will add an overhead startup on near 500 Milisecond which is noticable, and your terminal initialisation will seem slow. Since you are adding the script to bashrc or zshrc. The script will run each time you open a new terminal instance. Considering its not frequetly needed script.  This solution was taken from here growingwithweb.com. Feel free to read the blog post to understand what is written. From the blog above , the following solution was arrived at.\nReplace the nvm call you had added to bashrc with the following.\nif [ -s \u0026#34;$HOME/.nvm/nvm.sh\u0026#34; ]; then export NVM_DIR=\u0026#34;$HOME/.nvm\u0026#34; [ -s \u0026#34;$NVM_DIR/bash_completion\u0026#34; ] \u0026amp;\u0026amp; . \u0026#34;$NVM_DIR/bash_completion\u0026#34; alias nvm=\u0026#39;unalias nvm node npm \u0026amp;\u0026amp; . \u0026#34;$NVM_DIR\u0026#34;/nvm.sh \u0026amp;\u0026amp; nvm\u0026#39; alias node=\u0026#39;unalias nvm node npm \u0026amp;\u0026amp; . \u0026#34;$NVM_DIR\u0026#34;/nvm.sh \u0026amp;\u0026amp; node\u0026#39; alias npm=\u0026#39;unalias nvm node npm \u0026amp;\u0026amp; . \u0026#34;$NVM_DIR\u0026#34;/nvm.sh \u0026amp;\u0026amp; npm\u0026#39; fi This version 👆will defer nvm initialisation until either nvm , node or npm is run, at which point it will also unalias all the command so they work of the PATH as normal and run the requested command. It also contains the niceties that comes standard such as checking for the files and bash completion.\nFew more improvements to handle a larger number of commands more easily in order to cover my commonly globaly installed npm cmmands.\n# Defer initialization of nvm until nvm, node or a node-dependent command is # run. Ensure this block is only run once if .bashrc gets sourced multiple times # by checking whether __init_nvm is a function. if [ -s \u0026#34;$HOME/.nvm/nvm.sh\u0026#34; ] \u0026amp;\u0026amp; [ ! \u0026#34;$(type -t __init_nvm)\u0026#34; = function ]; then export NVM_DIR=\u0026#34;$HOME/.nvm\u0026#34; [ -s \u0026#34;$NVM_DIR/bash_completion\u0026#34; ] \u0026amp;\u0026amp; . \u0026#34;$NVM_DIR/bash_completion\u0026#34; declare -a __node_commands=(\u0026#39;nvm\u0026#39; \u0026#39;node\u0026#39; \u0026#39;npm\u0026#39; \u0026#39;yarn\u0026#39; \u0026#39;gulp\u0026#39; \u0026#39;grunt\u0026#39; \u0026#39;webpack\u0026#39;) function __init_nvm() { for i in \u0026#34;${__node_commands[@]}\u0026#34;; do unalias $i; done . \u0026#34;$NVM_DIR\u0026#34;/nvm.sh unset __node_commands unset -f __init_nvm } for i in \u0026#34;${__node_commands[@]}\u0026#34;; do alias $i=\u0026#39;__init_nvm \u0026amp;\u0026amp; \u0026#39;$i; done fi Thanks for reading this post.\n","description":"Installing Node.js Tutorial using nvim and optimizing nvm to reduce slowing terminal initialization.","id":13,"section":"posts","tags":["cli"],"title":"Using Node with Nvm","uri":"https://eduuh.github.io/blog/posts/installingnode/"},{"content":" Take a technology in Isolation.  Reseahs the topic you want to learn. (youtube video, the whats) The existence     Go to the official page. find Quick start guide   Follow the quick quide (Gets you familiriar) Create a hello word application. (dont skip this part)   Look for some reading. (after the quick start) . Dive a little deeper.\n youtube is great for this process Buy courses. From this step. (A course process.) pro and cons of the framework.    If you want to work on this for a long time.\n   A video course does not cover all the courses. Pick a book for the framework. (Read the specific topics)  Build a project with the framework.\nSomething on my own without the quides.  ","description":"Some workflows, I choose to follow in Learning and working on my Next project.","id":14,"section":"posts","tags":["notes"],"title":"How To Learn and Code, n Some workflows","uri":"https://eduuh.github.io/blog/posts/howtolearn/"},{"content":"Intro. It\u0026rsquo;s tmux a so-called terminal multiplexer. Simply speaking , tmux acts as a window manager within your terminal and allows you to create multiple windows and panes within a single terminal window.\nThe great thing about tmux is it allows you to have multiple panes open at the same time, each with their own shell running, but using the same single ssh connection. Not only that , you can also have multiple \u0026ldquo;windows\u0026rdquo; open at the same time.\nA huge benefit of using tmux on a remote server is that if your internet connection should die for any reason, that tmux session keeps on the session live on the server. This means your long-running job that you just kicked off and forgot. All you need to do is tmux attach once your internet is back and you\u0026rsquo;ve ssh\u0026rsquo;d into the server again, you\u0026rsquo;ll have all the same panes and windows there waiting for you.\nWhy Use tmux Locally? To instantly get my command line \u0026ldquo;workspace\u0026rdquo; set up as soon as I fire up my terminal emulator.\nYour mouse is slowing you down.\nAs we build softwares, we work with multiple programs throughout the course of our day. A web developer, for example, mght have a database console , a web server and a text editor running at the same time. Switching between these windows with the mouse can slow you down.\nUsing tmux, you can create an environment like this right in your terminal managed entirely without a mouse.\nWhat\u0026rsquo;s to learn in the post.  Learning the Basics Configuring tmux Scripting Customized tmux Environments. Working with Text and Buffers. Pair programming with tmux. Workflows with tmux   Why you should Read this post. Whether you\u0026rsquo;re are a system administrator or a software developer who spends a good part of your time using the terminal and command line tools and you aim to help you work faster.\nIf you\u0026rsquo;re a software developer, you\u0026rsquo;ll see how to use tmux to build a development environment that cam make workng with multiple terminal sessions a breeze. And if you\u0026rsquo;re comfortable using VIM or Emacs, you\u0026rsquo;ll see how tmux can accelarate your workflow even more\nIf you\u0026rsquo;re a system administrator or a developer who spends some time working with remote servers, you\u0026rsquo;ll be interested in how you can levarage tmux to create a persitent dashboards and sessions for managing or monitoring servers.\nRequirements Tmux 2.1 and 2.2 introduced several backwords-incompatible changes than introduced some new options. And tmux is now more popular that it was before bringing a few options to improve your worklow.\n All example require tmux 2.3 + Tmux is supported under Microsoft\u0026rsquo;s Windows subsystem for Linux. A computer that runs Mac OS X , Windows 10 with Bash support, or a flavor of Unix or Linux. You should also have a good grasp of using command-line tools on a linux or unix system While not required , experience with text editors such as Vim and Emacs might be helpful.  Tmux works much the same way, and it has some predefined keyboard shortcuts that you may find familiar of you use one of these text editors.    Unfortunately tmux does not run under the reqular windows command prompt or Powershell, but it will run great on a WSL , virtual machine, VPS, or Shared hosting envionment running Linux or FreeBsd. Why Using tmux? 1. Background Operations As we saw above, you can detach a tmux session from a client (the terminal) and you can attach it back. It means that you can run whatever you want in the background, even if you have no terminal open.\nLet\u0026rsquo;s imagine that you need to run a very long script on your remote server. Some step you might follow:\n Connect to your remote server via SSH. Launch tmux on the remote server. Run a Script which takes hours. Close the SSH connection. The script will still run on the remote server, thanks to tmux sessions!. Switch off your own computer and go home. Later ssh back to your remote server and attach to tmux sesion.   2. More Termimals! Everywhere! Tmux allows you to create multiple terminal on a single screen. This is the functionality I use most.You might think: \u0026ldquo;Well, great, many terminal emulator can do the same, like terminator.\u0026rdquo; That\u0026rsquo;s true, but tmux is more powerful and consume less resources. You can configure it easily and precisely, according to your specific needs.\nIt works very well with vim too, which makes it mandatory if you want to create a Keyboard Centric development environment.\n3. Protection Against Terminal Crashes. Since your tmux session is independent of your terminal, you don\u0026rsquo;t need to worry anymore if you close it or even if it crashes. You can always reattach your session afterword, in a new and shiny terminal!.\n4. Saving tmux sessions It\u0026rsquo;s possible to save tmux sessions in a file and reopen them later, even after switching off your computer.\n5. Remote Pair Programming. A tmux session can be attached to many clients (terminals), even via SSH. Which means that you can do pair programming with another developer using Tmux and command line base text editor by sharing the same session!.\nHow to use tmux? General Organization. Let\u0026rsquo;s see in more details how to use tmux. This part should answer many potential questions you might have, at that point.\nHere\u0026rsquo;s an example what kind of hierarchy you can with tmux:\nWhen you launch tmux, it will create a tmux-server, a session, a window and a pane.\nTmux Concepts Tmux server The tmux server manage every single tmux sessions. If you kill it, you kill every session as well. You can try it by yourself with the command tmux kill-server.\nSessions We spoke about sessions before. You can detach them from a client (and let them run in the background) and attach them back.\nwindows In tmux, a window represent an entire screen. You can have multiple windows open in one session. You can access each window via a tab in the tmux status bar, at the bottom.\nPanes You can split your windows in panes to have multiple terminals on one screen. Thes panes are independent by default , but you can syncronze them too.\nConventions tmux is a tool that is driven by the keyboard. You\u0026rsquo;ll encounder many keyboard shortcuts throughut the book. Since tmux support both lowercase and uppercase keyboard shortcuts, it may sometime be unclear which key is being referenced\ntmux is case Sensitive.\n Ctrl-b means that \u0026ldquo;press the ctrl and b keys simultaneously.\u0026rdquo; Ctrl-b d means \u0026ldquo;press the Ctrl and b keys simulteneously, then release and the press d\u0026rdquo; $ tmux new-session .The dollar sigh represent the prompt from the bash shell sessions. You won\u0026rsquo;t need to type it when you type the command. It just denotes that this is a command you should type.   Configuring tmux, you can configur tmux with a configuration file called tmux.conf. filenames starting with a period don\u0026rsquo;t show up in directory listing on most system or text editors by default.\nI will be explaning sections of my tmux.conf file and then i will attach the link to the github dotfiles page.\nLearning the Basics Getting started. This is a hand-on guide will get you up and running with tmux pretty quickly. It will only cover the basic feature which should be more than enough to get started and be productive with tmux. simply open your terminal and follow the instructions.\ntmux , by default doesn\u0026rsquo;t have the most friendly commands. Many of the most important and useful features are assigned to hard to reach keystrokes or consist of long, verbose command strings.\nIntroducing the .tmux.conf file. By default , tmux looks for configuration settings in two places. It first looks in /etc/tmux.conf for system-wide configuration. It then looks for a file called .tmux.conf in the current user\u0026rsquo;s home directory.if thes files don\u0026rsquo;t exist , tmux simply uses its default settings.\nExecute the following command in your shell:\ntouch ~/.tmux.conf Note:=\u0026gt; .tmux.conf file is a hidden file and doesn\u0026rsquo;t show up in file explorers or directory listing by default. In this file we can do everthing from:\n Defining new key shortcuts Setting up a default environment with multiple windows, panes and running programs.  Installation Fortunately!, installing tmux is pretty straightforward on most distribution. If you use a Unix/Linux based system, you can find it via your usual packaeg manager.\n Arch Linux : sudo pacman -S tmux Ubuntu / Debian: sudo apt-get install tmux Fedora / CentOs: sudo dnf install tmux Mac OS: brew install tmux.   Starting Your First Session. For your first session simply start tmux with a new session.\ntmux The command Prefix. Since our command-line programs run inside tmux, we need a way to tell tmux that the command we\u0026rsquo;re typing is for tmux and not for the underlying application. The Ctrl-b is combination for that. This combination is called command prefix.\nFor my current setup it was hard to type CtrL-b so i remap the prefix to Ctrl-space using the command below.\nset -g prefix C-n You will need to press the prefix first each time you want to do something with tmux. Since the prefix involves the Ctrl key we need to ensure this key is easily accessible.\n Remapping the caps lock key. On many keyboards, the Caps lock key sits right next to the a key on the home row of the keyboard. By remapping this key to Ctrl, you can make triggering commands more comforbable.\n Checkout my CapsLock remaps here  Tmux Visual appearance This will create a new tmux session with a nice all-green status bar at the bottom. tmux provides quite a few ways to customize your environment\u0026rsquo;s appearance. In this section, we\u0026rsquo;ll walk throught configuraing some to these options , as we customize the status line and other componets.\nConfiguring color To get the best visual experience out of tmux , make sure that both your terminal and tmux are configured for 256 colors. You can perform a quick check using the tput command.\n$ tput colors 256 if you don\u0026rsquo;t see 256 as a result, you\u0026rsquo;ll need to do a little configuration. You may need to configure your terminal to use xterm\u0026rsquo;s 256 mode.\nEnsure that your terminal emulator supports displaying UTF-8 characters so that visual elements such as the pane divider appear as dashed lines.\nTo make tmux display things in 256 colors, add this line to our .tmux.conf file:\n# Set the default terminal mode to 256color mode set -g default-terminal \u0026#34;screen-256color\u0026#34; Once the right color mode is set, you\u0026rsquo;ll find it much easier to use programs such as Vim, Emacs, and other full-color programs from with tmux, especially when you are using more complex color schemes for syntax highlighting.\nChanging Colors You can change the colors of several parts of the tmux interface, including the status line, window list, message area, and even the pane borders.\ntmux provides variables you can use to specify colors.\nChanging the status Line Colors and content The default status line has black text on a bright green background. It\u0026rsquo;s pretty bland, and depending on your terminal configuration, it can be hard to read.\nThis configuration will give you a status line just like mine below.\nset-option -g status-justify right set-option -g status-bg black # colour213 # pink set-option -g status-left \u0026#39;#[fg=magenta]» #[fg=blue,bold]#T#[default]\u0026#39; set-option -g status-right \u0026#39;#[fg=red,bold][[#(git branch) ]] #[fg=cyan]»» #[fg=blue,bold]###S #[fg=magenta]%R %m-%d#(acpi | cut -d \u0026#39;,\u0026#39; -f 2)#[default]\u0026#39; My current status bar looks like the following.\nKeeping Status Line Info Up to Date We can specify exactly how quickly tmux refreshes its status line with . By default tmux refresh interval in every 15 seconds.\n# update the status line every sixty seconds set -g status-interval 6 Managing tmux sessions. Here are the most useful tmux commands to manage your sessions.\n tmux list-sessions - List tmux sessions. tmux new-session -s hello - Create a new sessions named \u0026ldquo;hello\u0026rdquo; tmux kill-session -t hello - Kill the session named \u0026ldquo;hello\u0026rdquo; tmux kill-server - Kill the tmux server and, as a result, every session.   If you use a tool to automate the creation of your sessions like tmuxp, you will barely need to use these commands. More on that later!.\nReloading tmux config Files Each time you change your config file, you need to reload it in tmux to apply the changes.\nLet\u0026rsquo;s set a keystroke to reload the config files easily:\n# Reload the file with Prefix r bind r source-file ~/.config/tmux/tmux.conf\t\\; display \u0026#34;Conf Reloaded!\u0026#34; Here , we have two commands combined into one, on the second line:\n We bind the key r to reload the config file. We display a message when we hit prefix -\u0026gt; r.  Let\u0026rsquo;s stop tmux by typing exit. Then, run tmux again and, if you hit prefix key -\u0026gt; r you\u0026rsquo;ll normally see the message Reloaded ~/.tmux.conf displayed at the bottom of your tmux session.\nFrom now on, each time you want to see the effect of your configuration changes, you need to reload the config file.\nMouse Mode. What? A mouse in a mouseless environment?\nWell, using the mouse is sometimes practical, escpecially since you might use it in other software, like your browser.\nEnabling the mouse allows you to use it for:\n Selection Panes. Selection windows (via the status line) Resizing panes. Scrolling windows. Copying text   Let\u0026rsquo;s add it in the configuration:\nset -g mouse on You can do everything with your keyboard too, and I encourage you to do so.\nSplitting Panes One of the most common operation you\u0026rsquo;ll do in tmux is splitting a window into multiples panes. Lets add some useful keystrokes in our config:\n# Splitting windows bind v split-window -h -c \u0026#34;#{pane_current_path}\u0026#34; bind h split-window -v -c \u0026#34;#{pane_current_path}\u0026#34; You might think that something is reversed her, between my keystroke v (for vertical) and tmux flag -h (for horizontal).\nThe flag -c execute a shell command, and #{pane_current_path} simply bring you back where you were in the filesystem.\nNavigating Panes To navigate from panes to pane, you can use prefix -\u0026gt; arrow key by default. However, this action is so common i like to use the following.\nbind -n C-h select-pane -L bind -n C-j select-pane -D bind -n C-k select-pane -U bind -n C-l select-pane -R The flag -n means that thes bindings don\u0026rsquo;t use the prefix key.\nWhy using ctrl+hnei? it\u0026rsquo;s alwayse better to keep your fingers on the home row keys. Using the arrow keys force you to move your hands. If you stop doing it, you\u0026rsquo;ll understand how comfortable it is.\nMore History! MORE! One of the functionality I love in tmux is being able to have thousands of lines from the terminal outputs. You need to add the following to your config file:\nWindows. We know how to split the current pane, but we don\u0026rsquo;t know yet how to create new windows and how to navigate between them.\nLet\u0026rsquo;s add some more keystrokes to our config file:\nunbind n #DEFAULT KEY: Move to next window unbind w #DEFAULT KEY: change current window interactively bind n command-prompt \u0026#34;rename-window \u0026#39;%%\u0026#39;\u0026#34; bind w new-window -c \u0026#34;#{pane_current_path}\u0026#34; bind-key , command-prompt -p \u0026#39;Rename Window:\u0026#39; \u0026#39;rename-window \u0026#34;%%\u0026#34;\u0026#39; The keystroke prefix key -\u0026gt; w will create a new window, and prefix key -\u0026gt; n will allow you to rename the current window.\nYou can see some tabs in the status line, at the bottom left of your tmux session. Each tab represents one window.\nWhen you have more than one window, you can then select them with prefix key -\u0026gt; . is the window number you want to display.\nYou can see that a little star in the windows tab indicate what window is currently displayed in your terminal. If you think that it\u0026rsquo;s not really readable, no worries: we will improve the status bar later.\nTo stay consitent, let\u0026rsquo;s do the same with the panes by adding n the config:\nset -g base-index 1 set-window-option -g pane-base-index 1 You might thike it\u0026rsquo;s annoyong do do prefix key -\u0026gt;  since you\u0026rsquo;ll navigate between windows often. I like to use alt+k to go to the next window, and alt+j to go to the previous one, without using the prefix key:\nCopy Mode Let\u0026rsquo;s speak briefly about tmux modes. There are two of them:\n The default mode The copy mode   We actually use the default mode of tmux. You can think of it as the equivalent of the Insert mode in Vim. It allows you to type whatever you want in the different panes.\nWhen you are in copy mode, you have the possibility to navigate in your terminal, using Emacs or VI key bindings. Since I\u0026rsquo;m in love with Vi/Vim, let\u0026rsquo;s add in the config.\nset -g mode-keys vi Now, let try the copy Mode! Hit prefix key -\u0026gt; space. You can come back to the default mode by hitting q.\nYou can see that you\u0026rsquo;re in copy mode thanks to the two number on the top right corner of your panes. They represent the total number of lne which are below the visible output (on the left) and the one which are above (on the right).\nFrom there, you can use the vanilla vim keystrokes to navigate your current terminal output. Again, I wrote about the basic Vim keystrokes in this article.\nYou can use, for example:\n ctrl-u - Scroll up. ctrl-d - Scroll down. / - search   Exactly like in Vim !.\nUnsuprisingly , you will use copy mode mainly to copy content. I you tried to copy terminal outputs already from tmux with your mouse, you might be confused: it doesn\u0026rsquo;t reall work.\nIndeed, tmux by default doesn\u0026rsquo;t copy anything in your sytem clipboard, but it one of its paste buffer. However, for convinience, I prefer using the sytem clipboard each time I copy something.\nLet\u0026rsquo;s configur that now:\n# KEY BINDINGS -VI COPY MODE # More vim-like unbind -T copy-mode-vi Enter; #Default for copy-selection bind -T copy-mode-vi Space send-keys -X begin-selection bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel \u0026#34;xsel --clipboard\u0026#34; # colemak keys To stay consistent with Vim\u0026rsquo;s default keybindings, we did the following.\n Changing the keystroke to select text from space to v. Changing the keystroke to copy text from enter to y.  Then, we pipe the action to xsel, to copy the selection to the system clipboard. If you don\u0026rsquo;t have xsel installed or if you prefer using xclip, you can replace the last line in your configuration with this one:\nbind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel \u0026#34;xclip -i -f -selection primary | xclip -i -selection clipboard\u0026#34;` xsel or xclip will work well on Linux systems. Be awaer as well that you can paste what\u0026rsquo;s n the tmux paste-buffer by using prefix key -\u0026gt; p if you don\u0026rsquo;t want to use the system clipboard.\nNow copy pasting in tmux will normally work like a charm. You can as well copy using the mouse: selcet what you want and enter y without releasing the mouse button. If you release it, the selection will disappear before you had the chance to copy it.\nIntegrate Your tmux with Vim. There are some more configuration you need in order for tmux to work seemingly with vim . If you don\u0026rsquo;t use vim, you can pass this section.\nFirst, if you use Neovim in tmux. you might experience a cursor proble: It doesn\u0026rsquo;t change from rectangle to pipe when you go from Normal Mode to Insert Mode.\nAdding this line in your configuration might help:\nset -g -a terminal-overrides \u0026#39;,*:Ss=\\E[%p1%d q:Se=\\E[2 q\u0026#39; Another improvement you might want: navigating between tmux panes and vim window using the same keystrokes, ctrl+hnei.\nThis config will do exactly that:\nThat\u0026rsquo;s all!\nNow you have a personalized tmux configuration you can modify to fit your precise needs. There are alot of tmux configuration available out there, if you need some inspiration.\nYou might think that it will take you forever to remember these keystrokes, but I believe they are overall pretty logical. Moreover, if you have written your own cheatsheet, I bet you know most of them already.\nEnhancing tmux with plugings Event if we have now a very powerful tool, we can improve tmux evem more by addng some useful plugins.\ntmux plugin manager To manage our tmux plugins, we need the tmux plugin manager\nTo install it, follow these steps:\n Clone the project into your home directory: git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm Add this line in the configuration: set -g @plugin \u0026lsquo;tmux-plugins/tpm\u0026rsquo; Add this at the end of tmux’s configuration: run -b \u0026lsquo;~/.tmux/plugins/tpm/tpm   You can add any plugins you want in your config and install them with *prefix -\u0026gt; I, after reloading the config.\nA Better search with copycat. As we saw, tmux copy mode allow you to search in the output of the current pane. Howeevr, if you want advanced search capabilities , you can try tmux copycat.\nWhat are the cool benefilts , you might ask?\n You don\u0026rsquo;t neet to be in copy mode to search something. You can search using regex or plain strings. You have access to keystrokes to select filepathis, git status output, urls, and IP addresses to copy them easily. Your search is automatically selected. YOu can copy it using yank (the y key we configured earlier) directly.   Like in Vim, you an use n and N to jump to the next or previous result, repectively.\nFuzzy Search with fzf And Extrakto. You\u0026rsquo;ll need fzf to use this plugn. If you don\u0026rsquo;t haev it already, I advice you to install it: it\u0026rsquo;s a powerful tool which will enhance your terminal experiencee even more!.\nIn order to install extrackto, add the following to your config file:\nset -g @plugin \u0026#39;laktak/extrakto\u0026#39; Then, reload it and hit prefix key -\u0026gt; I to install the new plugin.\nAutomating the creating of tmux sessions. The power of tmux doen\u0026rsquo;t stop here. There are many tools out there which allow you to automate tmux sessions creation via YAML (or JSON) config files.\nYou can automate everything, from the number of windows and panes you want to , to the command lines to execute in which pane.\nThe two most know tools to create sessions from config files are tmuxinator and tmuxp.\nTo see all my tmux configuration. Checkout my github tmux configuration. This is always up to date.\nI want to work with Tmux in all my sessions I use zsh as my default shell. Adding the following in the .zshrc to start tmux at terminal startup.\nif which tmux 2\u0026gt;\u0026amp;1 \u0026gt;/dev/null; then if [ $TERM != \u0026#34;screen-256color\u0026#34; ] \u0026amp;\u0026amp; [ $TERM != \u0026#34;screen\u0026#34; ]; then tmux attach -t hack || tmux new -s hack; exit fi fi Always work in a tmux session if tmux is installed\n","description":"Tmux is a terminal multiplexer, which means it will allow you to easily swith betwween several programs in one terminal, and it especially handy when dealing with complex project that require multiple terminal","id":15,"section":"workshops","tags":["cli"],"title":"Tmux Workshop","uri":"https://eduuh.github.io/blog/workshops/tmux/tmux/"},{"content":"Ranger Ranger is a console / terminal visual file manager written in Python and with VI key bindings. Ranger is a file manager with a different graphical interface.\nRanger use the Miller colums visual modes support up to nine tabs and most of the key bindings are the same off vi/ vim text editor.\nObjective. Install and configure the Ranger file manager.\n Installation.  To install ranger is pretty simple using your package manager. Since am using arch linux , my package manager is pacman and yay for Aur packages.\npacman -S ranger Distributions. Ranger is available in the repositories of most major distribution. And when am talking about distribution i mean distros such as ubuntu, manjaro, arch ,debian and others. You can use google to confirm how to get ranger working in your installation.\nDifficulty Easy. Trust me it is pretty simple to get started using ranger. When You Use it you are not going back. This statement is only true if you use vim before and you know how to touch type.\nConventions  # - requires given linux commands to be executed with root privileges either directly as a root user or by use of sudo command. $ - requires give linux commands to be executed as a regular non-previleged user.  Introduction. If you enjoy working in the command line like me, but you want some more simple file mangement and operation tool other than the common commands, it might be time to move to a command line-based file manager, like ranger.\nRanger enables some powerful features for managing your files while preserving the light weight control that the command line provides. It that\u0026rsquo;s not enough, Ranger\u0026rsquo;s controls and commands are all based around vim bindings.\nInstalling Ranger. Ranger is available in just about every distribution\u0026rsquo;s main repositories. Use you package manager to install it. The package name is almost always ranger.\nNavigationg with Ranger. Ranger\u0026rsquo;s layout is based on colums . Moving left through the colums moves you up through the directory tree, ending at the filesystem. Moving right, moves you down through the directories.\nIn each columns(directory) you see a listing of the files and directories inside it. When you finally arrive at a file, Ranger will open it based on how it\u0026rsquo;s configured to respond to that extension in.\n~/.config/ranger/rifle.conf Ranger use vi key bindings.If you dont know what thi is please first checkout This topic.\nBasic Commands. Ranger has build in command for handling file operations. Once again, these commands are largely based on vim, so if you\u0026rsquo;re familiar with vim, you\u0026rsquo;ll have no problem adopting this tool.\nTo copy a file , press yy. Then , to paste it, press pp.\nCopying / Deleting Multiple files. Using spacebar to Select Multiple Files. You can select multiple files with the space bar before pressing yy or dd to copy or move multiple files at once.\nNote after selecting the files you can then follow the action you want to do which could be.\n Copy/yank files \u0026ndash;yy Delete files \u0026ndash;dd Rename files \u0026ndash;aa   Moving multiple files across different directories. If you want to move multiple files across different directories, you can use ya and da to add each grouping to a list of files being relocated. After you have everything you want to move , use pp to paste/move them all.\nExiting ranger. Exiting Ranger is easier than exiting vim.\nPress q to quit.\nCommand Interface There\u0026rsquo;s also a couple of useful commands that require you type into the command interface. Like vim, Ranger has a command interface that activates when you press :.\nOnce command that you defintely want is a search.\nRanger\u0026rsquo;s is straightforward.\n:rename newname.txt Do you want to rename a bunch of files at once? Ranger has an excellent tool for that too. Select the files that you want to rename with the space bar. When you're done, enter the command to open up your editor with the list of file names. Edit them and save. Ranger will do the rest.\n:bulkrename File associations When you open up a file with Ranger, it will search its configuration for the right application and open the file. You can edit that configuration to tell Ranger which programs you prefer to associate with each file type.\nBefore you go about modifying configurations, you need to copy them just incase you mess things up and you want to revert back to the default. Ranger has an easy command for that too. Ranger has an easy command for that too.\n$ ranger \u0026ndash;copy-config=all\nRanger will create local copies of its configuration files at ~/.config/ranger. It\u0026rsquo;ll make several files, but for now, you only need one, rifle.conf.\nOpen up that file in your editor. The default settings are pretty good. They have a logic behing them. Each grouping is divided up by file type. Those groups contain a series of line that tell ranger which programs to look.\nMy Remaps Just to remind you that i type using colemak keyboard layout, The default configuration for ranger is optimized for qwerty layout. For the case on my nvim usage i made some custom remapping from h,j,k,l to h,n,e,i. I want all my environment to be consistent to this custom keybindings. Check how i achieve this.\n To checkout all my ranger rc.conf file. Checkout my dotfile repository.\nThanks for reading. Next write on ranger i will explain my rc.conf configuration line by line and the riffle.conf file too.\n","description":"Ranger is a console / terminal visual file manager written in Python and with VI key bindings. Ranger is a file manager with a different graphical interface.","id":16,"section":"posts","tags":["cli"],"title":"Ranger - Visual file manager","uri":"https://eduuh.github.io/blog/posts/ranger/"},{"content":"Basic Scripting Now that we\u0026rsquo;ve covered the basics of linux system and the command line.IF not check it out.\nIt\u0026rsquo;s time to start coding.\nUsing Multiple commands. The key to shell scripts is the ability to enter multiple commands and process the results from each command even possibly passing the result of one command to another.\nIf you want to run two commands together,you can enter them on the same prompt line, separated with a semicolon.\n$ date ; who\nTue 26 May 2020 12:49:21 AM UTC\nedd tty1 2020-05-25 11:45\nedd pts/4 2020-05-26 00:49 (tmux(103818).%0) This is a simple script uses just two bash shell commands.\nThe date command runs first, displaying the current date and time, followed by the output of the who command showing who is currently logged on to the system.\nUsing this techniques is fine for small scripts, but it has a major drawback. You must enter the entire command at the command prompt every time you want to run it.\nTo solve this is that you can combine the command into a simple text file, and when you need the commands you simply run the text file.\nCreating a Script File. To place shell commands in a text file, first you need to use a text editor to create a file and then enter the commands into the file.\nYou must specify the shell you are using in the fist line of the file.\nCreating a Script File. To place shell commands in a text file, first you need to use a text editor to create a file and then enter the commands into the file.\nWhen creating a shell script file, you must sepcify the shell you are using in the first line of the file. Here\u0026rsquo;s the format for this:\n#!/bin/bash\nThe pound sign (#) is used as a comment line. A comment line in a shell script isn\u0026rsquo;t processed by the shell. The first line of shell script is a special case, and the pound sign followed by the exclamation point tells the shell what shell to run the script under.\n(yes , you can be using a bash shell and run your script using another shell.)\nCommands are entered onto each line of the file followed by a carriage return.\n Create a file and input the following. i.e  #!/bin/bash #This script displays the date and who\u0026#39;s logged on date who To execute a command you need to first change the permission of the file and use the relative path or absolute path or you could add the script to path variable.  If you recall the shell uses an environment variable called $PATH to find commands. A quick look at the PATH environment variable.\nYou can use the semicolon and put both commands on the same line if you want to, but in a shell script, you list commands on separate lines. The shell processes commands in the order in which they appear in the file.\nThe PATH environment variable is set to look for commands only in a handful of directories. To get shell to find bash.sh script, we need do do two things:\n Add the directory where our shell script file is located to the path environment varible. Use an absolute or relative file path to reference our shell script file in the prompt.  For thi example, we use the second method to tell the shell exactly where the script file is located.\nThe next problem you will encounder is permission problem. The shell indicates that you don\u0026rsquo;t have the permissions to execute the file\nWhen the new bash.sh file was created, the umask value determined the default permission for the new file. Because the umask variable is set to 002.\nThe next step is t give the file owner permissions to execute the files , using the chmod command.\n$ chmod u+x bash.sh\n$ ./bash.sh\nThu 28 May 2020 07:35:07 PM UTC\nedd tty1 2020-05-28 16:08\nedd pts/2 2020-05-28 18:34 (tmux(30083).%1) Success! Now all the piece are in the right place to execute the new shell script file.\nDisplaying Messages. Most shell commands produce their own output, which is displayed on the console monitor where the script is running.\necho Command Other time you will want to add your own text messages to help the script user know what is happening withing the script. You can do this withe echo command. The echo command can display a simple text string if you add the string following the command.\n$ echo This is a test\nThis is a test Notice that by default you don\u0026rsquo;t need to quotes to delineate the string you\u0026rsquo;re displaying.\n$ echo Let\u0026rsquo;s see if this\u0026rsquo;ll work.\nLet\u0026rsquo;s see if this\u0026rsquo;ll work. The echo command uses either double or single quotes to delineate text strings. If you use them within your string, you need to use one type of quote within the text and the other type to delineate the string.\n$ echo \u0026ldquo;This is a test to see if you\u0026rsquo;re paying attension\u0026rdquo;\nThis is a test to see if you\u0026rsquo;re paying attension\n$ echo \u0026lsquo;Rich says \u0026ldquo;scripting is easy\u0026rdquo;\u0026rsquo;\nRich says \u0026ldquo;scripting is easy\u0026rdquo; You can add echo statements anywhere in your shell scripts where you need to display additional information.\n$ cat cd/mycodes/bash/bash.sh #!/bin/bash # This scipt distplays the date and who\u0026#39;s logged on echo \u0026#34;The time and date are:\u0026#34; date echo \u0026#34;Let\u0026#39;s see who\u0026#39;s logged into the system:\u0026#34; who $ cat cd/mycodes/bash/bash.sh $ cat cd/mycodes/bash/bash.sh when you run the script, it produces the following output:\n$ ./bash.sh The time and date are: Thu 28 May 2020 07:52:32 PM UTC Let\u0026#39;s see who\u0026#39;s logged into the system: edd tty1 2020-05-28 16:08 edd pts/2 2020-05-28 18:34 (tmux(30083).%1) edd pts/3 2020-05-28 17:32 (tmux(30083).%0) edd pts/8 2020-05-28 19:25 (tmux(30083).%3) If you want to echo a text string on the same line as a command output? You can use the -n parameter for the echo statement to do that.\nThe time and date are:Thu 28 May 2020 07:57:12 PM UTC Perfect! The echo command is a crucial piece of shell scripts that interact with users. You\u0026rsquo;ll find yourself using it in many situations, especially when you want to display the values of script variables.\nUsing variables. Just running individual commands from the shell script is useful, but this has its limitations. Often you\u0026rsquo;ll want to incorporate other data in your shell commands to process informations.\nYou can do this by using variables. Variables allows to temporarily store information within the shell script for use with other commands in the script.\nEnvironment variables. You can access these values from your shell scripts as well. The shell maintains environment variables that track specific system information, such as the name of the system, the name of the user logged in to the system.\nYou can use set command to view a complete list of active environment variables.\n$ set\n[\u0026hellip;]\nxauthority=/home/edd/.xauthority\nXDG_CACHE_HOME=/home/edd/.cache\nXDG_CONFIG_HOME=/home/edd/.config\nXDG_DATA_HOME=/home/edd/.local/share\nXDG_RUNTIME_DIR=/run/user/1000\nXDG_SEAT=seat0\n[\u0026hellip;] You can tap into these environment variable form within your scripts by using the environment variable\u0026rsquo;s name preceded by a dollar sign.\n$ cat test.sh\n#!/bin/bash\ndisplay user information from the sytem echo \u0026ldquo;User infor for userid: $USER\u0026rdquo;\necho UID: $UID\n$./test.sh\nUser infor for userid: edd\nUID: 1000\nHOME: /home/edd\n Notice that the environment variables in the echo command are replaced by their current values when the script runs. Also notice that we were able to place the $USER system variable within the double quotation marks in the first string, and the shell script still figured out what we meant.\n$ echo \u0026ldquo;The cost of the item is $15\u0026rdquo;\nThe cost of the item is This is not what was intended. Whenever the script see a dollar sign within quotes, it assumes you\u0026rsquo;re referencing a variable. To display an actual dollar sigh, you must precede it with a backslash character.\n$ echo \u0026ldquo;The cost of the item is $15\u0026rdquo;\nThe cost of the item is $15 That\u0026rsquo;s better. The backslash allowed the shell script to intepret the dollar sigh as an actual dollar sign and not a variable.\nUser variables. A shell script allows you to set and use your own variable within the script. Setting variable allows you to temporarily store data and use it throughout the script making the shell script more like a real computer program.\nUser variables can be any text string of up to 20 letters, digits or an underscore character. User variables are case sensitive. The little rule often gets novice script programmers in trouble.\nValues are assigned to user variables using an equal sign. No space can appear between the variable, the equal sign, and the value (another trouble spot for novices). Herea are a few example of assigning values to user variables.\nvar1=10\nvar2=-31\nvar3=testing\nvar4=\u0026quot;still more testing\u0026rdquo; The shell script automaticall determines the data types used for the variables values. Variables defined within the shell script maintain their values throughout the life to the shell script but are deleted when the shell script completes.\nJust like system variables , user varibles can be referenced using the dollar sign.\n$ cat bash.sh #!/bin/bash # testing variables days=10 guest=\u0026#34;katie\u0026#34; echo \u0026#34;$guestchecked in $daysdays ago\u0026#34; days=4 guest=\u0026#34;Edwin\u0026#34; echo \u0026#34;$guestchecked in $daysdays ago\u0026#34; $ ./bash.sh\nkatie checked in 10 days ago\nEdwin checked in 4 days ago Each time the variable is referenced , it produces the value currently assigned to it.\nIt\u0026rsquo;s important to rember that when referencing a variable value you use the dollar sign.\n$ cd/mycodes/bash/bash.sh The resulting value is 10 $ cat !! cat cd/mycodes/bash/bash.sh #!/bin/bash # assigning a variable value to another variable. value1=10 value2=$value1 echo The resulting value is $value2 If you forget the dollar sign and make the value2 assignment line look like this\nvalue2=value1\nyou get the following output:\n$ ./bash.sh\nThe resulting value is value1 Without the dollar sign, the shell interprets the variable name as a normal text string which is mostly likely not what you wanted.\nCommand Substitution One of the most useful feature of shell scripts is the ability to extract information from the output of a command and assign it to a variable.\nThis comes in handy when processing data in your scripts.\nThere are two ways to assign the output of a command to a variable:\n The backtick character ( The $() format.  Back tick character is not the normal single quotation mark character you are used to using for strings. Because it is not used very often outside of shell scripts.\nCommand substitution allows you to assign the output of a shell command to a variable . It is a major building block in script programming.\nExamples.\n Using the Back tick  today =date\nUsing the $() format.  today=$(date)\n$ ./bash.sh\nThe date and time are Thu 28 May 2020 09:10:45 PM UTC\n$ cat !!\ncat ./bash.sh\n#!/bin/bash\ntesting=$(date)\necho \u0026ldquo;the date and time are \u0026quot; $testing Here\u0026rsquo;s a popular example of how command substitution is used to capture the current date and use it to create a unique filename in a script.\n#!/bin/bash # copy the /usr/bin directory listing to a log file today=$(date +%y%m%d) ls /usr/bin -al \u0026gt;log.$today $ cd/mycodes/bash/bash.sh The date and time are Thu 28 May 2020 09:10:45 PM UTC $ cat !! cat cd/mycodes/bash/bash.sh #!/bin/bash testing=$(date) echo \u0026#34;The date and time are \u0026#34; $testing $ cfb $ cd/mycodes/bash/bash.sh $ ls | grep log* log.200528 The today variable is assigned the output of a formatted date command. This command technique used to extract date information for log filenames.\nThe output of command date +%y%m%d\n200528\nRedirecting Input and Outputs. Sometimes, you want to save the output from a command instead of just having it displayed on the monitor. The bash shell provides a few different operator that allow you to redirect the output of a command to an alternative location (such as a file). Redirection can be used fo rinput as well as outups, redirecting a file to a command for input.\nOutput redirection. The most basic type of redirection is sending output from a command to a file. The bash shell uses the greater-that symbol (\u0026gt;) for this.\ncommand \u0026gt; outputfile Anyting that would appear on the montor from the command istead is store in the output file specified.\nInstead of overwritting the file\u0026rsquo;s contents you may need to append outputs from a command to an existing file. If you\u0026rsquo;r creating a log file to document an action on the system. In this situation, you can use the double greater-than symbol (\u0026raquo;) to append data;\nInput Redirection Input redirection is the opposite of output redirection. Instead of taking the outups of a command and redirecting it to a file, input redirection takes the contend of a file and redirects it to a command.\nThe input redirection symbol is the less-than symbols (\u0026lt;):\ncommand \u0026lt; inputfile The easy way to remmber this is that the command is always listed first in the command line, and the redirectino symbols \u0026ldquo;points\u0026rdquo; to the way the data is flowing. The less-than symbol indicates that the data is flowing from the input to the command.\nHere\u0026rsquo;s an example of using input redirection with the wc command.\n$ wc \u0026lt; test1 1 7 32 The wc command provides a count of text in the data. By default , it produces three values.\n The number of lines in the text. The number of words in the text. The number of bytes in the text.  By redirecting a text file to the wc command, you can get a quick count of the lines, words and bytes in the file.\nAnother method if input redirection is called *inline input redirection. This method allow you to specify the data for input redirection on the command line instead of in a file. This may seam somewhat odd at first, but a few application are available for this process .\nThe inline input redireciton symbol is the double less-than symbol. Besides this symbols, you must specify a text marker that delineates the beginning and end of the data used for input.\n$ wc \u0026lt;\u0026lt; EOF heredoc\u0026gt; test string 1 heredoc\u0026gt; test string 2 heredoc\u0026gt; test stirng 3 heredoc\u0026gt; EOF 3 9 42 When using linux input redirection on the command line, the shell prompt for data using the secodary prompt, defined in the PS@ environment variable . Here\u0026rsquo;s how this looks when you use it.\nThe secondary prompt containues to prompt for more data until you enter the string value for the text marker.\nThe wc command performs the line, word, and byte counts of the data supplied by the inline input redirection.\nPipes Sometimes , you need to send the outputs of one command to the input of another command. This is possible using redirection, but somwhat clunky.\ncommand1 | command2\nDon\u0026rsquo;t think of piping as running two commands back to back. The linux system actually runs both command at the same time, linking them together internally in the system. At the first command produces outputs, it\u0026rsquo;s sent immediately to the second command.\n $ ls -la | sort  The piping feature operates in real time, as soon as the ls command output is generated, the sort commad gets busy sortig it. By the tim the ls command finished the sort command finishes data sort and start displaying it on the monitor.\nTher\u0026rsquo;s no limit to the number of pipers you can use in a command. You can continue piping the output of commands to other commands to refine your operation.\nTo get even fancier, you can use redirection along with piping to save your output to a file.\nPerforming Math. Another feature crucial to any programing language is the ability to manipulate numbers. Unfortunately, for shell scripting this process is a bit awkward.\nThe expr command. The bourne shell provides a special command that was used for processingi mathematical equations. The expr command allowed the processing of equation from the command line, but it is extremely clunky.\n$ expr 1 + 5\n6\n$ expr 5 * 3\nexpr: syntax error: unexpected argument ‘test1’ To solve this problem , you need to use the shell escape character (the backslash) to identify any character that my be misinterpreted by the shell before being passed to the expr command.\n$ expr 5 * 3\n15 Now that\u0026rsquo;s really starting to get ugly! Usng the expr command in a shell scripting is equally cumbersome:\nUsing Brackets. The bash shell includse the expr command to stay compatible withe the Bourne shell;how-ever, it also provides a much easier way to performng mathematical equations\nWhe assinging a mathematical value to a variable, you can enclode the mathematical equation using a dollar sign and square brackets ($ [operator]).\nnum1=100\nnum2=50\nnum3=45\nresult=$[$num1 * ($num2 - $num3)]\necho the final result is $result Notice that when using the square brackets method for calculation equatons, you don\u0026rsquo;t need to worry about the multiplicaition symbol, or any other character, being misinterpreted by thes shell\nThere\u0026rsquo;s ane major limitation to perfoming math in the bash shell script. Look at this exaple:\nA floating-Point solution The basics of bc. The bash calculator is actually a programming language that allows you to enter floaging-point expressions at a command lne and then interprets the expressions, calculates them and returns the result. The bash calculator recognizes these:\n Numbers (both interger and floating points) Variables (bothe simple variable and arrays) comment (lines startng with a pound sign or the C language pair) Expressions **Programing statement (sunch as if-the statements) Functions.**  You can access the bash calculator from the shell prompt using the bc command:\n$ bc\nbc 1.07.1\nCopyright 1991-1994, 1997, 1998, 2000, 2004, 2006, 2008, 2012-2017 Free Software Foundation, Inc.\nThis is free software with ABSOLUTELY NO WARRANTY.\nFor details type warranty.\n12*5.4\n64.8 The bash calculator return the answe. Each subsequent expression entered into the calculato is evaluate, and the result is displayed. To exit the bash calculato, you must enter quit.\nThe floating point arithmetic is controlled by a build-in varalble called scale. You must set this value to the desired number of decimal places you want in your answers, or you won\u0026rsquo;t get what you wer looking for.\n$ bc -q\n0\nscale = 4\n2.44 / 5\n.4880\nquit Using bc in scripts Now you may be wondering how the bash calculator is going to help you with floating point arithmetic in your shell script . Do you remember command substitution.\n#!/bin/bash\nvar1=$(echo \u0026ldquo;scale=4; 3.44 / 5 \u0026quot; | bc)\necho The answer is $var1\n$ ./bash\nThe answer is .6880 Using brackets. The bash shell includes the expr command to stay compatible with the boune shell; how-ever, it also providse a much easier way to performing mathematical equations. You can enclose the mathematical equation using a dollar sigh and square brackets ($ []).\n#!/bin/bash\nperforming maths var1=20\nvar2=30\necho The result is $[ $var1 * $var2]\n The major limitation of bash computation is that it only support interger calculations.\n#!/bin/bash\nperforming maths var1=100\nvar2=45\nvar3=$[$var1 / $var2]\necho The final result in $var3\n The above script with print 2.\nA floating-point solution. You can use several solution for overcoming the bash integer limatation. The most popular solution uses the built-in bash calculator, called bc.\nThe basics of bc. The bash calculator is actually a programming language that allows you to enter floating point expression at a command line and then interprets the expressions, calculates them and returns the result. the bash calcualtor recognizes these.\n Numbers (both integer and floating points) Variables (both simple variables and arrays.) Comments (lines starting with a pond sigh or the C language /**/ pair) Expressions. Programming statements (such as if-then statements.) Functions   You can acess the bash calcualato form the shell prompt using the bc command.\n","description":"Learning bash programing from basic to advanced concepts","id":17,"section":"workshops","tags":null,"title":"Bash Scripting","uri":"https://eduuh.github.io/blog/workshops/bash/bashsripting/"},{"content":"Installations.  Two step install.  We can use git to install fzf: git clone \u0026ndash;depth 1 https://github.com/junegunn/fzf.git ~/.fzf\n~/.fzf/install The above command will install fzf under ~/.fzf/bin. If you want to enable fzf inside Neovim, add the following setting to Neovim configuration (suppose your plugins manager is vim-plug ).\nPlug \u0026lsquo;~/.fzf\u0026rsquo; One step install We can install fzf and enable it inside Neovim in one step. Use the following configuration for Neovim:\nWe can install Fzf and enable it inside Neovim in one step. Use the following configurations for neovim:\nPlug \u0026lsquo;junegunn/fzf\u0026rsquo;, { \u0026lsquo;dir\u0026rsquo;: \u0026lsquo;~/.fzf\u0026rsquo;, \u0026lsquo;do\u0026rsquo;: \u0026lsquo;./install \u0026ndash;all\u0026rsquo; } You can change the directory where you want to install fzf.\nHow to use As Nvim plugin Inside Nvim, we can search and open files quickly using the command provided by fzf.\n:FZF \u0026quot; find file under current directory\n:FZF ~\u0026rdquo; find file under HOME directory For convenience, we can add shortcut mappings for the above commands.\nnnoremap \u0026lt;silent\u0026gt; \u0026lt;leader\u0026gt;f :FZF\u0026lt;cr\u0026gt;\nnnoremap \u0026lt;silent\u0026gt; \u0026lt;leader\u0026gt;F :FZF ~\u0026lt;cr\u0026gt; You can use ctrl + N and ctrl + P or the arrow key to navigate through the list of files found by fzf. To open the file in Neovim, Fzf provides several shortcut key.\nEnter key : open file in current window\nCtrl + T: open file in new tab page\nCtrl + X: open file in new horizontal window\nCtrl + V: open file in new vertical window To close the file search window, use Esc or Ctrl + c.\nUse fzf with other command. You can also use fzf in conjuction witho other command. Fox exmple, you can use fzf and nvim together. Fzf is used to find and the oepn the file in nvim;\nnvim $(fzf) The command is useful in using in bash prompt. To find files wth fzf and open them with nvim. Placed the line in my aliaserc file.\nalias fs=\u0026quot;nvim $(fzf)\u0026quot; Use fzf alone.(In the Command Line) Fzf provides several command-line shortcut after installation.\n Ctrl + T: paste the path of file or directory found on the cli. Ctrl + R: find history command and paste command on the cli. Alt + C: cd to specific directory   Note that ctrl + T n Alt + c will only find file or folder under current directory. If you can not find a file, please make sure that it exists under current directory.\nBy default, fzf use find to search files. You can use the variable FZF_DEFAULT_COMMAND to change the default search command. For example, f you have installed the silver searcher, AKA, ag you may want to use the following setting in your .bash_profile\nexport FZF_DEFAULT_COMMAND='ag \u0026ndash;hidden \u0026ndash;ignore .git -g \u0026ldquo;\u0026quot;' Autocompletion on command Line When you are using vim and cd you can activate file and directory fuzzy completion with ** as a trigger (press tab to trigger autocompletion.).\nvim \u0026lt;TAB\u0026gt;\ncd \u0026lt;TAB\u0026gt; The auto-completion function only supports a few commands. If you want to add your own command, say pylint, it is easy to set up. Following the guide here you need to add the below command to your .bash_profile.\nDo not forget to soure your .bash_profile. Then you can trigger auto-complet for pylint just like what you do with vim and cd.\nAutocompletion for environment variable. fzf can also auto-complete environment variable.\nexport \u0026lt;TAB\u0026gt;\nunalias \u0026lt;TAB\u0026gt;\nunset \u0026lt;TAB\u0026gt; Search hidden file by default. By default, fzf does not search hidden files. In order to search hidden files by default, use the following setting (suppose that you use ag):\nexport FZF_DEFAULT_COMMAND='ag \u0026ndash;hidden \u0026ndash;ignore .git -g \u0026ldquo;\u0026quot;'  ","description":" Fzf is an interactive fuzzy file search tool on the command-line. It is fast and powerful. In this post , I will introduce its installation and usage.","id":18,"section":"posts","tags":["nvim","cli"],"title":"FZF (Fuzzy Finder)","uri":"https://eduuh.github.io/blog/posts/fzfinstallationusage/"},{"content":"The Linux Command Line Before you can dive into working with the linux command line and shells, you should first understand what linux is, where it came from and how it works.\n What is Linux  If you\u0026rsquo;ve never worked with Linux before, you may be confused about so many different versions are available.\nFirst, Four main part makes up a linux system:\n The Linux kernel The Gnu Utilities A graphical desktop enviroment Application software.  Each of these parts has a specific job in the linux system. No part is very useful by itself.\nLooking into the Linux Kernel. The core of the Linux system is the kernel. The kernel:\n controls all the hardware and sofware on the computer system (allocating hardware when necessary and executing software when required.)  If you\u0026rsquo;ve been following the Linux world at all, no doubt you\u0026rsquo;ve heard the name Linus Torvalds. Linus is the person responsible for creating the first linux kernel softwae whe he was a student at university of Helsinki. He intended it to be a copy of the Unix system, at the time a popular operating system used at many universities.\nAfter developing the linux kernel, linus released it to the internet community and solicited suggestions for improving it. This simple pros started a revolution in the world of computer operating sytems.Soon Linux was receiving suggestions from students as well as professional programmers from around the world. Allowing anyone to change programming code in the kernel would result in complete chaos.\nTo simplify things, linus acted as a central point for all improvement suggestions. It was ultimately Linux\u0026rsquo;s decision whether or not to incorporate suggested code in the kernel.\nThis same concept is still in place with the linux kernel code, except that instead of just linux controlling the kernel code, a team of developers has taken on the task.\nThe kernel is primarily responsible for four main functions:\n System memory management Software Program management Hardware management Filesystem management  System Memory Management Not only does the kernel manages the physical memory available on the server, but it can also create and manage virtual memory (memory that does not actually exist).\nIt does this by using space on the hard disk, called the swap space. The kernel swaps the contents of virtual memory location back and forth from the swap space to the actual physical memory. This allows the system to think there is more memory available than what physically exists.\nThe memory locations are grouped into blocks called pages. The kernel locates each page of memory either in the physical memory or the swap space. The kernel then maintains memory page that indicates which pages are in physical memory and which pages are swapped out of disk.\nSoftware Program Management The linux operating system calls a running program a process. A process can run in the foreground, displaying output on a display, or it can run in the background.\nThe kernel creates the first process, called the init process, to start all other processes on the system. When the kernel starts, it loads the init process into virtual memory. As the kernel starts each additional process, it gives it a unique area in virtual memory to store the data and code that the process uses.\nSome linux implementations contain a table of processes to start automatically on bootup. On linux systems, this table is usually located in the special file /etc/inittabs.\nOther systems (such as the popular Ubuntu linux distribution) Utilze the */etc/init.d** folder, which contains scripts for starting and stopping individual application at boot time. The Scrips are started via entries under the **/etc/rx.d** folders where X is a run level.\nHardware Management Any device that the Linux system must communicate with needs driver code inserted inside the kernel code. The drive code allows the kernel to pass data back and forth to the device, acting as a midlle man between application and the hardware. Two methods are used for inserting device driver code in the Linux kernel.\n Driver compiled in the kernel. Driver modules added to the kernel.  The only way to insert device driver code was to recompile the kernel. Each time you added a new device to the system, you had to recompile the kernel code. This process became even more inefficient as Linux kernel supported more hardware. Fortunately Linux developers devised a better method to insert driver code into the running kernel.\nProgrammers developed the concept of kernel modules to allow you to insert driver code into a running kernel without having to recompile the kernel. A kernel module could be removed from the kernel when the device was finished being used.\nThe linux system identifies hardware devices as special files, called device files. There are three classification of device files:\n Character Block Network.  Filesystem management The linux kernel can support different types of filesystems to read and write data to and from hard drives. Besides having over a dozen filesystems to read and write data to and from hard drive. Besides having over a dozen filesystems on its own.\nThe GNU utilities The **Gnu Organization (GNU stands for GNU\u0026rsquo;s not Unix) developed a complete set of unix utilities but had no kernel system to run them on. These utilities were developed under a software pilosophy called **open source software (OSS).**\nThe core Gnu Utilities The Gnu coreutils package consists of three parts:\n Utilities for handling files Utilities for manipulating text Uitlities for managing process.  Basic bash shell commands. The default shell used in many Linux distribution is the GNU bash shell.\nStarting the Shell The GNU bash shell is a program that provides interactive access to the linux system. It runs as a regular program and is normally started whenever a user logs in to a terminal.\nThe etc/passwd file contains a list of all the system user accounts, along with some basic configuration information about each user. Here is an entry\nedd❌1000:1001:edd:/home/edd:/usr/bin/bash\nEach entry has seven data fields, with fields separated by colons. The system uses the data in these fields to assign specific features for the user.\nThe above line means.\nedd log in into linux system and bash program is automatically started.\nThere are two methods of login into a linux box.\n Virtual console terminal. requires a cli prompt Graphical login. requires a graphical emulator.  Using the Shell Prompt. When you log in to a linux virtula console. you get access to the shell cli prompt . The prompt is your gateway to the shell. The place you input commands.\nThe default prompt symbol is a dollar sign ($)\nDifferent distribution uses different format of prompt. Examples\n Ubuntu looks like - edwin@server:~$ CentOs Linux or Manjano - [edwin@server:~$]  The prompt is meant to provide useful information.\n edwin -\u0026gt; Current user Id server -\u0026gt; name of the system  Note that the promp is not static. It could be changed to suit your need.\nInteracting with the bash Manual The man command provides access to the manual pages stored on the linux system. Entering the command man followed by another command provids that utility\u0026rsquo;s manual entry. Try\n$ man xterm When you use the man command to view a command\u0026rsquo;s manual pages, they ared displayed with something called a pager.\nA pager is a utility that allows you to page through displayed text. Thus, you can page through the man pages by pressing the spacebar, or can go line by line using the enter key. you could olso use arrow keys\nWhen you finish with the man pages, press the q key to quit. when you quit you are taken back to the prompt.\nThere are also the information pages called info pages.\nNavigating the Filesystem When you log into the system and reach the command line prompt, you are in your home directory.\nlooking at the Linux Filesytem. If you\u0026rsquo;re new to the linux sytem,you may be confused by how it refences files and directories, especially if you\u0026rsquo;re used to the way microsoft windows system does.\nLinux stores files within a single directory structure calle a virtual directory. The virtual directory contains files paths from all the storage devices installed on the computer, merged into a single directory structure.\nThe linux virtual directory structure contains a single base directory, called the root.Directories and files beneath the root directory are listed based on the directory path used to get to them.\nIn linux you will see files paths similar to the following\n/home/edd/Documents/test.md\nNotice the path does not provide the drive the file is stored on.\nLinux virtual directory is how it incorporate each storage device. The first hard drive installed in a linux system is called the root drive. The root drive contains the virtual directory core. Everythings else builds from there.\nOn the root drive, Linux can use a special directory as mount points. Mount points are directories in the virtual directory where you can assign additional storage devices. linux cause files and directory to appear within these mount opind directories.\nCommon Linux Directory Names    Directory Usage     / root of the virtual directory , no file placed   /bin binary directory,where many GNU user-leve utilities   /boot boot directory, where boot files are stored   /dev device directory,where linux creates user directory   /etc system confiuguration files directory   /home home directory, where linux creates user directory   /lib Libray directory, where system and application libray files are stored   /media media directory, a common place for mount points for removable media   /mnt mount directory, another common place for mount points used for removable media   /opt optional directory, often used to store third-party software packages and data files   /proc process directory, where current hardware and process infromation is stored   /root root home directory   /sbin system binary directory, where many GNU admin-level utilitise   /run run directory, runtime data is held during system operation   /srv Serviced directory, local services store files   /sys System directory, where system hardware information files are stored   /var Variable directory, for files that change frequently, i.x log    Common linux directory are based on Filesystem Hierarchy Standard(FHS). You can move around the virtual directory using a graphical interface. To move around the virtual directory from a cli prompt.\nTraversing directory Use the directory command (cd) to move your shell session to another directory in the linux filesystem.\nThe cd command may take a single parameter, destination. The destination parameter can be expressed using twi different methods.\nUsing absolute directory references You can reference a directory name within the virtual directory system using an absolute directory reference. .\nAn absolute path reference always begins with a forwa slash (/) indicating the virtual directory system\u0026rsquo;s root.\n/usr/bin With the absolute directory reference there\u0026rsquo;s no doubt as to exactly where you want to go. To move to a specific location in the Filesystem usind the absolute directory reference, you just specify the full pathname in the cd command.\ncd /use/bin # move to the directory Prompt originalyy had a tilde (~) in it. After the change to a new directory occurred, the tilde was replaced by /usr/bin..\nIf your prompt has not been configured to show the shell session\u0026rsquo;s current absolute directory location, then you can display the location via a shell command. The pwd command display the shell session\u0026rsquo;s current directory location.\nedwin@server /usr/bin/$ pwd /usr/bin  You can move to any leve within the entire Linux virtual directory structure from any level usind the absolut refence:\nedwin@server: /usr/bin/$ cd /var/log  note: think of absolute as a full path.\nusing Relative directory references Relative directory reference allow you to specify a destination directory reference relative to your current location. A Relative directory reference doest start with a folowrd slash.\nRelative directory reference starts with either a directory name (if you\u0026rsquo;re traversing to a directory under your current directory) or a special character.\nedd@edd:~/Documents$ ls edd@edd:~/Documents$ cd ~/Desktop  You can use a relative directory reference with the cd command is any directory containg subdirectoroies. You can also use a special character to indcate a relative directory location.\nThe two special character used for *relative directory reference**.\n The single dot (.) to represent the current directory The double dot (..) to represent the parent directory  You can use the single dot but it doesn\u0026rsquo;t make sense to use it with the cd command. The double dot character is extremely handy when trying to traverse a directory and need to go to your Downloads directory.\n edwin@server: ~/Documents$ pwd /home/edd/Documents edwin@server: ~/Documents$ cd ../Downloads edwin@server: ~/Downloads cd ../Downloads   Use absolute path if it makes sense to use.  Listing Files and Diretory. To list the content of a directory we use the ls command.\nDisplaying a basic Listing The ls command at its most basic form displays the files and directory located in your current directory.\n$ ls aur Downloads package-lock.json README.md Videos bunnyflydotfiles_colemak input Pictures snap yay Desktop Music Public Templates Documents node_modules readme.md text.txt  If you don\u0026rsquo;t have a color terminal emulator, you can use the -F parameter with the ls command to the easily distinguish files from directory. Using the -F parameter produces the following ouput.\n$ ls -F aur/ Downloads/ package-lock.json README.md Videos/ bunnyflydotfiles_colemak/ input/ Pictures/ snap/ yay/ Desktop/ Music/ Public/ Templates/ Documents/ node_modules/ readme.md text.txt  The -F parameter flags the directoies with a forward slash (/) to help identify them in the listing.\nThe basic ls command can be somewhat misleading. It shows the files and directory contained in the current directory. Linux often uses hidden files to store configuration information.\nTo display hidden files along with normal files and directories, use the -a parameter. Here is an example of using the -a parameter with the ls command.\n$ ls -a . .dotfiles package-lock.json .viminfo .. .dotnet Pictures .vscode-oss aur Downloads .pki .Xauthority .bash_history .gitconfig .profile .Xclients  All the files beginning with a period, hidden files.Notice that three files begin with .bash\nThe -R parameter is another options the ls command can use. Called the recursive option, it shows files are contained within subdirectories.\n$ ls -F -R Desktop/ Music/ Public/ Templates/ Documents/ node_modules/ readme.md text.txt ./aur: st-luke-git/ ./aur/st-luke-git: PKGBUILD ./bunnyflydotfiles_colemak: dotfiles/ ./bunnyflydotfiles_colemak/dotfiles  Displaying a Long Listing ls command doesn\u0026rsquo;t produce much information about each files. For listing additional information, another parameter is -l.\n$ ls -l drwxr-xr-x 3 edd edd 4096 Apr 12 00:14 aur drwxr-xr-x 3 edd edd 4096 Apr 13 01:43 bunnyflydotfiles_colemak drwxr-xr-x 3 edd edd 4096 Apr 12 13:15 Desktop drwxr-xr-x 2 edd edd 4096 Apr 11 23:24 Documents  The long listing format lists each file and subdirectory on a single line. The listing shows additional useful information.\n The file type - Such as  directory (d), file (-), linked files (1), Charater device (c) Block device (b)   The file permissions. The number of file hard links. The file owner username. The file primary group name. The file byte size. The last time the file was modified. The filename or directory name.  Filtering listing output To look for information about a file is also possible by using the ls command.\n$ ls -l text.txt -rw-r--r-- 1 edd edd 1 Apr 13 09:45 text.txt  Here we used bracket with two choices of character [tx] t and x . brackets could be used to liss ranges of characters.\n $ ls -l tex[a-z].txt edd@edd:~$ ls -l tex[a-z].txt -rw-r--r-- 1 edd edd 1 Apr 13 09:45 text.txt -rw-r--r-- 1 edd edd 0 Apr 14 18:30 texz.txt  You could also specify what shoud not be included in the search result.\nedd@edd:~$ ls -l tex[!z].txt -rw-r--r-- 1 edd edd 1 Apr 13 09:45 text.txt  The second file texz.txt does not get listed in the result.\nHandling Files The shell provids many file manipulation command on the linux filesystem.\n 1. Creating Files  The touch command is used to create empty files in the system.\nedd@edd:~$ touch test_one edd@edd:~$ ls -l test_one -rw-r--r-- 1 edd edd 0 Apr 14 18:51 test_one  The touch command creates the new file you specify and assign your username as the owner.\nThe touch command can also be used to change the modification time. This is done without changing the content of the file.\nCopying files Copying files and directories from one location in the filesystem to another is a common practise for system administrators. The cp command provides this feature.\nIn its most basic form, the cp command uses two parametes. 1. The source object and the destination object.\n$ cp test_one test_two $ ls -l test_*  If you don\u0026rsquo;t answer y, the file copy does not proceed. You can also copy a file into a pre-existing directory.\n$ cp -i test_one /home/edd/Documents/ edd@edd:~$ ls -la /home/edd/Documents/ total 8 drwxr-xr-x 2 edd edd 4096 Apr 14 20:18 . drwx------ 27 edd edd 4096 Apr 14 20:15 .. -rw-r--r-- 1 edd edd 0 Apr 14 20:18 test_one  The new file is now under the Documents subdirectory, using the same filename as the original.\nYou could easily use relative path directory reference.\n $ cp -i test_one Documents/ $ ls -l Documents  You read about thes special symbols that can be use in relative directory refences. One of them:\n - The single dot (.) represents previous directory. - cp -i /etc/NetworkManager/NetworkManager.conf .  It\u0026rsquo;s hard to see that single dot!. Using the single dot symbols is much easier than typing a full destination object name, when you have long source object names.\nThe -R paramets is powerful cp command option. It allows you to recursively copy the contents of an entire directory in one command.\n $ ls -Fd *txt edd@edd:~$ ls -Fd *txt text.txt texz.txt  You can also used wildcard metacharacters in your cp commands.\n$ cp *scripts mod_scripts/ $ ls -l mod_scripts  This command copied any files that ended with script to mod_scripts.\nUsing tab auto-complete When working at the command line, you can easily mistype a command, directory name, or filename. The longer a directory or filename, the greater the chance that you will mistype it.\nThis is where tab auto-complete can be a lifesaver. Tab auto-complete allows you to start typing a filename or directory name and then press the tab key to have the shell complete it for you:\n$ ls really*  Linking files Linking files is a great option available in the linux filesystem. If you need to maintain two (or more) copies of the same file on the system. Instead of having separate physical placeholder in a directory that points to the real location.\n A symbolic link A hard Link.  A symbolic link is simply a physical file that points to another file somewhere in the virtual directory structure. The two symbolically linked together files do share the same contents.\nTo create a symbolic link to a file, the original file must pre-exist. We can the use the ln command with the -s option to create the symbolic link.\nedd@edd:~$ ln -s text.txt text_link edd@edd:~$ ls -la tex* lrwxrwxrwx 1 edd edd 8 Apr 14 20:49 text_link -\u0026gt; text.txt -rw-r--r-- 1 edd edd 0 Apr 14 18:30 texz.txt  The -\u0026gt; symbol displayed after the symbolic link file\u0026rsquo;s long listing shows that it is symbolically linked to the file data-files.\nAlso note the size of the symbolic link and the actual file.The symbolic link size is 8 bytes while the actual file is 18 bytes. The symbolic link file acts like a pointer to the other file on the virtual directory.\nedd@edd:~$ nvim text.txt edd@edd:~$ ls -la tex* lrwxrwxrwx 1 edd edd 8 Apr 14 20:49 text_link -\u0026gt; text.txt -rw-r--r-- 1 edd edd 18 Apr 14 20:53 text.txt -rw-r--r-- 1 edd edd 0 Apr 14 18:30 texz.txt  Another way to tell these linked files are separate physically files is by viewing their inod numbers. The inode numbers of a file directory is a unique identification number that the kernel assigns to each object in the filesystem.\nedd@edd:~$ ls -i *tex* 3685885 text_link 3686544 text.txt 3686536 texz.txt  The example above have 3685885 and 3686544. They are different files.\nA hard link create a separate virtual file that contains information about the original file and where to locate it. They are physically the same file. When you reference the hard link file.\n [edd@edd ~]$ls -l hard* -rw-r--r-- 1 edd edd 0 Apr 14 21:06 hard_one [edd@edd ~]$ln hard_one hard_link [edd@edd ~]$ls -li hard* 3685885 -rw-r--r-- 2 edd edd 0 Apr 14 21:06 hard_link 3685885 -rw-r--r-- 2 edd edd 0 Apr 14 21:06 hard_one  We used -li command to show both the inode number and long listing for the inode number. This is because they aer physically the same file. The files are exactly the same size.\n Note: you can only create a hard link between files on the same physical medium. To create a link between files under separate physical mediums, you must use a symbolic link.  If you use the cp command to copy a file that\u0026rsquo;s linked to another source file, all you\u0026rsquo;re doind is making another copy of the source file. You can just create a new symbolic link to the original file (no problem).\nRenaming files Renaming files is called moving files. The mv command is available to move both files and directories to another location or a new name:\n[edd@edd ~]$touch fall [edd@edd ~]$ls -li f?ll 3686536 -rw-r--r-- 1 edd edd 0 Apr 14 21:17 fall [edd@edd ~]$mv fall fzll [edd@edd ~]$ls -la f?ll -rw-r--r-- 1 edd edd 0 Apr 14 21:17 fzll  Notice that moving the file changed the name from fall to fzll.The inode number is retained and timestamp value. mv commad affect only a files name. You can also mv to change location.\n$ mv \u0026lt;file\u0026gt; \u0026lt;destination\u0026gt;  you can also used the mv command to move entire directories and their contents:\n[edd@edd ~]$ls -li bunnyfylcolemak total 4 3801890 drwxr-xr-x 5 edd edd 4096 Apr 13 09:48 dotfiles [edd@edd ~]$mv bunnyfylcolemak colemakdotfiles [edd@edd ~]$ls -li colemakdotfiles total 4 3801890 drwxr-xr-x 5 edd edd 4096 Apr 13 09:48 dotfiles  The directories entire content are unchange. The only thing that changes is the name of the directory.\nDeleting files Whether it\u0026rsquo;s to clean up a filesystem or to remove a software package, you always have opportunities to delete files.\nDeleting is called removiing. the command to remove files in the bash shell is rm. The basic form of the rm command is simple.\nNotice that the i command parameter prompts you to make sure that you\u0026rsquo;re serious about removing the file. Thes shell has no recycle bin or trashcan. After you remove a file , it\u0026rsquo;s gone forever.\nManaging Directory Linux hass a few commands that works for both files and directory (such as the cp command) and some that work only for directories. To create a new directory, you need to use a specific command.\nCreating directory Creating a new directory in Linux is easy -Just use the mkdir command:\n$ mkdir new_dir $ ls -ld new_dir  The system create a new directory named new_dir.\n[edd@edd ~]$mkdir new_dir [edd@edd ~]$ls -la new_dir drwxr-xr-x 2 edd edd 4096 Apr 14 23:16 new_dir  You can create directory and subdirectories in \u0026ldquo;bulk\u0026rdquo; if needed.\n $ mkdir new_dir/sub_dir/under_dir [edd@edd ~]$mkdir new_dir/sub_dir/under_dir mkdir: cannot create directory ‘new_dir/sub_dir/under_dir’: No such file or directory  To create several directory and subdirectories at the same time, you need to add the -p parameter.\n$ mkdir -p new_dir/sub_dir/under_dir $ ls -R new_dir  The -p option on the mkdir command makes any missing parent directories as needed. A parent directories is a directory that contains other directories at the next level down the directory tree.\nDeleting directories There are lots of opportunities for bad things to happens when you start deleting directories . The shell tries to protect us from accidental catastrophes as much as possible.\n$ touch new_dir/my_file $ ls -la new_dir $ rmdir new_dir  rmdir command works only for removing empty directories. To fix this, we must remove the file first. Then we can use the rmdir command on the now empty directory:\n$ rm -i new_dir/my_file $ rmdir new_dir  Check the directory structure using the tree command.\nedwin@edwin:~$ tree small_dri/ small_dri/ ├── a_file ├── b_file └── c_file 0 directories, 3 files edwin@edwin:~$ rm -rf small_dri/ edwin@edwin:~$ tree small_dri/ small_dri/ [error opening dir] 0 directories, 0 files  The rm -rf command gives no warnings and no fanfare which is extremely dangerous tool to have, especially if you have superuser privileges.\nViewing Files Content You can use several commands for looking inside files without having to pull out a text editor utility.\nViewing the file type. The file command is a handy little utility to have around. It can peek inside of a file and determine just what king of file it is.\n[edwin@edwin ~]$nvim edd.txt [edwin@edwin ~]$file edd.txt edd.txt: ASCII text  Binary executable programs. The file command determines the platform that the program was complile for and what type of library it requires.\nNow that you know a quick method for viewing a file\u0026rsquo;s type.\nUsing the cat command Used to view the whole files . The cat command is a handy tool for displaying all the data inside a text file.\n [edwin@edwin ~]$cat edd.txt This is test  Monitoring Disk Space Some command line commands can help you manage the media environment on your linux system. To be able to monitor your disk space you need to understand how to mounting media works.\nMost of the linux distribution out there have the ability to automatically mount specific types of removable media. A removable media device is a media that can be easily removed from the pc, such as CD-ROMs and USB memory sticks.\nThe mount command. The command used to mount media is called mount. The mount command displays a list of media devices currently mounted on the system.\n$ mount proc on /proc type proc (rw,nosuid,nodev,noexec,relatime) sys on /sys type sysfs (rw,nosuid,nodev,noexec,relatime) dev on /dev type devtmpfs (rw,nosuid,relatime,size=8017640k,nr_inodes=2004410,mode=755) run on /run type tmpfs (rw,nosuid,nodev,relatime,mode=755) /dev/sdb6 on / type ext4 (rw,noatime,discard)  The mount command provides four pieces of information.\n The device filename of the media. The mount point in the virtual directory where the media is mounted. The filesystem type. The access status of the mount media.  The last entry in the preceding example is a USB memory stick. To manually mount a media device in the virtual directory, you must be logged in as the root user or use the sudo command to run the command as the root user. The following is the basic command for manually mounting a media device.\nmount -t type device directory  The type parameter defines the filesystem type under which the disk was formatted. Linux recognizes lots of different filesystems types. If you share removable media withe your winows PCs, you are most likely to run into thes types:\n vfat : Windows long filesystem ntfs : Windows advanced filesystem used in Windows NT, XP, and Vista. iso9660 : The standard CD-ROM filesystem.  Mount USB memory stick at device /dev/sdb1 at location /media/disk you could use such a command.\n mount -t vfat /dev/sdb1 /media/disk  After a media device is mounted in the virtual directory, the rood user has full access to the device, but access by other users is restricted. You can control who has access to device using directory permissions.\nThe -o options allows you to mount the filesystem with a comma-separated list of additional options. These are popular option to use:\n ro: Mount as read-only rw: mounts as read-write User: Allow an ordinary user to mount the filesystem Check=none: Mount the filesystem without performing an integrity check. loop: Mounts a file.  The Unmount command. To remove a removable media device, you should never just remove it form the system Instead, you should alwayst unmount it first.\nThe command used to unmount devices is unmount (yes, there\u0026rsquo;s no \u0026ldquo;n\u0026rdquo; in the command, which get confusing sometimis). The format of the unmount command is pretty simple.\numount [directory | device ]  The unmount command gives you the choice of defining the media device by either its device location or its mounted directory name. If any Program has a file open on a device the system won\u0026rsquo;t lets you unmount it.\n[dwm@edwin ~]$ sudo umount test umount: /home/dwm/test: target is busy. [dwm@edwin ~]$  Using the df command. Sometimes, you need to see how much disk space is available on an individual device. The df command allows you to easily see what\u0026rsquo;s happening on all the mounted disks.\nFilesystem 1K-blocks Used Available Use% Mounted on dev 8017640 0 8017640 0% /dev run 8027328 1456 8025872 1% /run /dev/sdb6 123443708 16536504 100593580 15% / tmpfs 8027328 0 8027328 0% /dev/shm tmpfs 8027328 0 8027328 0% /sys/fs/cgroup tmpfs 8027328 4 800  The df command shows each mounted filesystem that contains data. As you can see from the mount command, some mounted devices are used for internal system purposes. The command displays the following.\n The device location of the device. How many 1024-byte blockes of data it can hold. How many 1024-byte blocks are available. The amount of used Space as percentage. The mount point where the device is mounted.  A few different command line parameter are available with the df command, most if which you\u0026rsquo;ll never use. One popular parameter is -h, which shows the disk space in human readable form, usually as an M for Megabytes or a G for gitabytes.\n[dwm@edwin ~]$ df -h Filesystem Size Used Avail Use% Mounted on dev 7.7G 0 7.7G 0% /dev run 7.7G 1.5M 7.7G 1% /run /dev/sdb6 118G 16G 96G 15% / tmpfs 7.7G 0 7.7G 0% /dev/shm tmpfs 7.7G 0 7.7G 0% /sys/fs/cgroup tmpfs 7.7G 4.0K 7.7G 1% /tmp tmpfs 1.6G 12K 1.6G 1% /rp  Using the du command With the df command you can easily see when a disk is running out of space. The next problem for the system administrators is to know what to do when that happens.\nthe du command shows the disk usage for a specific directory. this is a quick way to determine if you have any obvious disk hogs on the system. by default, the du command displays all the files directories and subdirectories under the current directories, and it shows how many disk blocks each files or directories takes.\n[dwm@edwin ~/mount/mycodes/blog]$ du 0 ./.git/branches 39 ./.git/hooks 1 ./.git/info 11 ./.git/logs/refs/heads 2 ./.git/logs/refs/remotes/origin | | V V no.of block path of directory The number to the left of each line is the number of disk blocks that each files or directory takes. The listing starts at the bottow of a directory and works its way up through all the files and subdirectories.\nYou can use a few command line parameters with the du command to make things a little more legible:\n-c: Produces a grand total of all the files listed. -h:Prints sizes in human readable form. -s: summarrizes each argument Working with Data Files Handling the information and making it useful can be difficult. Linux system provide several command line tools to help you manage large amount of data. This section covers the basic command that every system administrator as well as any everyday linux user.\nSorting data Thes sort commands does what it says: it sorts data.\nBy default, the sort comman sorts the data linux in a text file using standard sorting rules for the language you specify as the default for the session.\n[dwm@edwin ~]$ sort file1 four one three two By default , sort recognizes everything in a files as characters and performs a character sort. To recognize number we use -n parameter which tells the sort command to recognize numbers as numbers instead of characters and to sort them based on their numerical values.\ncharcter sort\n[dwm@edwin ~]$ sort file2 1 10 2 23 3 3 43 sort with -n prameter. (Numerical sort)\n[dwm@edwin ~]$ sort -n file2 1 2 3 3 10 23 43 45 Another commmon parameter that\u0026rsquo;s used is -M, the month sort. Linux log files usually contain a timestamp at the beginn of the line to indicate whe the event occurred.\nSep 12 04:30:10 testbox smart[2312]: Device: /dev/sda, opened The -k and -t parameter are handy when sorting data that uses fields, such as the /etc/passwd file. Use the -t parameter to specify the field separator character, and ues the -k parameter to specify which field to sort on.\nTo sort the password file based on numerical userid, just do this:\n[dwm@edwin ~]$ sort -t ':' -k 3 -n /etc/passwd root❌0:0::/root:/bin/bash bin❌1:1::/:/usr/bin/nologin daemon❌2:2::/:/usr/bin/nologin mail❌8:12::/var/spool/mail:/usr/bin/nologin ftp❌14:11::/srv/ftp:/usr/bin/nologin rpc❌32:32:Rpcbind Daemon:/var/lib/rpcbind:/usr/bin/nologin Now the data is perfectly sorted on the third field which is the numerical userid value.The -n is great for sorting numeriacal outputs, such as the outputs of the du command:\n[dwm@edwin ~]$ du -sh * | sort -nr 800M Documents 650M visual-studio-code-bin 516K video-200511-1019-38.mkv 328K node_modules 252M test 44K package-lock.json 36K LICENSE 33G VirtualBox VMs Notice that the -r option also sorts the value in desceding order, so you can easily see what files are taking up the most space in your directory.\nSearching for data. Grep Often in a large file, you must look for a specific line of data buried somewhere in the middle of the file. Instead of manually scrolling throught the entire file, you can let the grep command search for you. The command line Format for the grep command is:\ngrep [option] pattern [file] The grep command search either the input or the file you specify for lines that contains character that match thes specified pattern. The outputs from grep is the lines that contains the matching pattern.\nHere are two simple example of using the grep command with the file1 used above command.\n[dwm@edwin ~]$ grep three file1 three The grep command produces the line that contains the matching pattern. If you want to reverse the search (outputs the lines that don\u0026rsquo;t match a pattern) use the -v parameter.\n[dwm@edwin ~]$ grep -v t file1 one four If you need to find the line number where the mapching patterns are found, use the -n parameter.\n[dwm@edwin ~]$ grep -n t file1 2:two 3:three If you need to find the line number where the matching pattern are found use the -n parameter.\nIf you just need to see count of how many lines contains the matching pattern, use the -c parameter:\n[dwm@edwin ~]$ grep -c t file1 2 If you need to specify more than one matching pattern, use the -e parameter to specify each individual pattern:\n[dwm@edwin ~]$ grep -e t -e f file1 two three four The grep command uses basic unix-style regular expression to match patterns. A unix-style regular expression uses special character to define how to look for matching patterns.\nExample of using a regular expression in a grep search.\n// TODO : regular expression does not work on my system\nThe egrep command is an offshoot of grep, which allows you to specify POSIX extended reqular expression, which contains more characters for specifying the matching pattern.\nCompressing Data. No doubt you\u0026rsquo;ve used zip files. Linux contains several files compression utilities. Although this may sount great, it often lead to confusion and chaos when trying to download files.\nLinux file compression utilities\n   Utility File Extension Description     bzip2 .bz2 Uses the Burrow-Wheeler block sorting text compression algorithm and huffman coding   compress .z Original Unix file compression Utility:starting to fade away into obscurity   gzip .gz The Gnu Project\u0026rsquo;s compression utility; uses Lemperl-ziv coding   zip .zip The unix Version of the PKZIP program for windows    The gzip package is the most popular compression tool in Linux. The gzip package is a creating of the Gnu project in their attempt to create a free version of the original unix compress utility. This package includes these files:\n gzip for compressing files. gzcat for displaying the contend of compressed text files. gunzip for uncompressing files.  These utilities work the same way as the bzip2 utilities.\n[dwm@edwin ~]$ gzip file1 [dwm@edwin ~]$ ls -l fi* -rw-r--r-- 1 dwm wheel 45 May 11 23:41 file1.gz -rw-r--r-- 1 dwm wheel 26 May 11 23:47 file2 The gzip command compresses the file you specify on the command line. You can also specify more than one filename or even use wilcard character to compress multiple files at once.\n[dwm@edwin ~]$ gzip fi* [dwm@edwin ~]$ ls -la fi* -rw-r--r-- 1 dwm wheel 26 May 12 00:48 file1.gz -rw-r--r-- 1 dwm wheel 26 May 12 00:48 file2.gz -rw-r--r-- 1 dwm wheel 26 May 12 00:48 file3.gz The gzip command compresses every file in the directory that matches the wildcard pattern.\nArchiving data Although the zip command works great for compressing and archiving data into a single file, it\u0026rsquo;s not the standard utility used in the unix and linux worlds. By far the most popular archiving tool used in unix and Linux is the tar command. The tar command war originally used to write files to a tape device for archiving. It can also write the outputs to a file, which has become a popular way to archive data in linux.\nThe following is the format of the tar command:\n tar function [option] object1 object2..  Some options for the command includes:\n   Options Description     -C dir Changes to the specified directory   -f file Outputs results to file (or device) file   -j Redirects outputs to the bzip2 command for compression   -p Preserves all file permission   -v List files as they are processed   -z Redirects the outputs to the gzip command for compression    The options are usually combined to creade the following scenarios. First, you want to create an archive file using this command:\ntar -cvf test.tar test/ test3/ The above command creates an archive file called test.tar containing the contents or both the test directory and the test2 directory.\ntar -tf test.tar list (but doesn\u0026rsquo;t extract) the content of the tar file test.tar. Finaly, this command:\ntar -xvf test.tar extract the content of the tar file test.tar.If the tar was created from a directory, the entire directory structure is re-created starting at the current directory. This is a common method for distributing source code files for open source application in the linux world.\nUnderstanding the shell Now that you know a few shell basics its time to explore the actual shell process. To understand the shell, you need to understand a few cli basics.\nA shell is not just a cli. It a complicated interactive running program. Entering commands and using the shell to run scripts can raise some interesting and confusing issues. Understanging the shell process and its relationships help you resolve these issues or avoid them altogether.\nExploring the Shell Types The bash shell program resides in the /bin directory. A long listing reveals /bin/bash is an executable program.\n[dwm@edwin ~]$ ls -lF /bin/bash -rwxr-xr-x 1 root root 903504 Feb 17 14:31 /bin/bash*  Also, the zsh installed used for this distribution.\n[dwm@edwin ~]$ ls -lF /bin/zsh -rwxr-xr-x 2 root root 869608 Feb 16 20:55 /bin/zsh*  The default interactive shell starts whenever a user logs into a virtual console terminal or start a terminal emulator in the GNU. The default system shell is used for system shell script such as those needed at startup.\nOn some distribution, the default system shell is different that the default interactive shell, such as the ubuntu distribution.\n[dwm@edwin ~]$ cat /etc/passwd root❌0:0::/root:/bin/bash eduuh❌1003:998::/home/eduuh:/bin/zsh  Note that the user, eduuh has his default interactive shell set to /bin/zsh, the zsh shell. But the default system shell is set to bash.\nYou are not forced to stick with your default interactive shell. You can start any shell available on your distribution, simply by typing its filename. For example, to start the bash shell.\n [dwm@edwin ~]$ bash  It doest seem like much happened. However the bash shell program started. To exit the bash shell use the exit command\nExploring Parent and child shell Relationships. The default interactive shell started when a usert logs into a virtual console terminal or starts the terminal emulator in the GUI is a parent shell. A parent shell process provides a cli prompt and waits for commands to be entered.\nWhen the /bin/bash command or the equivalent bash command is entered at the cli prompt, a new shell program is created. This is a child shell. A child shell also has a cli prompt and waits for command to be entered.\nA command to bring all this to clarity.\n [dwm@edwin ~]$ ps -f UID PID PPID C STIME TTY TIME CMD dwm 14077 4942 0 11:37 pts/6 00:00:00 -zsh dwm 20887 14077 0 12:05 pts/6 00:00:00 ps -f [dwm@edwin ~]$ bash [dwm@edwin ~]$ ps -f UID PID PPID C STIME TTY TIME CMD dwm 14077 4942 0 11:37 pts/6 00:00:00 -zsh dwm 20933 14077 1 12:06 pts/6 00:00:00 bash dwm 20950 20933 0 12:06 pts/6 00:00:00 ps -f  The first use of ps -f shows two processes. One process has a process ID of 14077. After running the bash shell .\nThe second use of ps -f shows the bash shell is running with a child process ID of 20933 with the PPID of 14077.\nPPID stands for Parend Process ID  When a child shell process is spawned, only some of the parent\u0026rsquo;s environment is copied to the child shell envirionment.\nA child shell is also called a subshell. A subshell can be created from a parent shell and a subshell can be created from another subshell.\n [dwm@edwin ~]$ ps -f UID PID PPID C STIME TTY TIME CMD dwm 14077 4942 0 11:37 pts/6 00:00:00 -zsh dwm 23230 14077 0 12:16 pts/6 00:00:00 ps -f [dwm@edwin ~]$ bash [dwm@edwin ~]$ bash [dwm@edwin ~]$ bash [dwm@edwin ~]$ bash [dwm@edwin ~]$ ps --forest PID TTY TIME CMD 14077 pts/6 00:00:00 zsh 23242 pts/6 00:00:00 \\_ bash 23250 pts/6 00:00:00 \\_ bash 23262 pts/6 00:00:00 \\_ bash 23275 pts/6 00:00:00 \\_ bash 23307 pts/6 00:00:00 \\_ ps  Not only does this exit command allow you to leave child subshell, but you can also log out of your current virtual console terminal or terminal emulator software as well. Just type exit in the parent shell and you gracefully exit the cli.\nLooking at process lists You can designate a list of commands to be run one after another. This is done by entering a command list using a semicolon (;) between commands.\n[dwm@edwin ~]$ pwd ; ls ; cd /etc ; pwd ; cd ; pwd ; ls  The commands all executed one after another with no problems. However, this is not a process list. For a command list to be considered a process list, the command must be encased.\n[dwm@edwin ~]$ (pwd; ls;cd /etc ; pwd ; cd ; pwd ; ls)  The parenthesis does not appear to be a big different, they do cause a very different effect. The very different effect. Adding parentheses and turning the command list into a process list created a subshell to execute the commands.\n [dwm@edwin ~]$ pwd ; ls ; cd /etc ; pwd ; cd ; pwd ; ls ; echo $BASH_SUBSHELL /home/dwm d hd node_modules README.md visual-studio-code-bin Documents larb package.json Templates visual-studio-code-bin.tar.gz [...] 0  At the very end of the command\u0026rsquo;s outputs, you can see the number zero (0) is displayed. The results are different using a process list.\n Note the environment variable (BASH_SUBSHELL) is updated when a child subshell is created in the system.  To indicate if a subshell was spawned, a command using an environment variable is needed here.\n [dwm@edwin ~]$ (pwd ; ls; cd /etc ; pwd; cd ; ls ; echo $BASH_SUBSHELL) /home/dwm d hd node_modules README.md visual-studio-code-bin Documents larb package.json Templates visual-studio-code-bin.tar.gz Downloads LICENSE package-lock.json test w` [..] 1  In this case, the number one(1) displayed at the output\u0026rsquo;s end.This indicates a subsheell was indeed created and used for executing these commands. You can even create a grandchild subshell by embedding parentheses within a process list:\n [dwm@edwin ~]$ (pwd; echo $BASH_SUBSHELL) /home/dwm 1 [dwm@edwin ~]$ (pwd; (echo $BASH_SUBSHELL)) /home/dwm 2  Creatively using subshells One productive subshell method in the interactive sell uses background mode.\nInvestigating background mode Running a command in backgrount mode allows the command to be processed and frees up your cli for other uses. A classic command to demostrate background mode is the sleep command.\nThe sleep command acceptsas a parameter the number of seconds you want the process to wait(sleep). This command is often used to introduce pauses in shell scripts. The command sleep 10.\nTo put a command into background mode, the \u0026amp; character is tacked onto its end. Putting the sleep command into background mode allows a little investigation with the ps command.\n [dwm@edwin ~]$ sleep 10\u0026amp; [1] 39047  when a program is put into background , two information were displayed before the shell CLI prompt was returned. The first information item is the background job\u0026rsquo;s number (1) displayeg in brackedt. The second item is the background job\u0026rsquo;s process ID 39047.\nThe ps command was used to display the various processes. Notice that the sleep command is listed.\nIn addition to the ps command, you can use the jobs command to display background job information. The jobs command displays any use\u0026rsquo;r process (jobs)a currently running in background mode.\nThe jobs command shows the job number (1) in brackets. It also displys the job\u0026rsquo;s current status(running) as well.\n [dwm@edwin ~]$ sleep 3000\u0026amp; [1] 40318 [dwm@edwin ~]$ jobs [1]+ Running sleep 3000 \u0026amp; [dwm@edwin ~]$ jobs -l [1]+ 40318 Running sleep 3000 \u0026amp;  when the backgrund job is finished, its completion status is displayed. Background mode is very handy. And it Provides a method for creating useful subshells at the CLI.\nPutting process lists in the background  [dwm@edwin ~]$ (sleep 2 ; echo $BASH_SUBSHELL ; sleep 2) 1  A two second pause occurs, the number one (1) is displayed indicating a single subshell level (child subshell level), and then another two-second pause occurs before the prompt returns.Putting the same process list in background mode can caouse a slightly different effect with the commang output.\nPutting the process list into the background mode causes a job number and process ID to appear.\n [dwm@edwin ~]$ (sleep 2 ; echo $BASH_SUBSHELL ; sleep 2)\u0026amp; [2] 42121 [dwm@edwin ~]$ 1 [2]+ Done ( sleep 2; echo $BASH_SUBSHELL; sleep 2 )  Using a process list in background mode in one creative method for using subshells at the cli. You can do large amount of processing withing a subshell and not have your termnal tied up withe the subshell\u0026rsquo;s I/O.\nPutting a process list in background mode in not the only wat to used subshells creatively at the CLI. CO-processing in another method.\nLooking at co-processing Co-Processing does things at thes same time. It spawns a subshell in background mode and executes a command witing the subshell:\nYou can be really clever and combine co-processing withe process lists creating nested subshells. Just type your process list and put the command coproc in front of it.\n[dwm@edwin ~]$ coproc (sleep 10; sleep 2) [1] 45198 [dwm@edwin ~]$ jobs [1] + running ( sleep 10; sleep 2; ) [dwm@edwin ~]$ ps --for [1] + done ( sleep 10; sleep 2; ) [dwm@edwin ~]$ ps --forest PID TTY TIME CMD 14077 pts/6 00:00:02 zsh 45244 pts/6 00:00:00 \\_ ps 40318 pts/6 00:00:00 sleep   Note spawning a subshell can be expensive and slow. Creating nested subshells is even more so!  Understangding shell Built-in commands. Looking at external commands. An external command sometimes called a filesystem command, is a program that exists outside of the bash shell.They are not built into the shell program. An external command program is typically located in /bin/ /usr/bin, /sbin or /usr/sbin.\nThe ps command is an external command. You can find its filename by using both the which and the type commands.\n[dwm@edwin ~]$ which ps /usr/bin/ps [dwm@edwin ~]$ type -a ps ps is /usr/bin/ps ps is /bin/ps [dwm@edwin ~]$ ls -l /bin/ps -rwxr-xr-x 1 root root 133384 Feb 5 12:36 /bin/ps [dwm@edwin ~]$ ls -la /usr/bin/ps -rwxr-xr-x 1 root root 133384 Feb 5 12:36 /usr/bin/ps  Whenevre an external command is executed, a child process is created. This action is termed as forking.\nConveniently,the external command ps display its current parent as well as its own forked child processes.\n[dwm@edwin ~]$ ps -f UID PID PPID C STIME TTY TIME CMD dwm 14077 4942 0 11:37 pts/6 00:00:03 -zsh dwm 40318 1 0 13:37 pts/6 00:00:00 sleep 3000 dwm 47491 14077 0 14:12 pts/6 00:00:00 ps -f  When the ps command is executed , a child process is created. In this case the Ps command\u0026rsquo;s Ps command is 47491 the parent id of 14077.Whenever a process must fork it takes time and effort to set up the new child process\u0026rsquo;s environment.\nLooking at built-in commands Built-in commands are different in that they do not need a child process to execute. They were compiled into the shell into the shell and thus are part of the shell\u0026rsquo;s toolkit.No external program.\nBoth the cd command and exit command are built into bash shell. You can tell a command is built-in by uisng the type command.\n [dwm@edwin ~]$ type cd cd is a shell builtin [dwm@edwin ~]$ type exit exit is a shell builtin [dwm@edwin ~]$ type type type is a shell builtin  Because they do not need to fork a child process to execute or open a program file, built-in commands are faster and more efficient. A list of GNU bash shell built-in command is provided.\nBe aware that some commands have multiple flavors. Both echo and pwd have a build-in command flavor as well asn an external command flavor. These flavors are slightly different.\nTo see multiple flavors you can pass a flag a to the type command.\n[dwm@edwin ~]$ type -a echo echo is a shell builtin echo is /usr/bin/echo echo is /bin/echo [dwm@edwin ~]$ which echo echo: shell built-in command [dwm@edwin ~]$ type -a pwd pwd is a shell builtin pwd is /usr/bin/pwd pwd is /bin/pwd  Using the history command A useful built-in command is the history command. The bash shell keeps track of the commands you have used. You can recall these command and even reuse them.\nTo see a recently used commands list just type the history command with no options:\n [dwm@edwin ~]$ history 38 type -a ps 39 ls -l /bin/ps 40 ls -la /usr/bin/ps 41 clear 42 ps -f 43 clear  To recall and reuse the last command in your history list. This can save time and typing. To recall and reuse your last command type !! and press the Enter key.\n [dwm@edwin ~]$ ps --forest PID TTY TIME CMD 14077 pts/6 00:00:03 zsh 51497 pts/6 00:00:00 \\_ ps [dwm@edwin ~]$ !! ps --forest PID TTY TIME CMD 14077 pts/6 00:00:03 zsh 51511 pts/6 00:00:00 \\_ ps  Command history is kept in the hidden .bash_history file, which is located in the user\u0026rsquo;s home directory. Be careful here. The bash command history is stored in memory and then written out into the history file when the shell is exited:\n[dwm@edwin ~]$ history 51 clear [...]  To reuse the clear command you use an ! followed by the command number.\n[dwm@edwin ~]$ !51  Using Command aliases The alias command is another shell built-in command. A commannd alias allows you to create an alias name for common commands (along with their parameters) to help keep your typing to a minimum.\nMost likely, your linux distribution has already set some common command aliases for you. To see a list of the active alaises, Use the alias command with -p parameter.\n [dwm@edwin ~]$ alias D='cd ~/Downloads \u0026amp;\u0026amp; ls -a' YT=youtube-viewer bd='nvim /home/dwm/.config/directories' bf='nvim /home/dwm/.config/files' bw='nvim /home/dwm/.config/bookmarks' alias ls='ls --color=auto'  Most of the aliases above are my own..You can create your own aliases using the alias command:\n[dwm@edwin ~]$ alias li='ls -li' [dwm@edwin ~]$ li total 12436 7213906 -rw-r--r-- 1 dwm wheel 1 May 1 23:21 d 7209752 drwxr-xr-x 3 dwm wheel 4096 May 10 06:29 Documents 7209748 drwxr-xr-x 2 dwm wheel 4096 May 8 21:12 Downloads 7227410 -rw-r--r-- 1 dwm wheel 26 May 12 00:48 file1.gz 7211488 -rw-r--r-- 1 dwm wheel 26 May 12 00:48 file2.gz  Fortunately, you can make value permanent across subsells. The next section covers how to do that, along withe envirronment variables.\nUsing Linux Environment Variables Linux environment variables help define your linux shell experience. Many programs and scripts use environment variables to obtain system information and store temporarary data and configuration information. Envrionment variables are set in lots of places on the linux system, and you should know where these places are.\nLooking at environment variables The bash shell uses a feature called environment variables to store information about thes shell session and the working environment (thus the name environment variables). This features also allows you to store data in memory that can be easily accessed by any program or script running from the shell. It is handy way to store needed persistent data.\nThere are two environment variables types in the bash shell:\n Global variables Local variables  Looking at global enviroment variables Global environment variables are visible from the shell sessions and from any spawned child subshells. Local variables are available only in the shell that creaates them. This makes global environment variables useful in applications that create child subshells, which require parent shell information.\nThe linux system set several global environment variables when you start your bash sessions.The system environment variables almost use all capital letters to differentiate them form normal user environment variables.\nTo view global environment variables, use the env or the printenv command.\n [dwm@edwin ~]$ printenv ALSA_CONFIG_PATH=/home/dwm/.config/alsa/asoundrc ANDROID_HOME=/opt/android-sdk ANDROID_SDK_HOME=/home/dwm/.config/android ANSIBLE_CONFIG=/home/dwm/.config/ansible/ansible.cfg [..]  So many global environment variables get set for the bash shell that the display had to be snipped.Not only are many set duiring the login process,but how you log in can affect which ones are set as well.\nTo display an individual environment variable\u0026rsquo;s value, you can use the printenv command, but not the env command.\n [dwm@edwin ~]$ printenv HOME /home/dwm [dwm@edwin ~]$ env HOME env: ‘HOME’: No such file or directory  You can also use the echo command to display a variable\u0026rsquo;s value. When referencing an environment variable in this case, you must place a dollar sign ($) before the environment variable name:\n [dwm@edwin ~]$ echo $HOME /home/dwm  Using dollar sign along with the variable name does more than just display its current definition when used with the echo command. The dollar sign before sign before a variable name allows the variable to be passed as a command parameter.\n [dwm@edwin ~]$ ls $HOME d hd node_modules README.md [..]  Global variables are also availabe to any process\u0026rsquo;s subshells.\nLooking at local environment variables. Local environment variable , as their name implies can be seen only in the local process in which they are defined. Even though they are local, they are just as important as global enviroment variables. In fact, the Linux system also defines standard local environment variables for you by default.\nYou can create you own local variables called user-defined local variables. Trying to see the local variable list is a little tricky at the cli. There isn\u0026rsquo;t a command that displays only these variables. The set command displays all variables defined for a specific process, including both local and global envirionment variable and user-defined variable.\n [dwm@edwin ~]$ set '!'=0 '#'=0 '$'=81710 '*'=( ) -=569JXZilms 0=-zsh '?'=0 @=( ) ALSA_CONFIG_PATH=/home/dwm/.config/alsa/asoundrc  All global environment variable displayed using the env and printenv command appear in the set command\u0026rsquo;s output. The additional environment variable are the local environment and user-define variables.\nSettign User-Defined Variables You can set your own variable directly from the bash shell. After you start a bash shell , you\u0026rsquo;re allowed to create local user-defined variables that are visible withing your shell process. You can assign either a numeric or a string value to an environment variable by assigning the variable to a value using the equal sign:\n[dwm@edwin ~]$ echo $variable [dwm@edwin ~]$ variable=Muraya [dwm@edwin ~]$ echo $variable Muraya  That was simple! Now any time you need to reference the my_variable user-defined variable value, just reference it by the name $variable.\nIf you need to assign a string value that contains spaces, you need to use a single or double quotation mark to delineate the beginning and the end of the string:\nWithout the quatation marks, the bash shell assumes that the next word is anothe command to process. Notice that for the local variable you defined,you used lowerscase letters, while the system environment variable you\u0026rsquo;ve seen so far have all used uppercase letters.\n The standard bash shell convention is for all environment variables to use uppercase letters. If you are creating a local variable for yourself and your own shell scripts, use lowercase letters. Variables are case sensitive. By keeping your user-defined local variable lowercase, you avoid the potential disaster of redefining a system environment variable.  It\u0026rsquo;s extremely important that you not use spaces between the variable name , the equal sign and the value. If you put any spaces in the assignment, the bash shell interprets the value as a separate command.\nif you set a local varialbe in a child process, after you leave the child process, the local variable is no longer available.\n [dwm@edwin ~]$ echo $my_child_variable [dwm@edwin ~]$ bash [dwm@edwin ~]$ my_child_variable=\u0026quot;Hello Little world\u0026quot; [dwm@edwin ~]$ echo $my_child_variable Hello Little world [dwm@edwin ~]$ exit exit [dwm@edwin ~]$ echo $my_child_variable  The local variable set within the child shell doesn\u0026rsquo;t exist after a return to the parent shell.\nSetting global environment variables Global environment variable are visible form any child process created by the parent process that sets the varaible.\nThe method used to create a global environment variable is to first create a local variable and then export it to the global environment.\nThis is done by using the export command and the variable name minus the dollar sign:\n [dwm@edwin ~]$ my_variable=\u0026quot;I am Global now\u0026quot; [dwm@edwin ~]$ export my_variable [dwm@edwin ~]$ echo $my_variable I am Global now [dwm@edwin ~]$ bash [dwm@edwin ~]$ echo $my_variable I am Global now  The variable my_variable is available on all shell and subshells. A child shell cannot even use the export command to change the parent shell\u0026rsquo;s global environment variable value.\n [dwm@edwin ~]$ echo $my_variable I am Global now [dwm@edwin ~]$ clear [dwm@edwin ~]$ name=\u0026quot;Edwin Muraya\u0026quot; [dwm@edwin ~]$ export name [dwm@edwin ~]$ echo $name Edwin Muraya [dwm@edwin ~]$ bash [dwm@edwin ~]$ name=\u0026quot;Mr muraya\u0026quot; [dwm@edwin ~]$ export name [dwm@edwin ~]$ echo $name Mr muraya [dwm@edwin ~]$ exit exit [dwm@edwin ~]$ echo $name Edwin Muraya  Removing Environment variables If you can create a new environment variable, it make sense that you can also remove an existing environment variable. You can do this withe the unset command. When referencing the environment variable in the unset\n [dwm@edwin ~]$ my_variable=\u0026quot;Muraya Kamau\u0026quot; [dwm@edwin ~]$ export my_variable [dwm@edwin ~]$ echo $my_variable Muraya Kamau [dwm@edwin ~]$ unset my_variable [dwm@edwin ~]$ echo $my_variable   It can be confusing to remember when to use and when not to use the dollar sign with environment variables. If you are doind anything with the variable, use the dollar sign. If you are doing anything to the variable , don\u0026rsquo;t use the dollar sig. The excepiton to this rule is using printenv do display a variable\u0026rsquo;s value.  When dealing with global environmen variable, things get a little tricky. If you\u0026rsquo;re in a child process and unset a global environment variable, it applies only to the child process. The global environment is still available in the parent process.\n[dwm@edwin ~]$ my_variable=\u0026quot;I am Global now\u0026quot; [dwm@edwin ~]$ export my_variable [dwm@edwin ~]$ echo $my_variable I am Global now [dwm@edwin ~]$ bash [dwm@edwin ~]$ unset my_variable [dwm@edwin ~]$ echo $my_variable [dwm@edwin ~]$ exit exit [dwm@edwin ~]$ echo $my_variable I am Global now  Uncovering Defaut Shell Environment Variables The bash shell uses specifi environment variables by defaunt to define the system environment. You can always count on thes variables being set or available to be set on your linux system.\nBecaues the bash sell is a derivative of th original Unix Bourne shell, it also include environment variables originally defined in that shell.\n   Variables Description     CDPATH A colon-separated list of directoriec used as a search path for the cd command   HOME The current user\u0026rsquo;s home directory   IFS A list of characters that separate fields used by the shel to spit text strings   MAIL The filenames of the current user\u0026rsquo;s mailbox (the bash shell check this file fo mails)   MAILPATH A colone-separate list of multiple filenames for the current user\u0026rsquo;s mailbox   OPTARG The value of the last option argument processed by the getopt command.   PATH A colon-separated list of directory where the shell looks for command   PS1 The primary shell command line interface prompt string   PS2 The secondary shel command line interface prompt string    ####### The bash Shell Envrionment varaible Variable | Decription \u0026mdash;\u0026mdash;\u0026mdash;|\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash; BASH | The full pathname to execute the current instance of the bash shell. BASH_ALIASES | An associative array of currently set aliases BASH_ARGC | A variable array that contains the parameter being passed to a subroutine or shell BASH_CMDS | An associative array of location of commands the shell has executed. BASH_COMMAND | The shell command currently being or about to be executed. BASH_ENV | When set, each bash script attempt to execuet a startup file defined by this variable.\nThere are so many presest environmet variables which i will not include here.\nSetting the PATH Environment Variable When you enter an enternal command in the shell command line interface (cli), the shell must search the system to find the program. The PATH envrionment variable define the directoriest it searches looking for a commands and programs.\n [dwm@edwin ~]$ echo $PATH /home/dwm/.local/bin:/usr/local/bin:/usr/bin:/bin:/usr/local/sbin:/opt/android-sdk/platform- tools:/opt/android-sdk/tools:/opt/android-sdk/tools/bin:/usr/lib/jvm/default/bin:/usr/bin/si te_perl:/usr/bin/vendor_perl:/usr/bin/core_perl:/home/dwm/.local/bin/cron:/home/  If a command\u0026rsquo;s or program location is not included in the PATH variable, The shell cannot find it without an absolute directory reference. If the shell cannot find the command or program, it produces an error message.\n [dwm@edwin ~]$ myprog zsh: command not found: myprog  The proble is that often application place their executable program in directories that aren\u0026rsquo;t in the PATH environment variable. The trick is ensuring that your PATH enviroment variable includes all the directories where your application reside.\nYou can add new search directories to the existing PATH envrionment variable without having to rebuild it from scratch. The individual directories listed in the PATH are separate by colons\n echo $PATH /home/dwm/.local/bin:/usr/local/bin:/usr/bin:/bin:/usr/local/sbin:/opt/android-sdk/platform: /home/dwm/script [dwm@edwin ~]$ PATH=$PATH:/home/dwm/script [dwm@edwin ~]$ echo $PATH /home/dwm/.local/bin:/usr/local/bin:/usr/bin:/bin:/usr/local/sbin:/opt/android-sdk/platform: /home/dwm/script  By adding the directory to the $PATH environment varaile, you can now execute you proram form anywere in the virtual directory structure.\nLocating System Enviroonment Variables The linux system uses envrionment variale for many purposes. You know now how to modify system environment variable and create your own variables.The trick is how to make these environment varialbe persistent.\n* As a defaut login shell at login time * As an interactive shell that is started by spawning a subshell. * As a non-interactive shell to run a script  Understanding the login shell process When you log in to the Linux system, the bash shell start a login shell. The login shell typically looks for five different files to process commands from:\n* /etc/profile * $HOME/.bash_profile * $HOME/.bashrc * $HOME/.bash_login * $HOME/.profile  The /etc/profile file is the main default startup file for the bash shell on the system. All Users on the system execute this startup file when they log in.\nThe other four startup file are specifi for each user and can be customized for an individual users requirements. Lets look closer at thes files.\nViewing the /etc/profile file The /etc/profile file is the main default startup file the bash shell. Whenever you log in to the linux system, bash execute the commands in the /etc/profile startup file first. Different linux distribution place different command in thi file.\n# /etc/profile # Set our umask umask 022 # Append our default paths appendpath () { case \u0026quot;:$PATH:\u0026quot; in *:\u0026quot;$1\u0026quot;:*) ;; *) PATH=\u0026quot;${PATH:+$PATH:}$1\u0026quot; esac } appendpath '/usr/local/sbin' appendpath '/usr/local/bin' appendpath '/usr/bin' unset appendpath export PATH # Load profiles from /etc/profile.d if test -d /etc/profile.d/; then for profile in /etc/profile.d/*.sh; do test -r \u0026quot;$profile\u0026quot; \u0026amp;\u0026amp; . \u0026quot;$profile\u0026quot; done unset profile fi # Source global bash config if test \u0026quot;$PS1\u0026quot; \u0026amp;\u0026amp; test \u0026quot;$BASH\u0026quot; \u0026amp;\u0026amp; test -z ${POSIXLY_CORRECT+x} \u0026amp;\u0026amp; test -r /etc/bash.bashrc; then . /etc/bash.bashrc fi # Termcap is outdated, old, and crusty, kill it. unset TERMCAP # Man is much better than us at figuring this out unset MANPATH  Each distribution /etc/profile file has different setting and commands. Not that it sets some system environment variable within itself. This provides a place for the linux system to place application-specific startup file that is executed by the shell when you log in.\nThe for statement that iterates through any files located in /etc/profile.d directory. This provides a place for the linux system to place application specific startup files that is executed by the shell when you log in. on this Ubuntu Linux system, thef following files aren n the profile.d directory.\n [dwm@edwin ~]$ ls /etc/profile.d android-sdk.csh android-sdk.sh gawk.sh jre.csh perlbin.csh vte.sh android-sdk-platform-tools.csh freetype2.sh gpm.sh jre.sh perlbin.sh android-sdk-platform-tools.sh gawk.csh home-local-bin.sh locale.sh vte.csh  Notice that most application create two startup files -one for the bash (using the .sh extension) and one for the c shell (using the .csh extension).\nThe lang.csh and lang.sh files attempt to determinte the defaut language character set used on the system and set the LANG environment variable appropriately.\nViewing the $HOME startup files The remaining startup file are all used for the same function \u0026ndash;to provide a user-specific startup file for defining user-specific environment varaible. Most linux distribution use only one or two of these four startup files.\n * $HOME/.bash_profile * $HOME/.bashrc * $HOME/.bash_loginashrc * SHOME/.profile  Notice that all four files start with a dot, making them hidden files (they don\u0026rsquo;t appear in a normal ls command listing).The first file found in the following ordered list is run, and the rest are ingnored.\n* $HOME/.bash_profile * $HOME/.bash_login * SHOME/.profile  Notice that $HOME/.bashrc in not in this list. This is because it is typically run from of the other files. Remember that $HOME represent a user\u0026rsquo;s home directory. Also the tilde (~) is used to represent a users home directory.\n # ~/.bash_profile # [[ -f ~/.bashrc ]] \u0026amp;\u0026amp; . ~/.bashrc  The .bash_profile startup file first checks to see if the startup file , .bashrc if present in the HOME directory. If it\u0026rsquo;s there, the startup file executes the commands in it.\n# # ~/.bashrc # # If not running interactively, don't do anything [[ $- != *i* ]] \u0026amp;\u0026amp; return alias ls='ls --color=auto' PS1='[\\u@\\h \\W]\\$ '  The .bashrc file does two things.\n It checkes for comman bashrc file in the /etc directory. It provides a place for the user to enter personal command aliases.  Understandin the interactive shell process If you start a bash shell withou logging into a system (if you just type bash at the CLI) prompt you started whats is challed an interactive shell\nThe interactive shell does not act like a login shell, but it still provide a cli prompt for you to enter commands.\nTo accomadete this situation, the bash shell provides the BASH_ENV environment variable. When the Shell start a non-interacive subshell process, it checks this environment variable for the startup file name to execute.\n[edd@edwin ~]$ printenv BASH_ENV [edd@edwin ~]$  On arch Linux distribution, this command value is not set by default. When a variable is not set, the printenv conmmand simply returns the cli prompts:\nMaking environment variables persistent Now that you know the following:\n Various shell process types. Variaous environment files. Locating the permanent environment variables.  You can also set your own permanet global or local variables using these files. Those variables needed by all the users on a linux system, it may be tempting to put a new or modified variable settings in the /etc/profiles, but that a bad idea.\nThe file could be changed when your distribution is upgraded, and you would lose all the customized variable settings.\nIt is a better idea to creat a file ending with .sh in the /etc/profile.d directory. In that file, place all your new or modified global environment variable settings.\nOn most distributions, the best place to store an individual user\u0026rsquo;s persistent bash shell variable is in the $HOME/.bashrc file. This is true for all shell process types. However the BASH_ENV vairiable is set,\nKeep in mind that unless it points to $HOME/.bashrc, you may need to store a user\u0026rsquo;s variables for non-interactive shell types elsewhere.\n Keep in mind that user environment variables for graphical interface elements, such as GUI clients, may need to be set in different configuration files that where bash shell environment variables are set  Uncovering Default Shell Environment variables. The bash shell uses specific environment variables by default to define the system environment . You can always count on these variables being set or availabe to be set on your linux sytem.\nBecause the bash shell is a derivative of the original Unix bourne shell, it also includes environment variables originally defined in that shell.\nLearning about Variable Arrays. A really cool features of environment variables that they can be used as arrys. An array is a variable that can hold multiple values. Values can be referenced either individually or as a whole for the entire array.\nTo set multiple values for an environment variable, just list them in parentheses, with values separated by spaces.\n [edd@edwin ~]$ mytest=(one two three four five) [edd@edwin ~]$ echo $mytest one  If you try to display the array as a normal environment variable, you\u0026rsquo;ll de disappointed. Only the fist value in the array appears.\nOnly the first value in the array appears. To reference an individual array element, you must use a numerical idex value, which represent its place in the array. The numeric valu is enclosed in squre brackets;\n [edd@edwin ~]$ echo ${mytest[2]} three  To display an entire array variable, you use the asterisk wildcard character as the index value:\n [edd@edwin ~]$ echo ${mytest[*]} one two three four five  You can also change the value of an indivudual index position.\n [edd@edwin ~]$ mytest[2]=seven [edd@edwin ~]$ echo ${mytest[*]} one two seven four five  You can even use the unset command to remove an individual values withing the array,but be careful, because this gets tricky.\n [edd@edwin ~]$ unset mytest[2] [edd@edwin ~]$ echo ${mytest[*]} one two four five  The above examples uses the unset command to remove the value at index value 2. When you display the array, it appearst that the outer index values just dropped down one. However, if you specificall display the data at index value 2, you see that location is empty.\nFinally, you can remove the entire array just by using the array name in the unset command.\n [edd@edwin ~]$ unset mytest [edd@edwin ~]$ echo ${mytest[*]}  Sometimes variables arrays just complicate matters. They\u0026rsquo;re not used in shell script programming often.\nThey\u0026rsquo;re not very portable to other different shells. Some bash system environment uses arrays (such as BASH_VERSINFO), but overall you probably won\u0026rsquo;t run into them very often.\nUnderstandng Linux File Permissions Linux Security The core of the linux security system is the user account. Each Individual who accesses a linux sytem should have a unique user account assigned.\nThe user\u0026rsquo;s permissions to object on the system depends on the user account they log in with.\nUser permissions are tracked using a user ID (often called a UID), which is assigned to account when it\u0026rsquo;s created .\n UId is a numerical value, unique for each user.  You don\u0026rsquo;t log in to a Linux system using your UID but using your login name. The login name in an alphanumric text string of eight character or fewer that the users uses ot log in to the system (alogn with an associated password).\nThe linux sytem uses special filef and utilities to track and manage user accounts on the system. Before we can discuss file permissions, we need to discuss how linux handles user accounts.\nThe linux sytem uses special files and utilities to track and manage user accounts on the system. Befor we can discuss file permissions, we need to discuss how linux handles user accounts.\nThe /etc/passwd file The linux system uses a special file to match the logi name to coresponding UID value. This file is the /etc/passwd file.\n[edd@edwin ~]$ cat /etc/passwd root❌0:0::/root:/bin/bash bin❌1:1::/:/usr/bin/nologin daemon❌2:2::/:/usr/bin/nologin mail❌8:12::/var/spool/mail:/usr/bin/nologin ftp❌14:11::/srv/ftp:/usr/bin/nologin http❌33:33::/srv/http:/usr/bin/nologin [...]  The root user account is the administrator for the linux system and is alwayse assigned UID 0.\nLinux system creates lots of user account for various functions that aren\u0026rsquo;t actual users. These are called system accounts.\nA system account is a special account that services running on the system use to gain access to resources on the system. All services that run in background mode need to be logged in to the linux system under a sytem user account. Before security became a big issue, these services often just logged in using the root user account. if an anautorized person broke into one of these services he instantly gained access to the sytem as the root user. To prevent this, now just about every service that runs in background on a Linux server has its own user account to log in with troublemakes cant necessarily get access to the whole system\nYou probably noticed that the /etc/password files contains much more than just the login name and UID for the user. The fields of the /etc/passwd file contains the following information:\n The login username The login password for the user. The numerical UID of the user account The numerical group ID (GID) of the user account. A text description of the user account (called the comment field). The location of the HOME directory for the user. The default shell for the user.  The password field in the /etc/password is set to X. this doest mean that all the user account have the same password.\nIn the old days of linux, /etc/passwd file containde an encrypted version of the user\u0026rsquo;s password. since lots of program need to access the /etc/passwd file for user information, this become a security problem. It very easyt to decryt passwords, and the bad guy had a field day trying to break user passwords stored in the /etc/passwd. Linux developers needed to rethink that policy.\nNow, most linux sytems hold user passwords in a separate file (called the shadow file located at /etc/shadow). Only special program (such as the login program) allowed access to this file.\nThe /etc/shadow file The /etc/shadow file provides more control over how the Linux system manages passwords. Only the root user has access to the /etc/shadow file making it more secure that the etc/passwd file.\nThe /etc/shadow file contains one record for each user account on the system. A record looks like this:\nAs a normal use i can\\t access the file.\n[edd@edwin ~]$ cat /etc/shadow cat: /etc/shadow: Permission denied [edd@edwin ~]$ sudo cat /etc/shadow [sudo] password for edd: edd:$6$Xmxz9/3zwJPRjryb$365dIcSMvP4VUFiyoKnUX3lbcdMSJAq8DP2xAjv/ALmbmVy.alQN9FTFN6EsGI8jOg8gq95vs.ohl899yc9aM/:18400::::::  There are nine fields in each /etc/shadow file record.\n The login name corresponding to the login name The encrypted password The number of days since January 1, 1970,that the password was last changed The minimum number of days before the password cah be changed. The number of dayse the before password expiration The number of days after a password expires before the account will be disabled. The date (stored as the number of days since january 1, 1970) since the user account was disabled. A field reserved for future use.  Using the shadow password system, the Linux system has much finer control over user passwords. It can control how often a user must change his or her password and when to disable the account if the password hasn\u0026rsquo;t been changed.\nAdding a new user. The primary tool used to add new users to your linux system is useradd.. This command provides an easy way to a create a new user account and set up the user\u0026rsquo;s HOME directory structure all at once.\nThe linux system has default values and command line parameters to define a user account. The sytem default are set in the /etc/default/useradd file. To see the system default value used on your linux distribution use -D parameter.\n [edd@edwin ~]$ useradd -D GROUP=100 HOME=/home INACTIVE=-1 EXPIRE= SHELL= SKEL=/etc/skel CREATE_MAIL_SPOOL=no  The -D parameter shows what defaults the useradd command Uses if you don\u0026rsquo;t specify them in the command line when createng a new user account.\n  The new user is added to a common grout with group ID 100.\n  The new user has a HOME account created in the directory /home/loginname\n  The account can\u0026rsquo;t be disabled when the password expires.\n  The new account can\u0026rsquo;t be set to expire at a set date.\n  The new account uses the bash shell as the default shell.\n  The sytem copies the content of the /etc/skel directory to to the user\u0026rsquo;s HOME directory.\n  The system creates a file in the mail directory for the user to receive mail\n[edd@edwin /etc/skel]$ ls -la total 20K drwxr-xr-x 2 root root 4.0K May 18 13:58 . drwxr-xr-x 62 root root 4.0K May 21 18:26 .. -rw-r\u0026ndash;r\u0026ndash; 1 root root 21 Feb 13 19:41 .bash_logout -rw-r\u0026ndash;r\u0026ndash; 1 root root 57 Feb 13 19:41 .bash_profile -rw-r\u0026ndash;r\u0026ndash; 1 root root 141 Feb 13 19:41 .bashrc\n  Copied my zsh configuration to the /etc/skel folder and created a test user to just see what happens.\n[edd@edwin /etc/skel]$ sudo cp ~/.config/zsh/.zshrc /etc/skel [sudo] password for edd: [edd@edwin /etc/skel]$ ls [edd@edwin /etc/skel]$ sudo ls -la /home/test total 24 drwx------ 2 test test 4096 May 23 09:39 . drwxr-xr-x 6 root root 4096 May 23 09:39 .. -rw-r--r-- 1 test test 21 Feb 13 19:41 .bash_logout -rw-r--r-- 1 test test 57 Feb 13 19:41 .bash_profile -rw-r--r-- 1 test test 141 Feb 13 19:41 .bashrc -rw-r--r-- 1 test test 2593 May 23 09:38 .zshrc  Notice that the .zshrc file is copied in the new user directory. By default, the useradd command doen\u0026rsquo;t create a HOME directory, but the -m command line option tell it to create the HOME dicetory.\nIf you want to override a default value or behaviour when creating a new user, you can do that with command line parameters.\n   Parameter Description     -c comment Adds text to the new user\u0026rsquo;s comment field   -d home_dir specifies a different name for the HOME directory other than the login name   -e expire_date specifies a date in YYYY-MM-DD format   -f inactive_days Specifies the number of days after a password expires   -g initial_group speifies the group name or GID of the user\u0026rsquo;s login group   -k copies the /etc/skel directory content into the user\u0026rsquo;s HOME dir   -m Creates the user\u0026rsquo;s HOME directory   -M Doesn\u0026rsquo;t create a user\u0026rsquo;s HOME directory   -n Create a new group using the same name as the users login name   -r Create a system account   -p A default password for the user account   -s shell specifies the default login shell   -u uid Speifies a uniques UID for the account    Removing a User usedel commad is what you need to remove users. By default, the userdel command removers only the user information from the /etc/passwd file. It doesn\u0026rsquo;t remove any files the account owns on the system.\nIf you use the -r parameter, userdel removes the user\u0026rsquo;s HOME directory along with the users mail directory. Other files ownede by the deleted user account may still be on the sytem. This can be a problem in some environments.\n[edd@edwin ~]$ userdel -r test  After using the -r parameter , the users old /home/test directory no longer exists.\nModifying a User Linux provides a few different utilities for modifying the information for existing user accounts.\n   command Description     usermod Edits user account fields ,specifying (primary and secondary group membeship)   passwd Changes the password for an existing user   chpasswd Reads a file of login name and password pairs, and updates the passwords   chage Change the password expiration date   chfn changes the user account comment information.   chsh changes the User account default shell    usermod The usermod command is the most robust of the user account modification utilities. It provides options for changing most of the fieds in the /etc/passwd file. The parameters are mostly the same as the useradd parameters (such as -c) to change the comment field, -e to change the expiration date, and -g to change the default login group.\n l changes the login name of the user account. L loces the account so the user can\u0026rsquo;t log in. p changes the password for the account. U unlocks the account so the user can log in.  The -L parameter is especially handy. Use this to lock an account so a user can\u0026rsquo;t log in without having to remove the account and thes user data.To return the user account to normal just the -U parameter.\npassd and chpasswd A quick way to change just the password for a user is to passwd command:\n [edd@edwin ~]$ sudo passwd test New password: Retype new password: passwd: password updated successfully  The -e option is a handy way to force a user to change password on the next log in. This allows you to set the user\u0026rsquo;s password to a simple value and force them to change it to something harder that they can remmber.\nIf you ever need to do a mass password change for lost of users on the system, the chpasswd can be a lifesaver. The chpasswd command reads of login name and password pairs(separated by a colon) from the standand input automatically encrypts the password, and sets it for the user account. You can also use the redirection command to redirect a file of userid:password pairs into the command.\n $ chpasswd \u0026lt; users.txt  chsh,chfn, and chage The chsh, chfn and chage utilities are specialized for specific account modification functions.\n  The chsh command allows you to quickly change the default login shel for a user. You must use the full pathname for the shell and not just the shell name.\n[edd@edwin ~]$ sudo chsh -s /bin/zsh test Changing shell for test. chsh: Shell not changed.\n  The chfn command provides a standard method for storing information in the comments field in the /etc/passwd file. Instead of just inserting random text, such as names or nicknames, or even just leaving the comment field blank, the chfn command uses specific information used on the UNix finger command to store information in the comment field. The finger commmand allows you to easily find information about peopele on your linux system.\n[edd@edwin ~]$ sudo chfn test Changing finger information for test. Name [Muraya Kamau Edwin]: Office [Personal]: Office Phone [Personal]: 0758874026 Home Phone []: 0758874026 Finger information changed.\n  You could use finger command to see all the information about all the users in the system.\n[edd@edwin ~]$ grep test /etc/passwd test❌1001:1001:Muraya Kamau Edwin,Personal, 0758874026,0758874026:/home/test:/bin/zsh  The chage command helps you manage the passwor aging process for user accounts. You need to set several parameters to individual values.  The chage data value can be expressed using one of two methods:\n A date in YYYY-MM-DD format A numerical value representing the number of days since january 1,1970  Using Linux Groups User accounts are great for controlling security for individual users, but they aren\u0026rsquo;t so good at allowing group of users to share resources .\nGroup permissions allow multiple users to share a common set of permissions for an object on the system, such as a file, directory , or device.\nLinux distribution differs somewhat on how they handle default group memberships. Some Linux distribution create just one group that contains all the user account as members.\nYou need to be careful if your linux distribution does this, because your files may be readable by all other users on the system.\nEach group has a unique GID, which like UIDS, is a unique numeriacal value on the system. Along with the GiD each group has a unique group name.\nThe /etc/group file Just like user accounts, group information is stored in a file on the system. The /etc/group files contains information about each group used on the system. These are examples from a typical /etc/group file on a linux system.\n[edd@edwin ~]$ cat /etc/group root❌0:root sys❌3:bin mem❌8: ftp❌11: mail❌12:  Like Uids are assigned using a special format. Groups used for system account are assigned GIDs below 500, and user groups are assigned GIDS starting at 500. The /etc/group file uses four fields.\n The group name. The group password. The GID The list of user accounts that belong to the group.  The group password allows a non-group member to temporarily become a member of the group by using the password. This feature is not used all that commonly , but it does exist.\n[edd@edwin ~]$ cat /etc/group root❌0:root sys❌3:bin mem❌8: ftp❌11: mail❌12: [...]  The record have the following informations.\n The group name. The group password. The GID. The list of user accounts that belong to the group.  The group password allows a non-group member to temporarily become a member of the group by using the password. This feature is not used all that commonly but it does exist.\nYou should never add users to groups by editing the /etc/group file. Instead, use the usermod command to add a ures account to a group. Before you can add users to different groups, you must create the groups.\nCreating new groups. The groupadd command allows you to create new groups on your system:\n[edd@edwin ~]$ groupadd shared groupadd: Permission denied. groupadd: cannot lock /etc/group; try again later. [edd@edwin ~]$ sudo !! sudo groupadd shared [sudo] password for edd:  When you create a new group, no users are assigned to it by default. The groupadd command doesn\u0026rsquo;t provides an option for adding user accounts to the group.\nTo add new users ,use the command usermod. [edd@edwin ~]$ usermod -G shared edd usermod: Permission denied. usermod: cannot lock /etc/passwd; try again later. [edd@edwin ~]$ sudo !! sudo usermod -G shared edd [edd@edwin ~]$ sudo usermod -G shared test  The shared group now has two members, test and rich. The -G parameter in usermode appends the new group to the list of groups for the user account.\n If you change the user groups for an account that is currently logged into the system, the user must log out and them log back in for the group changes to take effect.  Modifiying groups As you can see from the /etc/group file, you don\u0026rsquo;t need to modify much information about a group. The groupmod command allows you to change the GID (using the -g parameter) or the group name (using the -n parameter) of an existing group.\n[edd@edwin ~]$ groupmod -n sharing shared groupmod: Permission denied. groupmod: cannot lock /etc/group; try again later. [edd@edwin ~]$ sudo !! sudo groupmod -n sharing shared [sudo] password for edd:  After changing the name of a group, the GID and group members remain the same, only the group name changes. Because all securitly permissions are based on the GID, you can change the name of a group as often as you wish without adversely affecting file security.\nDecoding File Permissions. Now that you know about users and groups, it\u0026rsquo;s time to decode the cryptic file permissions you\u0026rsquo;ve seen when using the ls command.\nUsing File permision symbols The ls command allows you to see the file permissions for files, directoriefs and devices on the linux system.\n[edd@edwin ~]$ ls -la total 168K drwxr-xr-x 2 edd wheel 4.0K May 21 15:52 backup drwxr-xr-x 2 edd wheel 4.0K May 23 03:04 bash drwxr-xr-x 10 edd wheel 4.0K May 21 15:19 .cache  The first field in the output listing is a code that decribes the permissions for the files and directories. The first character in the field defines the type of the object.\n   for files   d for directories l for links c for characters devices b for block devices n for network devices  After that, you see three sets of three characters. Each set of three character defines an access permission triplets:\n r for read permission for the object. w for write permission for the object. x for execut permission for the object.  If a permission is denied, a dash appears in the location. The three sets relate the three levels of security for the object.\n The owner of the object. The group that owns the object. Everyone else on the system.  The easiest way to discuss this is to take an example and decode the file permissions one by one:\ndrwxr-xr-x 10 edd wheel 4.0K May 21 15:19 .cache  The directory .cache has the following sets of permissions:\n rwx for the directory owner (set to the login name edd). r-x for the directory group (set to the group name wheel). r-x for everyone eles on the system.    These permissions indicates that the userlogin name rich can read, write and excecute the directory.(consider full permissions)\n  The member of the group (wheel) can also read and excute without the write permission.\n  Anyone elec not in the rich group cna only read and execute the file; The dash indicates that write permissions are not assigned to this security level.\n  Default file Permissions. You may be wondering about where these file permissions come from. The answer is umask. The umask command sets the default permissions for any file or directory you create.\n[edd@edwin ~]$ ls -la | grep newfile -rw-r--r-- 1 edd wheel 0 May 23 11:56 newfile  The touch command created the file using the default permission assigned to my user account. The umask command shows and sets the default permissions.\nTo understang umask command you first need to understand the Linux file permission codes.\n   Permissions Binary octal Description     \u0026mdash; 000 0 No Permissions   \u0026ndash;x 001 1 Execute only permission   -w- 010 2 Write only permission   -wx- 011 3 Write and execute permissions   r\u0026ndash; 100 4 Read only permissions   r-x 101 5 Read and execute permissions   rwx 110 6 Read and write permissions   rwx 111 7 Read, write and execute permissions    Octal mode takes the octal permissions and list three of them in order for the three securitl level (user, group and everyone).\nYou could use one number to define the permission set of a user. but since we need three permission sets.\n user group others  The octal value 664 could represent read and write permissions for the (user and group) but read-only permission for everyone else.\nThe umask value is just that, a mask. It masks out the permissions you don\u0026rsquo;t want to give to the security level. Now we have to dive into some octal arithmetics to figure out the rest of the story\nChanging Security Settings Changing permissions. The chmod command allows you to change the security settings for files and directories. the format of the chmod command is:\n chmod option mode file  The mode parameter allows you to set the security settings using either octal or symbolic mode. Just use the standart three-digit octal code you want the file to have.\nThe symbolic mode permissions are not so easy to implement.\n-rw-r--r-- 1 edd wheel 328 May 22 13:14 xclip  Instead of using the normal string of three sets of three character, the chmod command takes a different approach.\n [ugoa...] [+-=][rwxXstugo...]  The first group of characters defines to whom the new permissions apply:\n u for the user. g for the group. o for other (everyone) else a for all of the above.  Next, a symbol is used to indicate whether you want to add the permission to the existing permissions (+), subtract the permission from the existing permission (-) or set the permissions to the value.\nThe third symbol is the permission used for the setting. you may notice that there are more than the normal rwx values here. These are the additional settings:\n X assigns execute permissions only if the object is a directory or if it aready had execute permissions. s sets the UID or GID on execution. t saves program text. u sets the permissions to the owner\u0026rsquo;s permissions. g sets the permissions to the group\u0026rsquo;s permissions. o sets the permissions to the other\u0026rsquo;s permissions.  Using these permissions looks like this.\n[edd@edwin ~/test]$ chmod o+x test [edd@edwin ~/test]$ ls -l total 0 -rw-r--r-x 1 edd wheel 0 May 23 16:11 test -rw-r--r-- 1 edd wheel 0 May 23 16:11 test1  To add a permission to a specific group. The o+r entry adds the read permission to whatever permissions the everyone security level already had.\nto remove permission to a specific group. The u-x entry removes the execute permission that the user already had.\nTo change ownership of even subdirectories The -R parameter performs the file and directory changes recursively.\nChanging ownership Sometimes, you need to change the owner of a file, such as when someone leaves an organization or a developer creates an application that needs to be owned by a system account when it\u0026rsquo;s in production.\nLinux provides two comamnds for doing that. The chown command makes it easy to change the owner of a file, and the chgrp command allows you to change the default group a file.\nThe format of the chown command is:\n chown options owner[.group] file  You can specify either the login name or the numeric UID for the new owner of the file:\nSimple. The chown command also allows you to change both the user and group of a file.\nIf you really want to get tricky, you can just change the default group for a file.\nThe chgrp command provides an easy way to change just the default group for a file or directory.\nThe user account must own the file, and be a member of the new group as well to e able to change the group. Now any member in the shared group can write to the file. This is one way to share files on a linux system.However, sharing files among a group of people on the system can get tricky.\nSharing Files Creating group is the way to share access to files on the linux system. For a complete file-sharing environment. When you create a new file, linux assigns the file permissions of the new wile uging your default uid and GID.\nThere are three additional bits of information that linux store for each file and directory.\n The set user id(suid): When a file is executed by a user, the program runs under the permissions of the file owner. The set group id(SGID): for a file, the program runs under the permission of file group. The sticky bit: The file remains (sticks) in memory after the process ends.  Managing Filesystems One decision you\u0026rsquo;ll need to make is what filesystem to use for the storage devices. Most linux distribution kindly provides a default filesystem for you at installaiton time, and most beginning linux users just use it without giving the topi another thought.\nExploring Linux Filesystems Linux uses a filesytem to store files and folders on a storage device. The filesystem provides a way for linux to bridge the gap between the one and zeroes stored in the hard drive and the files and folders you work with in your applications.\nLinux support several of filesystems to manage files and folders. Each filesystem implemets the virtual directory structure on storae devices using slightly different features.\nUnderstanding the basic linux filesystems. Looking at the ext Filesystem The original filesystem introduced with the Linux operating system is called the extended filesystem or just ext for short.\nIt provides a basic unix like filesystem for Linux, using virtual directories to handle physical devices and storing data in fixed length blocks on the physial devices.\nThe ext filesystem uses a system called inode to track information about the file store in the virtual directory. The inode system creates a seperate table on each physical devices calle the inode table to store information. Each stored file in the virtual directory has an entry in the inode table. The extended part of the name comes from the additional data taht it tracks on each file, which consist of these items.\n The filename The file size The owner of the file The group the file belongs to Access permissions for the file. Pointers to each disk block that contains data from the file  Linux references each inode in the inod table using a unique number(called the inode number), assigned by the filesystem of data files are created. The filesystem uses the inode number to identify the file rather than having to use the full filename and path.\nCreating a partitions To start out, you need to create a partition on the storage device to contain the filesystem. The partition can be an extire disk or a subset of a disk that contains a portion of the virtual directory.\nThe fdisk utility is used to help you arganze partition on any storage device installed on the system.\nTo start the fdisk command, you need to specify the device name of the storage device you want to partition and you need to have superuser privileges.\nThe fdisk commands    command Description     a Toggle a flag indicating if the partition is bootable.   b Edits the disklable used by BSD unix systems.   c Toggls the DOS compatibility flag.   d Deletes the partition.   l lists the availble partition types   m Displays the command options   n Adds a new partition   o Creates a DOS partition table   p Displays the current partition table   q quits without saving changes   s Creates a new disklable for Sun Unix systems   t Changes the partition system ID   u Changes the storage units used   v Verifies the partition table   w Write the partition table to the disk   x Advanced functions    Although this list may look big, you need just a few basic commands in day-to day work.\nFor starters, you can display the details of a storage device using the p command.\n","description":"Bash CLI from Zero to Hero!. The basic of linux system and the command line.","id":19,"section":"workshops","tags":["cli"],"title":"Learn Basic CLI Concepts","uri":"https://eduuh.github.io/blog/workshops/bash/bashcli/"},{"content":"Introduction Visual Studio code is superb. If offers unparalleled user experience with great support for many languages and development ecosystems. It comes with great defaults and is super easy to use and to get started with.\nVim is awesome. Its modal nature and text editing features makes it unique amongst other editors. Vim offers a complete different level of text editing proficiency, speed and accuracy from anything else out there.\nThe combination of both couldn\u0026rsquo;t be anything less than amazingly superbsome (yep, I just did that)\nYou will boost your visual studio editing skills incredibly. By combining the strengths of vim and visual studio code, you will be able to make the interface between your brain and the computer ever so thin, making your thoughts seamlessly materialize into code.\nHere si what we\u0026rsquo;re going to cover in this post.\n What is vim ? And why use Vim in VSCode? Basic Surviving vim in Vscode? Moving Blazingly Fast with Core vim Motions. Editing at the Speed of thought with vim operators and motions. Vim\u0026rsquo;s secret language. Inserting text In vim. Selecting Text in visual mode. Copy and Pasting Taking advantage of Registers. Surrounding things with vim surround. Moving Even faster with the Sneak and EasyMotion Plugins. Creating custom shortcuts to make you more effective. Creating Reusable Editing Units with Macros. Integrating Vscode with Neovim for Maximu Awesomeness.  At the end of this book you\u0026rsquo;ll be capable of fine grained text manipulation and powerful text transformations that were previously unreachable to you. And over time , and as you practice and get comfortable with different vim commands, you will become faster and more proficient at editing than you were ever before.\nI will not assume any prior vim knowledge so don\u0026rsquo;t worry\nif you aren\u0026rsquo;t familiar with vim.\nWhat is ViM? Vi is an ancient text editor. Old even befor the first age of the world. It was designed to work on contraptions called terminals with the very uncommon yet inspired characteristic of funtioning in a modal fashion. That is, it has a mode for inserting text another for editing text a different one for selecting text, and you get the gist.\nVi\u0026rsquo;s latest and most celebrated incarnation is Vim(VI improved and formarly VI Imitation) which works both with text and graphical interfaces, comes with a plethora of improvements over vi and is supported on every platform known to humankind.\nBut the impact of vim doesn\u0026rsquo;t stop wit vim, VIM\u0026rsquo;s ideas are so very remarkable that they have transcended the vim editor itself and propagated into other editors. Today you can find vim like modes in almost any editor and ide that you can imagine. Like, appropriately, in Visual Studio Code.\nWHY VIM? IsN\u0026rsquo;t Visual Studio Enough? Why should you care about learning about an ancient editor in this day and age? Does it really make such a big difference to my visual studio code setup?\nThe truth is that vim Provides a different way of interating with text. A way that gives you a completely different level of control and fluncy when editing code\nAt the hands of an experienced user, editing text with vim seems like magic\n vim makes you faster. vim makes you more precise. vim unlocks a completely different level of control in text editing. vim thins the interface between your brain and the computer. It is awe-striking to behold when doing presentations.  Awesome! That sounds very good and all that .. but how can vim achieve all this? The answer is modes.\nVim\u0026rsquo;s modal nature empowers your keyboard to control every aspect of your editor. Every modes is a clean slate that gives your keyboard new powers, to edit text at lightning speed, navigate at the speed of thought, select and move text to your heart\u0026rsquo;s content, and more.\nWith vim , you\u0026rsquo;re no longer limited to inserting text nor subject to the tyranny of the mouse to click, navigate or select text. No after using vim for a while, you\u0026rsquo;ll be like a code surgeon that makes expert incisions with surgical presion whenever and wherever it is required, navigating through your code and codebase with the lightning speed and accuracy of a entirely keyboard driven workflow.\nSo Why would you want to learn vim in this day and age?\nVim is For programmers who want to raise their game. in the hands of an expert, Vim shreds text at the speed of thought.\nWhy vim in Vscode and not Just ViM? You may be wondering .. ok. If vim is so good then.. Why not just use Vim instead of vim inside Visual Studio code?\nGreat Question! The truth is that setting vim to work with a feature set similary to modern text editors is not a trivial task. Features like code completion, code navigation, in-editor error messages , etc, althoudh supported by vim don\u0026rsquo;t work perfectly out of the box.\nVisual Studio code and vim together offer a very sweet spot that balance the ease of setup and super rich development user experience of visual studio code with lots of amazing features present in vim.\nThe translation is not yet perfect thoudh. And if you\u0026rsquo;re an expericed vim user you may find some features missing.But all in all, Vscodevim offers a very pleasant vim experience outside of vim.\nA brief not about the conventions Used here. Since alot of what happens in vim depends on the location of your cursor, I\u0026rsquo;ve used a series of diagrams that shows the position of the cursor changing over time as you type commands. And since it is quite unconventional from other programming material. I think yo\u0026rsquo;ll find it helpful to have it explained so you\u0026rsquo;re prepared before you encounter it for the first time.\nThat means the following:\nso:\n The text word. is two words is the text that is inside your editor which is subject to change or navigation. You type thec command W succesively (in this case 4 times) Every time you type the command, you move the cursor (represented by V) to a new location.  At times, it will be helpful to compare how two commands perform when applied to the same bit of text. In those cases I\u0026rsquo;ve used the following diagrams:\nWhere the bottom part is similar in meaning to the top part we discussed earlier but for the fact that the cursor is represented by a ^ instead of V\nwhen explaining commands we\u0026rsquo;ll pay heed to the following conventions. For operations and motions\nWhe constructing and applly text objects:\nAn ex-commands\nInstalling Vim Inside Visual Studio Code. In order to bring the awesomeness of vim inside visual studio code you\u0026rsquo;ll need to install the VscodeVim plugin:\n Open Visual Studio code Go to Extensions Type Vim in the search box. The first plugin named VIM is the one you want (VSCodeVim). click on the install button. Epic victory!  After Visual Studio Code finishes installing the extension,you need to restart it for the changes to take effect. latest-vscode\nHave you restarted it?\nExcellent! Open a code file from your latest project and look at the cursor. Does it look like a rectangle? Yes?\nThen, Welcome to Vim!!\nAre you using the VSCODE command Palette? If you aren\u0026rsquo;t you definitely should. Type CMD-SHIFT-P on windows and linux and you\u0026rsquo;ll be brought to the command palette. From here you can access almost any functionality within Visual Studio code by just typing.\nFor instance, type extensions and select Show Extensions to go the extensions tab. Awesome right? Type around and see if you can find things you typically use in your daily workflow.\nMastering shortcuts like ctrl-shift-p to open the command palette, or like ctrl-p to go to a file are essential is developing a keyboard centric workflow and enhancing your productivity in visual studio code. So learn them, and use them.\nBaby Step in Vim Rectangle Shaped cursor.. Curious! If you try to type right now you will be surprised to see that notheng happens. Or to be more precise, nothing that you would have expected to happen, happens.\nAs you type on the keyboard, there are no characters being reflexted on the screen. In fact , it is likey that in your typing, you\u0026rsquo;ll stumble upon some special meaning command that will either send your cursor flying around the screen or even delete or edit some code.\nAll of this weird and unexpected behaviour is the result of Nornal mode, the default mode in which you intercat with code in vim. And in, normal mode one does not insert text.\nso what is Normal Mode? and , moreover, **What does mode even mean?\nModes in Vim Modes are on of the most important and impactful design decisions in vim, so it pays off to spend a little bit of time to really understand what modes mean and how they affect the vim developer experiece.\nVim modes follow the same principle of wearing the right hat for the right situation. Depending on the tast at hand, you may (figuratively) wear the right hat best adapt your way of thinking, behavior and mindset to that situation. For instance, if you wear an explorer cap that bring forth you exploratory mindset.\nVim editor has different modes that best adapt to fulfilling different tasks. For example, these are three of the most common modes in vim:\nModal Editing.\n| modes | Action |\n|\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026ndash;|\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;|\n| Insert Mode | Type text and Stuff |\n| Normal Mode | Edit text and Navigate |\n| Visual Mode | Select Text and Edit it |\nJust like wearing the right hat, when using vim you\u0026rsquo;ll use the insert mode when your goal is to insert text. you\u0026rsquo;ll use Normal mode when your goal is to edit text or navigate through your codebase, and you\u0026rsquo;ll use visual mode when you want to select some text.\n In Insert mode you will type the letter w, just like in any other editor. In Normal mode you\u0026rsquo;ll move the cursor to the beginning of the next word. In Visual mode you will Select text up until and including the beginning of the next word.  So what do we gain from Vim being a modal editor?\nThanks to the existence of modes, the keyboard becomes a blank slate in every different one of them. Which means that vim is free to entirely adapt the keyboard to be the most effective to perform the task at hand, having your desired functionality right at your fingertips.\nyes. You are in Normal Mode. In this mode you don\u0026rsquo;t insert text. Instead you move around and edit it. This design decision stem from the realiztion that we spend far more time reading, navigating and changing code that we do inserting it in the first place\nNormal Mode So Normal mode can feel like a hostile place at first, as typing any key can and will result in unexpected behaviour. So it helps to come into Normal mode with a little preparation. These are the very basics you need to survive and start buiding your vim skills:\n Move around with the hjkl keys. Go into Insert mode with i where you can type stuff as usual. Go back to Normal mode with ,  or \u0026lt;CTRL-[\u0026gt;  The Most Basic of Vim MOTIONS hnei are the core and most basic motions in vim. They allow you to move the cursor by one space in every direction:\nThey are not the most effective, nor the most efficient way to move around in vim.But they do give you agility and confidence to move around a file in normal mode. Leaning to walk, or learning to ride a bike.\nAfter you get comfortable with more vim motions you won\u0026rsquo;t use hjkl as much, but they\u0026rsquo;ll come very handy for short-distance movements and small corrections.\nFrom Normal Mode to Insert mode and Back The l lets you go into insert mode after the cursor. Af the beginnign of your journey into vim, you can see l as a escape hatch into sanity.\nMapping your Caps Lock key to control One thing that comefs super handy when using vim (and any other editor for that matter) is to remap your caps lock key ot control.\nDoing this means that you can easily reach a very commonly used key in programming such as Control form the confort of the home row. You just need to stretch that pinky finger out to the left half a centimeter and you\u0026rsquo;re there.\nCheckout my remaping for control to a smartkey to function as control key when pressed together with a second key and as escape when pressed alone.\nAn Important note for Windows and Linux users. Wait  to get back to Normal mode? isn\u0026rsquo;t that what i\u0026rsquo;ve been using all my life to copy stuff???\nInstalling VScodeVim has a couple of side-effects. One is that\nyou get that weird squarish thingie cursor we have just discussed, and the other is that some commonly used keys are remapped to their natural funciton in the land of vim.\n  no longer copies, and instead it sends you back to normal mode. The command that we use in vim for copying is far less verbose : y(for yank).  no longer pastes and insteads sends you into visual block mode. Again the command we ues in vim for pasting in less verbose: just a single P (for paste).  no longer lets you search, and instead it allows you to scroll your screen one page forward. Once more, the command we use in Vim for searching is closer to your fingertips:/{term-i-am-searching-for}.  depending on how adventurous you are and your tolerance for discomfort, you may want to keep your keys as they are right now rather than continuing with the changes done by vim. If you feel like you want to disable these remappings for the time being, you can use these two VSCodeVim configurations:\n vim.useCtrlKeys enables and disables the remapping of CTRL keys . Sef it to false and the keys for copy, pasting find, etc will revert back to vscode default. Set it true and vim will take over. vim.handlekeys gitev you a more granular control as to which mappings you can enable or disable. It is a dictionary or key/value pairs, where the keys is the key combination you want to enable/disable and the value is a boolearn flag that represent whether vim is enabled for htat key comination or not .  Summary When you install VSCodeVim your VSCode editor will become a slightly stranger place. Vim relies on modes to make you more effective and the default mode in vim in ** Normal mode** a mode where you don\u0026rsquo;t type text on the screen.\nNormal Mode is optimized for text editing and navigating your codebase. We often spend more time editing and exploring code that we do inserting it from scratch, so that\u0026rsquo;s an ingenious desigh decision. Still, it can feel quite daunting at first, so it\u0026rsquo;s helpful to know some of the keys you can use to get a basic level of autonomy.\n. Use hnei to move around.\n. Use l to go back to insert mode where you can act as-if you\u0026rsquo;re in vanila VScode and type away.\n. Use ,  or \u0026lt;CTRL-[\u0026gt; to go back to Normal mode.\nMoving Blazingly Fast With Thec Core Vim Motions. **Motions (as in movements) are how you move around in vim. they are commands that when typed move the cursor around with high speend and precision. there are many of them, and each one is best suited for different types and lengths of movements.\nMove Horizontally Word by Word Word motions let you jump from word to word in either directions from left to right or right to left). As such, they allow you to move faster than the basic horizontal motions h and l.\nYou can use the w(word) command to jump to the beginning of the next word like so:\nLikewise , you can:\n Use b (back) to jump to the beginining of word backwords. use e (end) to jump to the end of a word. Use ge to jump to the end of word backwords.  Learn Commands with the help of mnemonics. Vim has a humongous amount of commands. In time, when you become an experienced vim user, the command will become second natuer, reflexive and automatic. At the beginning though, youll need to learn them one by one.\nA great way to learn vim commands is by usind mnemonics like associating a letter to a word that is easier to remember. For instance, you can remember that w lets you move from word to word by associating it with Word, or that b lets you move word to word backwords by associating it with back.\nWords and Words So w, b, e and ge let you move word by word in vim. But what is a word exactly? A word in vim is either.\n A sequence of letters, digits and numbers. A sequence of other non-blank characters.  But Vim also has the concept of special kinds of words (with letters, digits and numbers) that also include special characters like . , () {}. They are called WORDs in vim jargon:\nWORDs are particularly helpful to us programmers because code often has a lot of them.\nIf you want to move WORD by WORD you can use the capitalized equivalents of the motions described earlier B,E,gE).\nIn general, Word motions allow for more precise changes while WORD motions allow for faster movements\n wwww ==\u0026gt; v v v v v word. are two words word. is one WORD WWW ==\u0026gt; ^ ^ ^ ^  Move to A specific Character Find character motions let you move horizontally quickly and with high precision.\n Use f{character}(find) to move to the next occurrence of a character in a line. For instance, f\u0026rdquo; sends you to the next occurrence of a double quote. If your target is behing the cursor you can use *F{chacter} to fing the previous occurrence of a character.  Moving Horizontally We can clearly see how f is faster and more precise than usind word motions by pitching one against the other in an example:\nf( ==\u0026gt; v v const fireball = function(target){ wwww ==\u0026gt; ^ ^ ^ ^  in addition to f vim also offers the t(until) command:\n. Use t{character} to move the cursor just before the next occurence of a character (think of *t{character}**) of moving your cursor until that character.\n. Again, you can use **T{character}** to do the same as t{character} but backwords.\nIf the different between the f and t command isn\u0026rsquo;t quite clear yet, here\u0026rsquo;s an example that compares both of them.\n t( ==\u0026gt; v v const fireball = function(target){ f( ==\u0026gt; ^  t is really useful when you combint motions with operators to perform text changes as you\u0026rsquo;ll soon discover(for instance, you could delete evelything until ( and change it for something else.)\nAfter using f{character} you can type ; to go to the next occurrence of the character of , to go to the previous one.\nYou can see that ; and , as commands for repeating the last character search. This is nice because it saves you from typing the same search over and over again.\n fdfdfd ==\u0026gt; v v v v let damage = weapon.damage * d20(); let damage = weapon.damage * d20(); fd;; ==\u0026gt; v v  On Notes , Melodies and Chords. Vim is quite special. If you have used other editors you\u0026rsquo;re probably accustomed to typing chords of keys that is, typing a combinataion of keys at the same time.\nFor instance, Ctrl-c to copy and ctrl-v to paste. Although vim is no stranger to chords, it relies even more on melodies of keys.\nA melody is a series of notes played one after the other. If you think of keys as notes, then melodies of keys are keys that are pressed one after the other in rapid successsion. So, when you read that you need to type f{character} to find a character in a line, it means that first you type f, and then you type the character {character}. These two keys are , thus played as a melody\nUsing melodies of keys is the most common way in which you interact with vim. And, althoudh unfamiliar and kind of stande, it is vey conveniet because controlling the editor suddenly feels like you\u0026rsquo;re just typing text. It is also marvellous for your wrists health because you no longer need to rely of complex and unnatural key combintations that strain ou poor joints[^joint].\nMove horizontally extremely To Move extremely horizontally use:\n 0: Moves to the first character of a line ^: Moves to the first non-blank character of line $ Moves to the end of a line g_: Moves to the non-blank character at the end of a line  Moving Vertically Starting from k and j we move on to a faster way of maneuvering vertically with:\n } jumps entire paragraphs downwards. { similaryl but upwards. CTRL-d lets you move down half a page by scrolling the page. ctrl-u lets you move up half a page also by scrolling .  None of tese are my favorites but they\u0026rsquo;ll do for the time being. In the custom mappings chapter, you\u0026rsquo;ll learn how to create a custom key binding for the ultimate mid-range vertical motion.\nHIGH Precision Vertical Motions with Search Pattern. To move verticall even faster when you have a target in ming, your best option is to search fro that target with the **/{pattern} and ?{pattern} commands:\n Use /{pattern} to search forward inside a file. Us ?{pattern} to search backwords.  Where the {pattern} fragment will often be a string literal (the name of a method, class or variable) but can also be regular expression.\nWhen you start typing the search pattern, text within a file that matches your pattern is highlighted As you continue typing te pattern, the highlighted areas will be updated and reflect the new matches. When you find what you are looking for, type  and your cursor will jump to the first match in the document. There you can perform some editing if you watn and later use n to jump to the next match (or N for the previous one). you can thike of n as repeating a search.\n Enabling highlighted search  For some reason unbeknownst to me, highlighted search isn\u0026rsquo;t enabled by default in vscodevim. To remedy that, go to preferences and enable the vim:hlsearch option (or, alternatively, use vim.hlsearch) in the json version of the configuration).\nVim loves saving you time: Type / or ? anytime to run the last search (forwards or backwords.). Or use * to do a search for the word under the cursor (# to do the same backwords.\nMoving faster with Counts Counts are numbers which let you multiply the effect of a command. You can use them by prefixing any command with a count like so:\n {count}{command}  for instance\n 2w allows us to move the cursor 3 words forward. 5j changes your curso position to 5 lines below. 3; lets you go to the next third occurrence of a character. 2/baby sends you flying to the second occurrence of baby in a document.  In general, use **{count}{motion} to multiply a motion {count} times.\nRelative line numbers A great way to move vertically within vim is by using counts in combinations with the j and k motions. But sometimes it can be hard to know how many lines you need to jump to get to the desired position. That\u0026rsquo;s where relative line numbers can come in quite handy.\n**Relative line numbers show line numbers in relation to your current line: if the current line is where your cursor is resting, the line below would have line number 1, the next one lne number 3, and so on. Using relative line numbers, it is very straightforward to see how many lines you need to jump to get to where you want to go.\nYou can enable relative line numbers in your vscode configuration by going to preferences (Remember! Use the command pallette with Ctrl-shift-p or ctrl+shift-p), searching for the _line number configuration and setting it to relative.\nMoving Sematically In addition to the previous motions which don\u0026rsquo;t really take into account the meaning of your code, Vim offers additional binding that take your code sematics into considerations:\n Use gd to jump to definition of whatever is under your curson. Use gf to jump to a file in an import.  And Some More Nifty core motions These are yet more motions that can come in hangy from time to time:\n Type gg to go to the top of the file. Use {line}gg to go to a specific line. Use G to go to the end of the file. Type % jump to matching ({[]})  Summary Motions are commands that lets you move around in vim with high speed and precision. They are composed of one of more keys typed as Melodies. They let you perform different types of movements with various lengths and degree of .\nFind character and search motions have repeaters (n,;) that let us repeat the last search by typing just one character. We can use them to jump from match to match in eithe direction very quickly.Train yourself to rely on repaters,and you\u0026rsquo;ll become the more effective for it.\nYou can combine counts with motions for greater effect.Our brains are slow at countiong so you should limit the use of counts only to short jumps. When using counts with vertical motions it is nice to enable relative numbers becaues they give you a clear reference to your target. Consider enabling relative number if you haven\u0026rsquo;t already.\nNow let\u0026rsquo;s move onto another foundational block in vim that will allow you to edit text like if by art of magic. Operators.\n This is great if you\u0026rsquo;ve experienced carpal tunnel syndrome or other wrist joint problems. Also do yourself a favor and get a nice ergonomic keyboard. You\u0026rsquo;re in this for the long haul.  Editing Like magic With vim Operators. Motions aren\u0026rsquo;t just for moving. They can be used in comination with a series of commands called operators to edit your code at the speed of lightning.\nYou can use operators and motions together by following any of these patterns:\n{operator}{count}{motion}\n{count}{operator}{motion}\n The operator determines which action you want to perform: deleting, changing, yanking, formatting, etc. The count allows you to multiply the effect of an operator by performing on action a count number of times. The motion represent the piece of text to which to apply the action defined by the operator.  For instance the d2w combinations allows you to delete two words.\nd corresponds to the delete operator. Since d is an operator, you can follw the {operator}{count}{motion} formula and combine it with all the motions you\u0026rsquo;ve learned thus far:\n Use d5j to delete 5 lines downwords. Type df\u0026rsquo; to delete everything in the current line from the cursor until the first occurrences of the ' character. Or type dt\u0026rsquo; to do like the above example but excluding the character (so up until or just before the ' character) Or type dt\u0026rsquo; to do like the above example but excluding the character (so up until or just before the ' character). Use d/hello to delete everything until the first occurrences of hello Type ggdG to delete a complete document.  ** Useful Operators**\nIn addition to d, there\u0026rsquo;s a handful more of handy operators:\n  c(change): Change deletes a piece of text and then sends you into Insert mode so that you can continue typing, changing the original text into something else. The change operator is like the d and i commands commabined into one. this duality makes it the most useful operator.\n  y(yank): copy in vim jargon.\n  p(put): Paste in Vim jargon.\n  g~ (swithc case): changes letters from lowercase to upppercas and back. Alternatively, use gu to make something lowercase and gU to make something uppercase.\n  *\u0026gt;(shift right): Adds indentations\n  \u0026lt; (shift left): Removes indentation\n  = (format code): formats code.\n  you can use these operators much like you used delete so that:\n c/hello change everything until the first occurences of hello. ggyG copies a whole document *gUw capitalizes a word.  Operator shorthand Syntax All these operators provide additional shorthand syntax aimed at saving you typing and inceasing your speed with common editing tasks:\n double an operator to make it operate on a whole line:* dd delets a whole line, c changes a whole line, etc. Capitalize an operator to have it perform a stronger(or altenate) version of the behaviour.  D delets form the cursor to the end of line, C changes to the end of a line. Y line yy copies a complete line, P pastes something before the cursor.    Noticed How command KEYS make a lot of sense? Operators, motions and other commands in vim are generally easy to learn becaues they make sense and are easy to guess. Want to change something? You probably want to use the c(change) operator. Want to move word by word? Try w(word). Want to delete something? Try the d(delete) operator and so on.\nOperators really shine when we combine them with a special class of motions called text-object.\nTAking Editing up a Notch With Text Objects. Text object are structured piece of text or, if you will, the entities of a doucment domain model. What is a document composed of? Words, sentences, quoted text ,paragraphs, blocks, (HTML) tags,These are text objects\nThe way that you specify a text object within a command is by combining the letter a (a text object plus whitespace) or i(inner object without whitespace) with a character that represents a text object itself:\nText Objects {operator}{a|i}{text-object}  The built-in text-objects are:\n.\nCombining text object with operators is extremely powerful and you\u0026rsquo;ll find yourself relying on them very frequenty. Stuff like cit, ci\u0026rdquo; and cib is just brilliant.\nLet\u0026rsquo;s say that we want to change the contents of this string elow for something else:\n const salute = 'Hi!'  you type ci\u0026rsquo;I salute you oh Mighty Warrior! and it becomes\n const salute = 'I salute you oh Mighty Warrior'  just like that. You don\u0026rsquo;t need to go grab the mouse, select thex text and then write something else. You type three letters and Boom! you\u0026rsquo;re done.\nNoticed How Most vim Keys are Placed Near Youw Fingers? The fact that vim has modes allows keys near the home row to be reused in each separade mode. This design decision minimizes the need for slow and contorted key combinations, and heightens your speed and the longevity of your fingers and wrist. This is awesome!\nRepeating the last change with the dot Operator. Vim has yef another trick in store for you aimed at saving more keystrokes: The magic . (dot) command.\nThe . command allows you to repeat the last change you mage. Imagin that you run dd to delete a line of code. And now let\u0026rsquo;s say that you\u0026rsquo;ve warmed ut to removing code. Remoding code is good, the less code you have the less code you need to maintain. So let\u0026rsquo;s remove another line of code.\nHow would you go about that? You could type dd again but even better, you could use the . command which is just a single keystorke.\nOk. you save one keystroke, so what (Tough crowd here I see). Well, you can use the . command to repeat any type of change, not just a single shorthang command like dd. For instance, you could change a word for Awesome like so \u0026lsquo;cawAwesome\u0026rsquo;, and then repeat that whole command with all those keystokes by just typing a single dot. Thike of the possibilities.\nThe . command becames even more useful if you get in the habit of using Text-Object. Text-object are more reliable that other motions because you don\u0026rsquo;t need to care as much when te cursor is positioned.Thus, commands with text objects are far more repeatable and therefore work beautifully in tandem with the . command.\nMore Shorthand Text editing commands In addition to the operators you\u0026rsquo;ve learned in this chapter, vim offers a series of shortcuts to operate on single character that can be useful on occassion. They are:\n x is equivalent to dl and deletes the character under the cursor. X is equivalend to dh and delets the character before the cursor. s is equivalent to ch, deletes the character under the curso and puts you into insert mode ~ to switch case for a single character.  As usual, all of the above support counts to operate on multiple characters at once.\nUndoing and Redoing Sooner or later it will come a time when you will make a mistake. Admit it! You ain\u0026rsquo;t perfect. Nobody is. And that is alright. You needn\u0026rsquo;t worry though, because Vim has your back.\n Type u and you\u0026rsquo;ll undo your last change. Type ctrl-r and you\u0026rsquo;ll redo it.  Summary Motions aren\u0026rsquo;t just for moving. Used in combination with operator they let you perform operations on text with ease and amazing speed. You apply an operator on a motion by using the kuy melody {operator}{motion}.\nSome of the most useful and common operators are :d(delete), c (change), y yank (copy) and p for put (paste).\nWhen you double an operator you make it operate on a line. You can use dd to delete a complete line. In a similar fashion when you capitalize a command it performs a stronger(or alternate) version of the original command. For example, D deletes from the cursor to the end of a line.\nCounts also work with operators. You can multiply the effecs of an operator motion combo by using a count like this :\n {operator}{count}{motion}  Text object are special motions that describe the parts of a documents: words, sentences, paragraphs and such. They are incediblu useful n combination with vim operators.**Using operators with text-object you can be very precise and command vim to delete a word, or change the inside of a string or code block.\nText object offers two variants: the a(thinke a or all) and i (think innner) that allow you to operate on a text object plus surrounding whitespace or only on the inner parts of a text object respectiverly. For example, using da\u0026quot; deletes a complete quote including trailing whitespace, using di\u0026rdquo; only deletes whatever is surrounded by quotes.\nThe dot command . lets you repeat the last change and as such, it is one of the most useful repeater commands. Operations on text-object are greate candidates for the dot operator becausee they are more repeatable.\nA great way to take advantage of the dot command is by using it is combination with searches. When you do that you can apply changes of successive searches with just two keystrokes: n or ; to find the next match and . to repeat the last change.\nSometimes you\u0026rsquo;ll make a mistake. When that happens, you can udo the last change with u command. If you change your mind or undo too fas type ctrl-r to redo.\nVim\u0026rsquo;s Secret Language As you may have noticed, all the vim operators, count and notions that you\u0026rsquo;ve learned make up a (programming) languate of sorts. You can think of operators as functins and count and motions as arguments, or usng an even simpler analogy.. You can thike of operators as verbs, counts as adjectives and motions as objects.\nThe true magic of vim is composition As you go building up this vocabulary of operators and motions you will find that you can combine them to your heart\u0026rsquo;s content. Just like you would with the word of a spoken language.\nso that, once you know all about the cq, caw, ciw , ct. of the world, and you go and learn how dl works, you\u0026rsquo;ll not only be able to use dl. No. You\u0026rsquo;ll instantly know that you can also combine the d operator with all the vocabulary of motions you already have at your disposal and daw, diw,dt untill the end of times.\nThis is very cool When using vim you\u0026rsquo;ll feel you are navigating a metauniverse of text editing, it\u0026rsquo;s like programming or controlling the very mechanism of editing and writing text, If you\u0026rsquo;re familiar with git and how it feels to use the git command line to work with source control, you can thinke of vim as the git of text editing.\nWith vim, you\u0026rsquo;ll look at a piece of text and you\u0026rsquo;ll no longer see just words or text, you\u0026rsquo;ll see the possibliities of an infinite number of operators and motion being.\nInserting Text Ala Vim Before you edit a program someone needs to write it and that someone may be you. In vim, you write code in insert mode. You\u0026rsquo;ve seen little bit of insert mode when using the c command but let\u0026rsquo;s dive into this mode some more.\nThere\u0026rsquo;s two core commands that put you into insert mode:\n i for insert and a for append  The i insert command puts you in insert mode before the cursor.While the a append command puts you in insert mode after the cursor (as if to append stuff wherever the curson\nr is placed). From then on you\\re in insert mode and vim pretty much behaves like any other editor.\nLie with many other vim commands i and a have uppercase counterpart that do stronger version of inserting and appending.\n I puts you in insert mode at the beginning of the current line whilst, A puts you in insert mode at the end.  In addition to i and a, there are another three super useful commands that I love to use to drop into Insert mode.\n o inserts a new line below the current one and drops you Insert mode(mnemonic open a line mode). O insert a new line above the current one and also drops you into insert mode. gi puts you into insert mode at te last place you left Insert mode. This is great if you drop from insert mode by mistake and want go go back where you were and continue typing.  Ok. So let\u0026rsquo;s say that you are now in Insert mode, typing away and you make a mistake (ouch!). Something like a typo. Do you go back to normal mode, fix the typo and go back into insert mode? Please no!\nsometimes. Oftentimes , it is faster to just delete the incorrect letter or words and type again. There\u0026rsquo;s a couple of key bingings that let you do that right from within insert mode\n ctrl-h lets you delete the last character you typed. ctrl-w let you delete the last word you typed. ctrl-u lets you delete the last line you typed.  Eventually you\u0026rsquo;ll want to exit insert mode and do other stuff. There are three ways to do this:  , ctrly -[ , ctrl-c. Of all these, the easiest one type is ctrl-c so start by using that one.\nSelecting text In Visual Mode. Visual Mode is the vim equivalent to selecting text with a mouse. But instead of a using a slow mouse, you\u0026rsquo;ll select your text by relying on the speedy vim motions. As you select text in visual mode. This visual feadback makes visual mode specially useful whenever you feel the need to be extra precise before performing an action.\n v for visual mode character-wise. this mode lets you select text character by character. V for visual mode line-wise. This other one lets you select text line by line.  for visual mode block-wise. This last mode lets you select text using rectangular blocks.  Visual mode can be very helpful for copying and pasting stuff and when operating on blocks of text or code where you feel you need that extra visual feedback.\nIn Normal Mode you first define the operator and then a motion that represents some text to which to apply that operator.\n {operator}{count}{motion}  In Visual mode, however , you select the text first and then you type the operator.\n {trigger visual mode}{motion}{operator}  So, in order to delete the following two lines:\n lines filled with mambo jambo. that totally deserved to be deleted from existence.  You could either type d2s in Normal mode or:\n Go to line-wise visual mode with V which selects the current line. Press j to go down one line and thus selecting it. Now you\u0026rsquo;ve selected both line you type d and they\u0026rsquo;re gone. Forever. Bye lines of text. You lived a good life.  Visual mode is often slower that using commands directly in Noraml mode but you\u0026rsquo;ll have that extra visual aid that gives you assurance that you\u0026rsquo;re applying a command exactly where you want it applied\nSwitfly Operating on search Matches. Type n to repeat a search. Type . to repeat the last change. Use a combination of both repeat the last change. use a combination of both repeat the last change. Use a combination of both n and . and you can apply the same change on every single search match with just two keystrokes. Two keystrokes. That\u0026rsquo;s fast.\nBut what if i told you there\u0026rsquo;s a faster way?\nLet\u0026rsquo;s say we are in the market for destroying cucumbers. We are deadly.\n cucumber carrot lettuce cabbage carrot lettuce cucumber cucumber cucumber carrot kale cucumber kale  A way to go about this would be to:\n Locate the cucumber with /cucumber Destroy the cucumber with daw Type n to go to the next target. Terminate it by repeating the last change with the . command. Repeate from step 3 until all cucumbers have been terminated. collect reward.  It turn out that there\u0026rsquo;s an even more effective way to perform operations on search matches. gn and gN. You can see these two motions as supercharged version of n and N.\ngn works as follows:\n If you are on top of a search match, it selects the match in visual mode If you are in visual mode, it extends your current selectinon until the end of the next match. (and the best part) if you are in Operator-pending mode, it operates on the next match.  What does this all mean? it meant that by taking advantage of gn we can operate on the next match using just one keystroke. With gn the . command encapsulates the meaning of apply this change to the next match.\nPushing The boundaries of copying and Pasting *Copy and Paste**. You are probably accustomed to using your mouse to select some text ,copying or cutting it, and then pasting it somewhere eles. That\u0026rsquo;s it.Not so much to get excited about.\nVim makes copying cutting a tad bit more exciting by:\n giving you shiny operatory and commands you can use in combinations with all the motions you\u0026rsquo;ve learn thus far and by, Providing a handful of registers where you can save stuff for later which can enable interesting workflows and help you recover text when you delete it by mistake.  The two main commands for copying and pasting are y and p. Why use y to copy instead of c , you may wonder?\nYanking y is an operator. You can combine it with any of the motions and text-objects you\u0026rsquo;ve learned to yank stuff to your hearts desire.\n yl yanks letter, yaw yanks a word yas yanks a sentence ya( yanks everyting within ( and so on..  If you double y as in yy and get a linewise operator like with dd and cc and yank a whole line. The Y command also yanks a complete line. I prefer to use yy but feel free to choose whichever you want.\nPasting In order to paste things you use the p command and its variants.\n p pastes somethings after the cursor. gp same as p bug puts the cursor after the pasted selection. gP same as P and puts te cursor after the pasted selection.  Pasting in vim is kind of special and the behavior of p and P depends on whether you\u0026rsquo;ve yanked characters or lines. If you\u0026rsquo;ve yanked characters then pasting will put those characters after or before the cursor(no surprises there).\nMulti-copying and Cutting with Registers Registers are like a special clipboard where you can save multiple things at once. The following registers are super userful:\n The *unnamed register \u0026ldquo; is where you copy and cut stuff to. When you don\u0026rsquo;t explicitly specify a register. The default register if you will. The named registers a-z are registers you can use explicitly to copy and cut text at will. The yank register 0 stores the last thing you have yanked (copied). The cut registers 1-9 store the last 9 things you cut by using either the delete or the change command.  The named registers let you save bits of text for later pasting. you can explicitly save on a register by using the followind command.\n \u0026quot;{name of register}y{motion} \u0026quot;{name of register}d{motion} \u0026quot;{name of register}c{motion}  For instance, \u0026ldquo;ayas yanks a sentence and stores it in register a . Now if you want to paste it somewhere else, you can type \u0026ldquo;ap.. Alternatively,using the capitalized version of register i.e A instead of a appends whatever you copy or cut into that register.\nThe yank registers lets you have access to what you copied last via the y command. This is helpful because delets and changes don\u0026rsquo;t overwrite tis register like they do the unnamed register.\nThe cut registers give you access to the last 9 things you deleted or changed. This is great if there\u0026rsquo;s some text that you deleted earlier and which you want to recover.\nAt any point in time, you can use the :reg command to see what is in your registers. Or you can type :reg {register} to inspect the contents of a specific register.\nPasting in Insert Mode. All the commands we\u0026rsquo;ve seen thus far operate in Normal mode, what if you want to paste something when you\u0026rsquo;re in insert mode? Well you cat do tat as well. Using Ctrl-r{register} you can paste the contents of a register after the cursor:\n ctrl-r \u0026ldquo; pastes the contents of the unnamed register. ctrl-r a pastes the contents of register a ctrl-r 0 pastes te contents of the yank register.  This being vscode means that you can also rely on your system copy and pastng keys to paste text in insert mode. That will probably be the most convenient for you in the majority of cases.\nA final tip. Using insert mode to paste from a register removes the limitation of line-wise yanking and pasting. So using this method you can yank a like and then paste it just after the cursor. Now go and enjoy some real copying and pasting.\nControl vscode with Command Line Mode Command-line mode is yep anoter mode in vim. Its defining feature is the ability to run EX commands (commands that start with :) and search patterns (which start with / and ?).\nEx commands are very useful and diverse: some let you configure vim (:colorscheme), others allow you perform system-wide operations (like creating a new file with :edit), some others access external shell commands (:!), yet others lets you quickely edit multiple lines within a document with the wave of a hand (like :delete).\nWhy are they called Ex commands? Ex!? Such a strange name isn\u0026rsquo;t it? they are called Ex commands because part of Vim\u0026rsquo;s command line mode is based on an even more ancient line editor called Ex.\nVScodeVim has support for only a very limited number of Ex commands but they can be greatly enhanced by integrating VScodevim with neovim.\nTyping an Ex command A common Ex command is :edit. It lets you open or creating a file by typing:\n :edit {relative-path-to-files}  Notice the : before this command? Unlike Normal mode commands, Ex commands all start with a colon. It is typing this colon what triggers command-line mode and sets you up to enter a command.\nTo type an Ex command you literally type : followed by te name of the command (eg. :edit). When you type a colon and a command, the command will be displayed in the lower-left part of the screen on the vscode status bar\nLet\u0026rsquo;s try it!\ncreateg a new file by typing:\n :edit hellow.js  You should see how, as you type a colon (:) and the name of the command, a cursor and letter materialize at the bottom of te screen inside the status bar.\nwhen you finish typing the command and press , a new fill will be created and VSCode will open it so that you can start coding. If the filename that you specify belongs to an existing file, then you\u0026rsquo;ll just open that file.\nNote: :EDIT and Relative paths When using the :edit command, VSCodeVim is configured to use relative paths in relation to the currently opene file. If doesn\u0026rsquo;t support TAb completion so it\u0026rsquo;sm mostly useful to create new files that co-located or live near the current file you\u0026rsquo;re working on.\nAs usual, vim always tries to save you worke and this is not different in Command-line mode: Every Ex command has a shorthand version that allows you to trigger a command with just a few letters. For instance, the shorthand version of :edit is :e .\nSaving and Closing Files A couple of nifty Ex commands let you to save and close files quite rapidly:\n * Use :write (shorthand :w) to save a file * Use :quite (shorthand :q) to close a file  These two commands are what I like to call *soft commands**. They\u0026rsquo;ll attempt to perform the action they describe but, under some conditions, they\u0026rsquo;ll fail and prompt you to take further. Likewise :quit will close a file but will fail if the file have unsaved changes.\nTo ignore any complains and perform an action at all costs, you can combine the previous command with a !.\n Use :write! (shorthand :w!) to save a file even if it\u0026rsquo;s been saved already or if it is readonly Use :quit! (shorthand :q!) to close a file without saving.  You can combine these commands to perform multiple actions:\n Use :wq to save and close a file.  Or apply them to all the opened files at once:\n Use :wall (shorthand :wq) to save all files. Use qall (shorthand :qa) to close all files. Use :wqall (shorthand :wqa) to save and close all files. Use :qall! (shorthand :qa!) to close all files without saving.  Deleting Multiple Lines at Once In earlier chapter you learned that vim has a bunch of operators that allow you to perform changes in text: d to delete, c to change , y to yank etc.\nVim also provides a series of Ex command that perform equivalent actions to the normal mode operators but with a different use case in mind: Operating on multiple line at once. These text-editing Ex commads takes the following shape:\n :[range]command[options]  Where range defines a range of lines to which to apply the command and options vary depending on the cmmand itself. For instance, in the case of :delete we have:\n :[range]d [register]  Where register represents a register in which to cut whatever it is we delete. for instance.\n :10,12d a  Delets the lines 10,11 and 12 and puts them inside the a register. As you can appreciate above, ranges are generally defined by their extremes: An intial line and an ending line.\nThoese extremes can, in turn , be expressed in different ways.\n Using Numbeers (e.g :10,12d) to delete line 10,11 and 12 Using offsets (e.g :10,+2d) to delete lines 10,11 and 12 Using the current line represented by .(e.g :.,+2d) to delet te current lne and te next two ones. Using % to represent the whole file (eg. :%d) to delete the whole file Using 0 to represent the beginning of the file ie **:0,+10d to delete the first 10 lines Using $ to represent the end of te file (e.g **:.,$d**) to delete the from the current line to the end of the file If you use visual mode to make a text selection and type : your command line area will be pre-populated with the following :\u0026lsquo;\u0026lt;,\u0026lsquo;\u0026gt; which is a special range that represents the current visual text selection.  :\u0026lsquo;\u0026lt;,\u0026lsquo;\u0026gt;d meant delete the current text selection.    Why use Ex command instead of the normal mode commands we learned in the previous sections.? Ex commands are useful because they allow you to apply a command over range of line without needing to move the cursor to that locatio first. Whenever you need to apply a change over multiple lines, consider using ex commands. It may be the farter approach than Normal mode.\nOther Useful EX command alternatives to Normal mode commands are :yank, :put , :copy and :Move but they\u0026rsquo;re not supported in Vscodevim unless we enable the integration wit neowvim.\nRepeating Ex Commands Just like you can repeat Normal Mode commands with the dot operator, Ex command also have a repeater command. Type @: and you will repeat the last ex command, from then on you can repeat it again with @@.\nSubstituting Text. Another useful Ex command is :substitute. it allows you to substitute arbitrary bits of text for others of your choosing. The shape of this command is:\n :[range]s/{pattern}/{substitute}/{flags}  where:\n range defines the range in which we\u0026rsquo;ll apply the substitution. pattern is a search pattern that describes the text we want to change. Like /pattern it supports reqular expressions. substitute is the text we want to substitute. flags let us set options that configure the substitution.  For example, the following command:\n :s/led/gold  Changes the first occurence of led to gold.\nIf we want to change all occurences in the current line then we need to add the g flag or global flag like so:\n :s/let/gold/g  And if we want to change \u0026lsquo;all occurrences for a whole fil we just need to specify the entire file as a range with % like this:\n :%s/let/gold/g  In additions to the g flag we can use:\n i for case insensitive searches. c to confirm each and every substitution.  The fact that we can use regular expressions with the :s command opens the door to a lot of creative use cases. For instance, we could change the indentation level o all titles in a markdown file by using the following _ :s_ command:\n :%s/^#//  which can be translated to :\n % for the whole file s substitute ^# any # at the beginning of a line (i.e a header in markdown)\n*// for an empty character.  Global by default You may want to enable the \u0026ldquo;vim substitute Globla flag\u0026rdquo; option in your VSCodeVim preferences. This will enable the g flag for all substitutions and save some typing.\nWhen this option is activated the g flag changes its meanding to the opposite of what it used to be. From then on, adding it to a :s command will meand that only the first occurrence in a line will be subsituted.\nSplits , Tabs and Switching Between Them A great feature in vim is its great support for splits and tabs. Creating, resizing, rearranging and movign between splits and tabs is incredibly easy and fast in vim. VSCodeVim offers an Ok support for this vim feauter that, although not as good as vim\u0026rsquo;s, is still useful.\nSplits Splits are awesome, They allow you to divide your workspace into vertical and horizontal split windows:\n Use the :sp {relative-path-to-file} command to open a file in a horizontal split Use the :vsp {relative-path-to-file} command to open a file in a verticial split.  Alternatively, instead of these EX commands you can use:\n  S to open horizontal split (window and split)  V to open a vertical split (vertical)  Using either of these commands will open a split to the same file that you\u0026rsquo;re currently editing. So after creating the split you\u0026rsquo;ll need to type ctrl-p on windows to opn a new file in that split.\nYou can move btwn splits usind the ctrl-w+hjkl\n*Are you currently on a verticl split and want to move to the one on the right? Type ctrl-w then l(the motion you typically use to move the cursor to the right. This key combinations works even when jumping from a code window to the file explorer or and integrated terminal. Sweet!\nTabs In visual studio code you can open several tabs within a split. In order to do so:\n use :tabnew {file} to open a file in a new tab. Use :tabn (:tabnext) to go to the next tab. Use :tabp (:tabprevious) to go to the previous tab. Use :tabo (:tabonly) to close all other tabs.  Still Lots of Typing? I Know! The default command for operating and moving around split and tabs are slightly verbos and uncomfortable.\nNote  Vim works with tabs of splits, whereas VSCode works with split of tabs. I find the former much better to work with than the latter. Within vim a tab can denote a feature or workspace, whereas splits within a tab correspond to a related piece of functionality.  Surrounding Things with vim Surround VScodevim comes with a bunch of useful vim plugins built-i. One of them is vim-surround which enabled by default and extends vim\u0026rsquo;s secret language with a new operator: surround or s.\nUsing the surround operator we can operate on the surroundings (quotes, parenthesis,braces, tags,etc) of swaths of text much in the same way to how we use other operators within vim.\nThe surround operator itself can be seen as three separate operators.\n * ds to delete the surroundings * cs to change the surroundings * ys to add surroundings  And so, like any operator in Vim you would use like this:\n ds{count}{motion} cs{count}{motion} ys{count}{motion}  For example:\n ds\u0026rsquo; to delete the surrounding ' (ds{char}) cs\u0026rsquo;\u0026rdquo; to change surrounding ' to \u0026quot; (cs{old}{new}) ysaptli\u0026gt; to surround a paragraph with an  tag (ys{motion}{char})  You can also use vim-surround by selecting a bit of text in visual mode and then using S{desired character}. This will surround your text selection with the desired character.\nElevationg Your WorkFlow with Custom Mappings One of the greates features in vim is its customizability. A simiple way to get started customizing vim and one that will have the greatest effect in your daily coding is creating custom mappings. A mapping in vim is the equivalent to a shortcut in other editor but with a strong focus on melodies of key that are so natural to vim.\nwhy Custom Mappings? Cutom mapping are useful for two reasons:\n They let you customize vim and adapt it to the way you work by creating custom mappings for things that you use often. They let you priotize vim functionality by bringing it nearer to your fingertips. Using custom mappngs you can create a hierarchy of commands where the most useful one can be reached from the commodity of your home row and the less useful ones can be reached throudh comfortable, yet more length key combinations.  Creating custom Mappings You can create custom mappings using Visual Studio code Preferences:\n Open the command palette with ctrl-shift-p. Type preferences. Select the preferences : Open User settings Options Type vim  And you\u0026rsquo;l filter your visual studio code preferences to display only VSCodeVim related ones. Now you can use the following settings to add your custom mappngs in different modes:\n Normal mode key bindings Non recursive for normal mode Visual mode key bindinds non recursive for visual mode Inserat Mode key bindings Non recrusive for Insert Mode  Having different mappings for different modes makes sense because each mode is a clean slate where you can redefine mapping to perform tasks specific to tat mode. That allow you to reuse key keyboard real state in each mode and have powerful functionality near your fingertips.\nNote that these settings can only e changed via a json version of the settings.\nA custom mapping normally takes the following shape.\n { \u0026quot;vim.insertModeKeyBindingsNonRecursive\u0026quot;: [ { \u0026quot;before\u0026quot;: [\u0026quot;j\u0026quot;, \u0026quot;k\u0026quot;], \u0026quot;after\u0026quot;: [\u0026quot;\u0026lt;ESC\u0026gt;\u0026quot;] } ], }  Where:\n before is the sequence of commands that you type. after is what the previous commands map to and what gets executed when you type them.  Guidelines For Creating Custom mappings The ability to create custom mapping gives you a lot of freedom and flexibility to define how you intercat with visual studio code. But because there\u0026rsquo;s noting stopping you for doing whatever you like, you may end up shooting yourself in the foot. Here are some rules to guide you when creating you very own custom mappings and save those precious toes of yours:\n  Use the leader key do define your custom mapping. the leader is a special key in vim whose purpose is to act as a namespace or gateway to user defined mappings. The leader key is assigned to the backslash key \\\n  If there\u0026rsquo;s someting in your workflow that you use all the time, then it is OK(encouraged in fact) to overwrite a less useful default vim bindings.\n  Create mapping that are easy to remember. Follw vim\u0026rsquo;s tradition and rely on mnemonics.\n  Customizing the Leader KeY You can change the leader key to something easier to type than the backslash \\ (I don\u0026rsquo;t know you, but i hate having important keys associated to my pinky fingers).\nGo to your VSCode Preferences and update the following setting:\n { \u0026quot;vim.leader\u0026quot;:\u0026quot;\u0026lt;Space\u0026gt;\u0026quot; }  From now on, whenever you see a custome mapping that refers to  you can translate that in you head to .\nSome Good Custom Mappings Here are some other greate example of useful mappings.\nMoving up and Down Faster In Normal Mode.\nThes mappings allow ou to move up and down faster in Normal mode (althoudh they are just as useful in visual mode):\n { \u0026quot;vim.normalModeKeyBindingsNonRecursive\u0026quot;: [ { \u0026quot;before\u0026quot;: [\u0026quot;J\u0026quot;], \u0026quot;after\u0026quot;: [\u0026quot;5\u0026quot;, \u0026quot;j\u0026quot;] }, { \u0026quot;before\u0026quot;: [\u0026quot;K\u0026quot;], \u0026quot;after\u0026quot;: [\u0026quot;5\u0026quot;, \u0026quot;k\u0026quot;] }, ] }  From now on You\u0026rsquo;ll be able to use:\n J to move down faster. K to move up faster.  This matches perfectly with vim\u0026rsquo;s idea of commands in capital letter being STRONGE version of the commands in lowercase. That is, J allows you to move faster than j and k faster than k.\nHere we\u0026rsquo;ve overwritten two vim default bindings because browsing the code up and down is something that you\u0026rsquo;ll do all the time. Whereas J (join lines), although useful, is something that you do only from time to time. k is used for keyword searc but isn\u0026rsquo;t yet implemented in VSCodeVim.\nKeep Joining Lines Joining lines is still useful so we\u0026rsquo;re going to keep it. Although we will downgrade its importance in hieracyh by making it slightly harder to type.\nUpdate you VSCodeVim configuration to include this new mappings:\n { \u0026quot;vim.normalModeKeyBindingsNonRecursive\u0026quot;: [ { \u0026quot;before\u0026quot;: [\u0026quot;\u0026lt;Leader\u0026gt;\u0026quot;, \u0026quot;j\u0026quot;], \u0026quot;after\u0026quot;: [\u0026quot;J\u0026quot;] }, ] }  So now on you\u0026rsquo;ll be able to use.\n J to move down faster. k to move u faster.  Easier Switching Between Splits Switching split window is someting that you\u0026rsquo;ll do all the time so try out these bindings:\n { \u0026quot;vim.normalModeKeyBindingsNonRecursive\u0026quot;: [ { \u0026quot;before\u0026quot;: [\u0026quot;\u0026lt;C-h\u0026gt;\u0026quot;], \u0026quot;after\u0026quot;: [\u0026quot;\u0026lt;C-w\u0026gt;\u0026quot;, \u0026quot;h\u0026quot;] }, { \u0026quot;before\u0026quot;: [\u0026quot;\u0026lt;C-j\u0026gt;\u0026quot;], \u0026quot;after\u0026quot;: [\u0026quot;\u0026lt;C-w\u0026gt;\u0026quot;, \u0026quot;j\u0026quot;] }, { \u0026quot;before\u0026quot;: [\u0026quot;\u0026lt;C-k\u0026gt;\u0026quot;], \u0026quot;after\u0026quot;: [\u0026quot;\u0026lt;C-w\u0026gt;\u0026quot;, \u0026quot;k\u0026quot;] }, { \u0026quot;before\u0026quot;: [\u0026quot;\u0026lt;C-l\u0026gt;\u0026quot;], \u0026quot;after\u0026quot;: [\u0026quot;\u0026lt;C-w\u0026gt;\u0026quot;, \u0026quot;l\u0026quot;] }] }  Easier Tab Handling The only wat to interact with tabs in vscodevim is through commands which require you to type a colon followed by a bunch of letter.\nWe can do better:\n{\n\u0026ldquo;vim.normalModeKeyBindingsNonRecursive\u0026rdquo;: [\n{\n\u0026ldquo;before\u0026rdquo;: [\u0026ldquo;\u0026rdquo;, \u0026ldquo;t\u0026rdquo;, \u0026ldquo;t\u0026rdquo;],\n\u0026ldquo;commands\u0026rdquo;: [\u0026quot;:tabnew\u0026rdquo;]\n},\n{\n\u0026ldquo;before\u0026rdquo;: [\u0026ldquo;\u0026rdquo;, \u0026ldquo;t\u0026rdquo;, \u0026ldquo;n\u0026rdquo;],\n\u0026ldquo;commands\u0026rdquo;: [\u0026quot;:tabnext\u0026rdquo;]\n},\n{\n\u0026ldquo;before\u0026rdquo;: [\u0026ldquo;\u0026rdquo;, \u0026ldquo;t\u0026rdquo;, \u0026ldquo;p\u0026rdquo;],\n\u0026ldquo;commands\u0026rdquo;: [\u0026quot;:tabprev\u0026rdquo;]\n},\n{\n\u0026ldquo;before\u0026rdquo;: [\u0026ldquo;\u0026rdquo;, \u0026ldquo;t\u0026rdquo;, \u0026ldquo;o\u0026rdquo;],\n\u0026ldquo;commands\u0026rdquo;: [\u0026quot;:tabo\u0026rdquo;]\n}]\n}\nTaking advangage of the  key we can now open new tabs, move round and close all tabs but the current one.\nDid you notice something different about these custom mappings?\nExactly! you use a slightly different syntax when mapping keys to commands, Instead of using before and after. We use before and commands represents either the Ex commands or visual studio native commands that should be run whenever we type the key mapping defined by before.\nCleaning Highlighted text when you search for patterns in vim using the /{pattern} and ?{pattern} commands, the matching patterns will be highlighted. In order to remove the highlights you can use the :noh (no highlighting) command.\nThis is such a common task that I prefer the following mappings:\n { \u0026quot;vim.normalModeKeyBindingsNonRecursive\u0026quot;: [ { \u0026quot;before\u0026quot;: [\u0026quot;\u0026lt;Leader\u0026gt;\u0026quot;, \u0026quot;/\u0026quot;], \u0026quot;commands\u0026quot;: [\u0026quot;:noh\u0026quot;] }] }  Now you can type the / and get ride of the hightlights until your next search. The mnemonic is the /which is normally used to search for pattern. So you can thike of /{pattern} as something that you do to start a search, and */ as something you when you\u0026rsquo;re done with a search.\n{ \u0026quot;before\u0026quot;: [\u0026quot;\u0026lt;Leader\u0026gt;\u0026quot;, \u0026quot;/\u0026quot;], \u0026quot;commands\u0026quot;: [\u0026quot;:noh\u0026quot;] }  Creating Custom Mappings to Vscode Actions Yet another cool ting that you can do with VSCode is to use Vim mappings that trigger Visual Studio code native commands. For instance, the following binding:\n { \u0026quot;vim.normalModeKeyBindingsNonRecursive\u0026quot;: [ { \u0026quot;before\u0026quot;: [\u0026quot;leader\u0026quot;, \u0026quot;w\u0026quot;], \u0026quot;commands\u0026quot;: [ \u0026quot;workbench.action.files.save\u0026quot;, ] } }  Let\u0026rsquo;s you save a file using w by triggering VSCode \u0026ldquo;Workbench.action.files.save\u0026rdquo; action.\nThe command palette and go to symbol in fier are particularly hard to type so let\u0026rsquo;s create a custom mapping to keep our wrist healthy.\n { \u0026quot;vim.normalModeKeyBindingsNonRecursive\u0026quot;: [ { \u0026quot;before\u0026quot;: [\u0026quot;\u0026lt;Leader\u0026gt;\u0026quot;, \u0026quot;p\u0026quot;], \u0026quot;commands\u0026quot;: [ \u0026quot;workbench.action.showCommands\u0026quot;, ] }, { \u0026quot;before\u0026quot;: [\u0026quot;\u0026lt;Leader\u0026gt;\u0026quot;, \u0026quot;t\u0026quot;], \u0026quot;commands\u0026quot;: [ \u0026quot;workbench.action.gotoSymbol\u0026quot;, ] } ] }  Now you no longer need to contort your fingers to open the command palette or go to symbol. Just type P and t respectively and you\u0026rsquo;ll quickly access either of these panels. Yihoo!\nThere are a lot more interesting and useful mapping in the VSCodeVim documentation But remember to be critical. Before you add a custom mapping in your VSCodevim configuration consider whether it offers a better workflow than whatever you use today.\nA significant part of becoming more effective wit vim is to be mindful of your development workflow. Revisiting your vim configuration now and then, and adding new mappings that enhance the way you work so be mindful form now on, and keep your vim configuration razorsharp.\nMoving Even Faster With Vim Surround and EasyMotion. Vim-sneak and vim-EasyMotion are a couple of vim plugin that supercharge how fast you can move in vim.\nBoth of these plugin need to be enabled via your VSCodeVim settings. To enable them, just go to preferences, setting search for vim sneak or *vim easymotion and you\u0026rsquo;ll find the switch.\nVim-Sneak Vim-sneak is a middle ground between character search (inside a line) and pattern search (inside a file).\n Type s{char}{char} and the cursor fliex to the first occurrence of that two character sequence. From then on type : for the next occurence, or . for the previous one. S{char}{char} works in a simlar fashion but backwards.  Where vim-surround extendet vim\u0026rsquo;s secred language with an operator, vim-sneak does the same but with a motion: the sneak motion.\n Type {operator}z{char}{char} and the operator will be applied over the text traversed by the sneak motions.  Why Z instead of S? When used in conjuction with other operators, vim-sneak used the Z because the s is already taken by vim-surround. And vim-surround is an extremely popular vim plugin.\nVim-EASYMOTION Vim-EasyMotion tries to simplify the use of motions in Vim by removing the need for counts. Instead of looking at a piece of code, counting in your head and using either of these combinations to perform some action.\n{operator}{count}{motion}  or move around:\n{count}{motion}  when you trigger an motion with EasyMotion, it Labels the possible targets in the whole documents with a key combination that is shown in an overlay(over the text in question). Type that key combination, and you\u0026rsquo;re teleported to the location at once.\nFor instance, type w and EasyMotion will label the beginning of all words ahead of you like so.\nIn the example of the image, typing the letter l would make your cursor jump to the FactionShipModifiers interface, while typing p would send you to the Energy property of that interface.\nOr you could type f\u0026rsquo; and EasyMotion will label all occurrences of the ' character in the current and subsequent line. All the motions provided by vim-EasyMotion are namespaced by , and they use key bindings whose meaning is related to the core Vim motionsO\n   Command Move to\u0026hellip;     w start of words   b start of words backwards   bdw start of words eveywhere. the bd stands for birectional   bdw start of words eveywhere. The bd stands for bidirectional   ge end of words backwords   bdw end of words eveywhere   j beginning of lines   k beginning of lines backwords   f{char} find character   F{char} find character backwards   t{char} until character   T{char} until character backwords   s{char} search character everywhere    EasyMotion Only Works For Moving Around In the VSCodeVim version, the motions in EasyMotion only support moving around and can\u0026rsquo;t be combined with operators. This is a feature that is supported in traditional Vim so it may be something that will come to VsCodeVim down the line.\nMultiple Cursors If You\u0026rsquo;re a hardcore Visual studio Code user, Chances are you use multiple cursors. VSCodeVim offfers an experimental support for multiple cursors in visual and Normal modes. Using this experimental features (that is enabled by default), you can spawn multiple cursors and then use Operators to unleash the power of vim In Multiple locations at once.\nAdd Multiple Cursors Based Of Word Search If you want to add multiple cursors based on word search you need to:\n Move the cursor on top of a word in your code. Type ctrl-d or gb to add another cursor. This puts vim into visual mode and ready to operate on the word you have selected. Type ctrl-d to continue adding cursors until you\u0026rsquo;re done. Now you can perform an action in **Visual mode(delete, change,etc). Go back to Normal mode with  and type any normal mode command keeping the multiple cursors.  A possible use case for multiple cursor would be to rename something. Imagine that you have a function that renames things, like properties within object in JaveScritp. Let\u0026rsquo;s say that you have this beautiful object that represest me:\nconst jaime = { name: 'Jaime', attributes: ['handsome', 'smart', 'witty'] };  And some day you get tired of all this sel-adoration and narcissim and want vengeance. So you decide to rename my property attributes to lackingattributes\nsuch a function (that you must now promise never to write in any program ever) could look like this.\nfunction rename(obj,n ame, newname){ object.defineproperty(obj, newname, { value: objn[ame], enumerable: true, writable: true, configurable: true }); delete objn[ame];  }\nn\nThe name** property isn\u0026rsquo;t descritive enough so we want to rename it to oldName because this example couldn\u0026rsquo;t be more meta that this. We can achieve this renaming using multiple cursors:\nn\n Move your cursor on top n   ","description":"","id":20,"section":"posts","tags":["notes"],"title":"Visual Studio code With Neovim","uri":"https://eduuh.github.io/blog/posts/vscodevim/"},{"content":"My Remaps (General Remaping). My mindset is changing towards what works for me which bring the need to remap the defaults. Over the last few month I have shifted from Qwerty keyboard to colemak keyboard layout. I also made a shift from Windows machine to a Linux box a decision which I have not regretted ever.\nI had written this post before my Major Os shift and my requirement have changed considerably. Let me explain more on that. I am in the process of streamlining my workflow to 100% keyboard centric. This was greatly influeced by the possiblities in a linux box. Something that windows don\u0026rsquo;t offer. The power of choice. Don\u0026rsquo;t get me wrong I still use windows machine. But Linux works for be best.\nCurrently am using a window manager (i3) for window layout management on my linux computer. For computer configuration and tweaking i have no problem using the command line.A keyboard centric approach calls for some remaps at one point in order to be more efficient. What i wanted to achieve are the following.\n  Load Colemak Keyboard Layout.   Remaping caps lock to function as  control key when pressed with other keys. Escape -\u0026gt; Short presses.    Remaping tab lock to function as. Not successful on this one.  super key (Mod4) when pressed with other keys. Tab -\u0026gt; Short presses.    Changing the repeat KeyPresses to be a little more faster.    Explaination Why Window Function as super key(Mod4) Initially i was using caps Lock as my Super key and escape but later i realized it was easier to use it a the window key easy to type with my left 👍. Currently my caps lock function as control and escape. This remap improves my productivity a great deal when working with brave browser and tmux.\nAs i mentioned earlier , am using i3 (improved tiling window manager). Okey edd! what do it do?.Good question👏\nWith i3 am able to do alot of stuff using keyboard shortcuts. **The activation key is usually the (super) key often known as **Windows key****. I will write on how i use I3 window manager but let me mention a few.\n  Basic  Opening a new terminal. (using st terminal) changing window focus.(using activation key and h,n,e,i)    Moving windows  Move window across the screen Moving windows to different workspaces    Using worspaces  Swith to another workspace Move window to another workspace    Opening application / closing windows  Open application lancher (dmenu) kill a window.    Modifying windows  going fullscreen resizing     Considering the above functinality. I need the (Mod4) to be at close proximity to the home row. I don\u0026rsquo;t want to move my hands each time i want to either of the task. I have come to realize that it is easy to type window key with the 👍. If i have problem with using the finger am planning to remap alt to mod4 key.\nCapsLock Function as Escape. Short presses on the capsLock are Escape. This is also my favorite remap i have. I have to admit that am i am learning Vimcraft as i making this big shifts. Vim is a Modular editor and to change between the modes (normal, command_line mode, visual mode) we use Escape key.\nTools Used  xcape : used to remap (CapsLock to a Smartkey) setxkbmap : Used to change the keymaps using Keycodes and keysm. xmodmap to remaps the capslock. xset : to reset the repeat rate of keys.    Changing my keyboard Layout. (Setxkmap)  I found the default keyboard layout is qwerty. My default is colemak. The solution that i found to work for me is to use \u0026lsquo;setxkbmap\u0026rsquo; to change the layout to colemak layout.\nsetxkbmap us -variant colemak \u0026amp; This is how my remaps script looks like. This script is called on startup to remaps keys and set my default keyboard layout.\n xcape  XCAPE allows you to use a modifier key as another key when pressed and released on its own. Note that is is slightly slower than pressing the original key, because press event does not occur until the key is released. The default behaviour is to generate the Escape key when Left Control is Pressed and released on its own.\nRemaps Super_L to produce Escape on short keypress.\nkillall xcape 2\u0026gt;/dev/null ;xcape -e \u0026lsquo;Control_L=Escape\u0026rsquo;\n xset  xset user preferences utility for x. I use this tool to reduce the keypress delay on my linux box by 50%.\nxset r rate 300 50  xmodmap  Utility for modifying keymaps and pointer button mappings in X.\nxmodmap -e \u0026lsquo;keycode 135 = Super_R remaps. (Scripts) A script is just a file with a group of commands that are run by bash. This remaps script is currently run during user login. remaps is a script that contains a series of statements which first loads my default colemake keyboard layout and then remaps my CapsLock to a smart key.\n Archive Notes. I used to use this method but i currently using the above remaps. The caps lock was my superkey for i3craft. but i have shifted to smart key for my productivity.\nRun the commands below to remap capslock to control and escape.\n The effect should apply immediately.\nStep 3. Autostart Append code from Step 2 to file ~/.xprofile to run the command when X starts.\nWindows Option 1:  Download and install AutoHotKey. Use the script CapsLockCtrlEscape.ahk.   This was made possible with a third party software called AutoHotkey described as the Altimate automation script for windows systems.\nI choose to use these program since i plan to do some automations with it in the future.\nI admit i did not write the script for this program myself by i sourced out from github.\nThis script came with something additional that i loved. I did not lose the caps lock fuctionality as in my linux distro. Pressing the two shift keys together activates thes caps lock.\n","description":"Reload the colemak Keyboard layout on my arch distributions and Remaping caps lock to function primary as Escape on short presses and Control when pressed with other keys","id":21,"section":"posts","tags":["cli"],"title":"My Keyboard Remaps(Smart CapsLock)","uri":"https://eduuh.github.io/blog/posts/remaps/"},{"content":"Introduction. ","description":"Devops Community Launch","id":22,"section":"posts","tags":["cli"],"title":"Dotfiles sync with bare repository","uri":"https://eduuh.github.io/blog/posts/devopscommunity/"},{"content":"Algorithms What makes an algorithm fast? To answer this question, it tend to be grouped in two categories. With respect to input size\nand also assuming the worst case scenario.\n Time complexity Space Comlexity  Time complexity Here we answer the question of how many primitive operations are executed?\nTime complexity of an algorithm signifies the total time required by the program to run to completion. The tim complexity of algorithms is\nmore commonly expressed usind the big O notation.\nBig-O notation gives us an Industry-standard language to discuss the performance of algorithms. Not knowing how to speak this language\ncan make you stand out as an inexperienced programmer.\nSpace Complexity Here we are answering the question of How much memory is Used?\nProblem to think On Given a list of hotels return the price range of hotels in a given search result. Lets write the algorithm..\nvar hotels = [ {price : 200, brand : \u0026#34;best eastern\u0026#34;} .... ] solution We\u0026rsquo;d expect that the more data we have, the longer it will take to figure out the min and max required for the range.\nHowever, as our dataset grows, the cost can grow really fast or slow!\nApproch 1 : Compare all numbes to one another. As our data grows, how much does our work increases?\n   # of hotels (n) 3 5 10 100     #ops 9 25 100 1000    We can call this n^2 ,where n is the number of hotels. As n grows, the amount of work increases at that rate.\nApproach two: Trach min \u0026amp; max How many comparison were made? We have to for loops each tracking the minimum and the max values.\nwe consider this 2*n because as the data grows, the number of work increase by 2.\nIts faster, less comparison are made for this.\nApproach 3: Sorted List Here you know where the min and max. We get the first and the last numbers.\n   # Operations Big-O Algorithm     n^2 (quadratic) compares all the numbers   2n (Linear) Find min and and max values   2 ,constant Sorted list find first and last    As the input grows.\nsuper fast\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026gt;super slow\n|Name |constant | logarithmic |linear | quadratic | exponential|\n|\u0026mdash;\u0026mdash;-|\u0026mdash;\u0026mdash;\u0026mdash;|\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;-|\u0026mdash;\u0026mdash;-|\u0026mdash;\u0026mdash;\u0026mdash;\u0026ndash;|\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;|\n|Notation|O(1) | O(logn) | O(n) | O(n^2) | O(e^n) |\ncheck out the big o chart\nNative Methods \u0026amp; JS Expressions Time complexities  Arrays : Contant.  pop is contant times.\nconst arr = [1,2,3] arr.pop() //=\u0026gt; {1,2} arr[1] // dont need to start from index one, it know where the value is Object : Contant time algorithm  const obj = {a: 1}; obj.a // -\u0026gt; 1 For loop: Linear. Shift and Unshift are not contants since the but they are linear. Sort.  Calculating Time What to we do if we have multiple expressions/loops/etc?\n what about o(logn)? A little better that linear.\n Complexity of Common Operations    complexity operation     O(1) Running a statement   O(1) value look-up on array, object,variable   O(logn) loop that cuts a problem in half every iteration   O(n) Looping through the value of an array   O(n^2) Double nested loops   O(n^3) Tripple nested loops    Space Complecity The space that it take up in the memory. Are you making a new\ndata structure how often are you doing that?.\n","description":"What makes an algorithm fast? To answer this question, it tend to be grouped in two categories. With respect to input size and also assuming the worst case scenarios of either time complexities or space complexity.","id":23,"section":"posts","tags":null,"title":"JavaScript Algorithm and Data Structures","uri":"https://eduuh.github.io/blog/posts/jsargorithms/"},{"content":"A simpler way to manage your dotfiles Hey there am edd. I was having trouble with configuration files since I started using docker for my development. I realized I was reconfiguring each time I recreated a new environment. For consistecy and time saving , I decided it would be great if could sync my dotfiles using git and github and when creating new enviroments.\nI wrote the solution in this post, for easy reference if i need to in the future.\nWhat are dotfile Dotfile are file in the linux system that starts with a period. They are mainly used to store configuration files for the User instance for various applications. For me the dotfiles that i would love to manage are as follow.\n i3 (window manager) tmux (terminal multiplexer) zathura (pdf reader) nvim (text editor) dwm (dynamic window manager.) st   Both dwm and st are suckless programs.According to suckless philosophy, application are configured from the source code instead of using configuration files (also possible through patchs). I use Lukes build for dwm and st. You will notice that I forked dwm from luke build. I needed to customizing keybings to colemak keyboard layout.\nYes setup.sh this is a custom setup script that i maintain to initially setup a new installation with all the setting and softwares i need in my system. Could be used to\n setup the configuration files managed by the git repository. Setup my keyboard mapping to the way a need them to be .   The keyboard mapping i love most, and spend alot of time setting it up is Remapping caps lock to act as a control key when pressed together with other character, and behave as Escape when pressed alone.\nI would love to automate the process , so that i don\u0026rsquo;t even think about it. Like most folks(know this from my research), I use git to manage my dotfiles. This lets me have a versioned backup for my configurations, and if something breaks (and it often does) I can revert to a working configuration fairly easily. I came across a post of how to manage the dotfiles without the need for any symlinking.\nThe key idea is really simple: make $HOME the git work-tree. The normal way of doing this would be to do a git init in you $HOME, but that would totally mess up git commands if you have other repositories in your $HOME (also, you probably don\u0026rsquo;t want your entire $HOME in a git repository.\nWe will create a dummy folder and initialize a bare repository.Essentially a git repo with no working directory in there. All git commands will be run with our dummy as the git directory, but $HOME as the work directory.\nGit bare Repository. A git repository is a repository that is created without a Working Tree but just the contents of what is typically in the .git directory.\nWhy this setup?\nA bare repository is typically used as a Remote Repository that is sharing a repository amoung several different people. You don\u0026rsquo;t do work right inside the remote repository so there\u0026rsquo;s no working Tree.\nManage your dotfiles with bare repository (First Time). Requirements. 1. Git installed.\n2. Create a remote dotfile repository on github or any other service. Setting this method up the first time is really easy. First, let\u0026rsquo;s create our bare repository. I chose to name my placeholder .dotfiles. Ofcourse you can use any name.\nmkdir $HOME/.dotfiles git init --bare $HOME/.dotfiles Now for fun part. We will make an alias for running git commands in our .dotfiles repository. I\u0026rsquo;m calling my alias dotfiles: .Make sure you reference the right dotfiles folder which are anywhere within your $HOME folder.\nThis alias references the git binary and also indicates the Home folder as your working tree.\nalias dotfiles=\u0026#39;/usr/bin/git --git-dir=$HOME/.dotfiles/ --work-tree=$HOME\u0026#39; Add this alias to your .bashrc. From now any git operation you would like to do in the .dotfiles repository can be done by the dotfiles alias. The cool thing is that you can run dotfiles from anywhere.\nSource the url of the remote dotfiles folder and use it to configure the origin.\nLets add a remote and also set status now to show untracked files since there will be a long list of Untracked files. You will only track a few of the files.\ndotfiles config --local status.showUntrackedFiles no dotfiles remote add origin https://github.com/eduuh/dotfiles.git Adding the conf to Source control. Note: Avoid using dotfiles add . since you don\u0026rsquo;t want to and your home folder to your dotfile repository.\nexample:\ndotfiles add .bashrc dotfiles commit -m \u0026#34;added bash configuration file to source control\u0026#34; Setting Up a New Machine With existing Configuration. Method 1 Assumtion is that you are using the above described method to store your dotfiles.Make a backup folder first and backup the default configuration available for your application. But in most cases you man not have them.\nSetting this method up the first time is really easy. First, let\u0026rsquo;s create our bare repository. I chose to name my placeholder .dotfiles. Ofcourse you can use any name.\nmkdir \\$HOME/.dotfiles git init --bare \\$HOME/.dotfiles Set up the alias for the current session using the command.\nalias dotfiles=\u0026#39;/usr/bin/git --git-dir=$HOME/.dotfiles/ --work-tree=$HOME\u0026#39; Set up the remote github repository.\ndotfiles config --local status.showUntrackedFiles no dotfiles remote add origin https://github.com/eduuh/dotfiles.git Pull in the changes form your remote repository.\ndotfiles pull origin master dotfiles reset --hard HEAD # ovewrites the Home Directory** Method 2 Assuming that your configuration are in github. To set up your computer using your configs is simple.\nTo set up a new machine to use your version controlled config files, all you need to do is to clone the repository on your new machine telling git that it is a bare repository:\nPerform the above steps.\ngit clone --separate-git-dir=\\$HOME/.dotfiles https://github.com/eduuh/dotfiles.git However, some programs create default config files, so this might fail if git finds an existing config file in your $HOME. In that case a simple sol is to clone to a temporayry directory and then delete it once you are done:\nCreate the alias file.\nalias dotfiles=\u0026#39;/usr/bin/git --git-dir=$HOME/.dotfiles/ --work-tree=$HOME\u0026#39; The last step is to override everything in home directory with the new files you want there.\ndotfiles reset --hard HEAD Since you want to use your dotfiles. That means you don\u0026rsquo;t care about the default configuration files presents in your linux box.\nUsing the dotfiles alias For the Dotfiles repository, Your will use dotfiles instead of git. Use it as you normally use git commands.\nExample of some Commands:\nA commit command.\ndotfiles commit -m \u0026#34;zshrc =\u0026gt; zsh oh my god configuration files \u0026#34; [master 64a553b] zshrc =\u0026gt; zsh oh my god configuration files 1 file changed, 91 insertions(+) create mode 100644 .zshrc A push action.\ndotfiles push Enumerating objects: 4, done. Counting objects: 100% (4/4), done. Delta compression using up to 4 threads Compressing objects: 100% (3/3), done. Writing objects: 100% (3/3), 1.45 KiB | 1.45 MiB/s, done. Total 3 (delta 0), reused 0 (delta 0) To https://github.com/eduuh/dotfiles.git 7d507e7..64a553b master -\u0026gt; master The repository will be downloaded but there might exist some configuration files in your home directory to make sure you are using the right configuration file use git checkout to actually copy the copy in your repository to the working directory.\ndotfiles checkout $HOME/.bashrc Or easy is to checkout to the latest commit. Remember Head points to the latest commit use that.\ndotfiles reset --hard HEAD HEAD is now at 64a553b zshrc =\u0026gt; zsh oh my god configuration files **64a553b** at this time this is my latest commit. Do not worry git reset \u0026ndash;hard copied files available in your repository to both the staging area and the working area . It should not mess with your untracted files which i believe they are many, since this is a repository monitoring the $HOME directory.\nThere you go. No symlink mess.\nMy dotfiles are here for reference.\n","description":"","id":24,"section":"posts","tags":null,"title":"Dotfiles","uri":"https://eduuh.github.io/blog/posts/test/"},{"content":"Sample images from Pixabay\n","description":"photo gallery","id":26,"section":"gallery","tags":null,"title":"Photo","uri":"https://eduuh.github.io/blog/gallery/photo/"},{"content":"ssh root@ip_address\n","description":"","id":27,"section":"posts","tags":null,"title":"","uri":"https://eduuh.github.io/blog/posts/dothosting/"},{"content":"Linux CLi productivity  !\u0026lt;command/\u0026gt; Repeats the most recent command. Control + R  Fzf through your history to take the latest command.    ","description":"","id":28,"section":"posts","tags":null,"title":"","uri":"https://eduuh.github.io/blog/posts/linuxproductivity/"},{"content":"weight: 5\nA simpler way to manage your dotfiles Hey there am edd. I was having trouble with configuration files since I started using docker for my development. I realized I was reconfiguring each time I recreated a new environment. For consistecy and time saving , I decided it would be great if could sync my dotfiles using git and github and when creating new enviroments.\nI wrote the solution in this post, for easy reference if i need to in the future.\nWhat are dotfile Dotfile are file in the linux system that starts with a period. They are mainly used to store configuration files for the User instance for various applications. For me the dotfiles that i would love to manage are as follow.\n i3 (window manager) tmux (terminal multiplexer) zathura (pdf reader) nvim (text editor) dwm (dynamic window manager.) st   Both dwm and st are suckless programs.According to suckless philosophy, application are configured from the source code instead of using configuration files (also possible through patchs). I use Lukes build for dwm and st. You will notice that I forked dwm from luke build. I needed to customizing keybings to colemak keyboard layout.\nYes setup.sh this is a custom setup script that i maintain to initially setup a new installation with all the setting and softwares i need in my system. Could be used to\n setup the configuration files managed by the git repository. Setup my keyboard mapping to the way a need them to be .   The keyboard mapping i love most, and spend alot of time setting it up is Remapping caps lock to act as a control key when pressed together with other character, and behave as Escape when pressed alone.\nI would love to automate the process , so that i don\u0026rsquo;t even think about it. Like most folks(know this from my research), I use git to manage my dotfiles. This lets me have a versioned backup for my configurations, and if something breaks (and it often does) I can revert to a working configuration fairly easily. I came across a post of how to manage the dotfiles without the need for any symlinking.\nThe key idea is really simple: make $HOME the git work-tree. The normal way of doing this would be to do a git init in you $HOME, but that would totally mess up git commands if you have other repositories in your $HOME (also, you probably don\u0026rsquo;t want your entire $HOME in a git repository.\nWe will create a dummy folder and initialize a bare repository.Essentially a git repo with no working directory in there. All git commands will be run with our dummy as the git directory, but $HOME as the work directory.\nGit bare Repository. A git repository is a repository that is created without a Working Tree but just the contents of what is typically in the .git directory.\nWhy this setup?\nA bare repository is typically used as a Remote Repository that is sharing a repository amoung several different people. You don\u0026rsquo;t do work right inside the remote repository so there\u0026rsquo;s no working Tree.\nManage your dotfiles with bare repository (First Time). Requirements. 1. Git installed.\n2. Create a remote dotfile repository on github or any other service. Setting this method up the first time is really easy. First, let\u0026rsquo;s create our bare repository. I chose to name my placeholder .dotfiles. Ofcourse you can use any name.\nmkdir $HOME/.dotfiles git init --bare $HOME/.dotfiles Now for fun part. We will make an alias for running git commands in our .dotfiles repository. I\u0026rsquo;m calling my alias dotfiles: .Make sure you reference the right dotfiles folder which are anywhere within your $HOME folder.\nThis alias references the git binary and also indicates the Home folder as your working tree.\nalias dotfiles=\u0026#39;/usr/bin/git --git-dir=$HOME/.dotfiles/ --work-tree=$HOME\u0026#39; Add this alias to your .bashrc. From now any git operation you would like to do in the .dotfiles repository can be done by the dotfiles alias. The cool thing is that you can run dotfiles from anywhere.\nSource the url of the remote dotfiles folder and use it to configure the origin.\nLets add a remote and also set status now to show untracked files since there will be a long list of Untracked files. You will only track a few of the files.\ndotfiles config --local status.showUntrackedFiles no dotfiles remote add origin https://github.com/eduuh/dotfiles.git Adding the conf to Source control. Note: Avoid using dotfiles add . since you don\u0026rsquo;t want to and your home folder to your dotfile repository.\nexample:\ndotfiles add .bashrc dotfiles commit -m \u0026#34;added bash configuration file to source control\u0026#34; Setting Up a New Machine With existing Configuration. Method 1 Assumtion is that you are using the above described method to store your dotfiles.Make a backup folder first and backup the default configuration available for your application. But in most cases you man not have them.\nSetting this method up the first time is really easy. First, let\u0026rsquo;s create our bare repository. I chose to name my placeholder .dotfiles. Ofcourse you can use any name.\nmkdir \\$HOME/.dotfiles git init --bare \\$HOME/.dotfiles Set up the alias for the current session using the command.\nalias dotfiles=\u0026#39;/usr/bin/git --git-dir=$HOME/.dotfiles/ --work-tree=$HOME\u0026#39; Set up the remote github repository.\ndotfiles config --local status.showUntrackedFiles no dotfiles remote add origin https://github.com/eduuh/dotfiles.git Pull in the changes form your remote repository.\ndotfiles pull origin master dotfiles reset --hard HEAD # ovewrites the Home Directory** Method 2 Assuming that your configuration are in github. To set up your computer using your configs is simple.\nTo set up a new machine to use your version controlled config files, all you need to do is to clone the repository on your new machine telling git that it is a bare repository:\nPerform the above steps.\ngit clone --separate-git-dir=\\$HOME/.dotfiles https://github.com/eduuh/dotfiles.git However, some programs create default config files, so this might fail if git finds an existing config file in your $HOME. In that case a simple sol is to clone to a temporayry directory and then delete it once you are done:\nCreate the alias file.\nalias dotfiles=\u0026#39;/usr/bin/git --git-dir=$HOME/.dotfiles/ --work-tree=$HOME\u0026#39; The last step is to override everything in home directory with the new files you want there.\ndotfiles reset --hard HEAD Since you want to use your dotfiles. That means you don\u0026rsquo;t care about the default configuration files presents in your linux box.\nUsing the dotfiles alias For the Dotfiles repository, Your will use dotfiles instead of git. Use it as you normally use git commands.\nExample of some Commands:\nA commit command.\ndotfiles commit -m \u0026#34;zshrc =\u0026gt; zsh oh my god configuration files \u0026#34; [master 64a553b] zshrc =\u0026gt; zsh oh my god configuration files 1 file changed, 91 insertions(+) create mode 100644 .zshrc A push action.\ndotfiles push Enumerating objects: 4, done. Counting objects: 100% (4/4), done. Delta compression using up to 4 threads Compressing objects: 100% (3/3), done. Writing objects: 100% (3/3), 1.45 KiB | 1.45 MiB/s, done. Total 3 (delta 0), reused 0 (delta 0) To https://github.com/eduuh/dotfiles.git 7d507e7..64a553b master -\u0026gt; master The repository will be downloaded but there might exist some configuration files in your home directory to make sure you are using the right configuration file use git checkout to actually copy the copy in your repository to the working directory.\ndotfiles checkout $HOME/.bashrc Or easy is to checkout to the latest commit. Remember Head points to the latest commit use that.\ndotfiles reset --hard HEAD HEAD is now at 64a553b zshrc =\u0026gt; zsh oh my god configuration files **64a553b** at this time this is my latest commit. Do not worry git reset \u0026ndash;hard copied files available in your repository to both the staging area and the working area . It should not mess with your untracted files which i believe they are many, since this is a repository monitoring the $HOME directory.\nThere you go. No symlink mess.\nMy dotfiles are here for reference.\n","description":"Efficient way to manage configuration files in a linux system.","id":29,"section":"posts","tags":["cli"],"title":"Dotfiles sync with bare repository","uri":"https://eduuh.github.io/blog/posts/dotfilesmanagement/"}]